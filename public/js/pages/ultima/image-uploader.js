/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 160);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/ultima/image-uploader.js":
/*!**************************************************************!*\
  !*** ./resources/metronic/js/pages/ultima/image-uploader.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! Image Uploader - v1.0.0 - 15/07/2019\r\n * Copyright (c) 2019 Christian Bayer; Licensed MIT */\n(function ($) {\n  $.fn.imageUploader = function (options) {\n    // Default settings\n    var defaults = {\n      preloaded: [],\n      imagesInputName: 'images',\n      preloadedInputName: 'preloaded',\n      label: 'Drag & Drop files here or click to browse'\n    }; // Get instance\n\n    var plugin = this; // Set empty settings\n\n    plugin.settings = {}; // Plugin constructor\n\n    plugin.init = function () {\n      // Define settings\n      plugin.settings = $.extend(plugin.settings, defaults, options); // Run through the elements\n\n      plugin.each(function (i, wrapper) {\n        // Create the container\n        var $container = createContainer(); // Append the container to the wrapper\n\n        $(wrapper).append($container); // Set some bindings\n\n        $container.on(\"dragover\", fileDragHover.bind($container));\n        $container.on(\"dragleave\", fileDragHover.bind($container));\n        $container.on(\"drop\", fileSelectHandler.bind($container)); // If there are preloaded images\n\n        if (plugin.settings.preloaded.length) {\n          // Change style\n          $container.addClass('has-files'); // Get the upload images container\n\n          var $uploadedContainer = $container.find('.uploaded'); // Set preloaded images preview\n\n          for (var _i = 0; _i < plugin.settings.preloaded.length; _i++) {\n            $uploadedContainer.append(createImg(plugin.settings.preloaded[_i].src, plugin.settings.preloaded[_i].id, true));\n          }\n        }\n      });\n    };\n\n    var dataTransfer = new DataTransfer();\n\n    var createContainer = function createContainer() {\n      // Create the image uploader container\n      var $container = $('<div>', {\n        \"class\": 'image-uploader'\n      }),\n          // Create the input type file and append it to the container\n      $input = $('<input>', {\n        type: 'file',\n        id: plugin.settings.imagesInputName + '-' + random(),\n        name: plugin.settings.imagesInputName + '[]',\n        multiple: ''\n      }).appendTo($container),\n          // Create the uploaded images container and append it to the container\n      $uploadedContainer = $('<div>', {\n        \"class\": 'uploaded'\n      }).appendTo($container),\n          // Create the text container and append it to the container\n      $textContainer = $('<div>', {\n        \"class\": 'upload-text'\n      }).appendTo($container),\n          // Create the icon and append it to the text container\n      $i = $('<i>', {\n        \"class\": 'material-icons',\n        text: 'cloud_upload'\n      }).appendTo($textContainer),\n          // Create the text and append it to the text container\n      $span = $('<span>', {\n        text: plugin.settings.label\n      }).appendTo($textContainer); // Listen to container click and trigger input file click\n\n      $container.on('click', function (e) {\n        // Prevent browser default event and stop propagation\n        prevent(e); // Trigger input click\n\n        $input.trigger('click');\n      }); // Stop propagation on input click\n\n      $input.on(\"click\", function (e) {\n        e.stopPropagation();\n      }); // Listen to input files changed\n\n      $input.on('change', fileSelectHandler.bind($container));\n      return $container;\n    };\n\n    var prevent = function prevent(e) {\n      // Prevent browser default event and stop propagation\n      e.preventDefault();\n      e.stopPropagation();\n    };\n\n    var createImg = function createImg(src, id) {\n      // Create the upladed image container\n      var $container = $('<div>', {\n        \"class\": 'uploaded-image'\n      }),\n          // Create the img tag\n      $img = $('<img>', {\n        src: src\n      }).appendTo($container),\n          // Create the delete button\n      $button = $('<button>', {\n        \"class\": 'delete-image'\n      }).appendTo($container),\n          // Create the delete icon\n      $i = $('<i>', {\n        \"class\": 'material-icons',\n        text: 'clear'\n      }).appendTo($button); // If the images are preloaded\n\n      if (plugin.settings.preloaded.length) {\n        // Set a identifier\n        $container.attr('data-preloaded', true); // Create the preloaded input and append it to the container\n\n        var $preloaded = $('<input>', {\n          type: 'hidden',\n          name: plugin.settings.preloadedInputName + '[]',\n          value: id\n        }).appendTo($container);\n      } else {\n        // Set the identifier\n        $container.attr('data-index', id);\n      } // Stop propagation on click\n\n\n      $container.on(\"click\", function (e) {\n        // Prevent browser default event and stop propagation\n        prevent(e);\n      }); // Set delete action\n\n      $button.on(\"click\", function (e) {\n        // Prevent browser default event and stop propagation\n        prevent(e); // If is not a preloaded image\n\n        if ($container.data('index')) {\n          // Get the image index\n          var index = parseInt($container.data('index')); // Update other indexes\n\n          $container.find('.uploaded-image[data-index]').each(function (i, cont) {\n            if (i > index) {\n              $(cont).attr('data-index', i - 1);\n            }\n          }); // Remove the file from input\n\n          dataTransfer.items.remove(index);\n        } // Remove this image from the container\n\n\n        $container.remove(); // If there is no more uploaded files\n\n        if (!$container.find('.uploaded-image').length) {\n          // Remove the 'has-files' class\n          $container.removeClass('has-files');\n        }\n      });\n      return $container;\n    };\n\n    var fileDragHover = function fileDragHover(e) {\n      // Prevent browser default event and stop propagation\n      prevent(e); // Change the container style\n\n      if (e.type === \"dragover\") {\n        $(this).addClass('drag-over');\n      } else {\n        $(this).removeClass('drag-over');\n      }\n    };\n\n    var fileSelectHandler = function fileSelectHandler(e) {\n      // Prevent browser default event and stop propagation\n      prevent(e); // Get the jQuery element instance\n\n      var $container = $(this); // Change the container style\n\n      $container.removeClass('drag-over'); // Get the files\n\n      var files = e.target.files || e.originalEvent.dataTransfer.files; // Makes the upload\n\n      setPreview($container, files);\n    };\n\n    var setPreview = function setPreview($container, files) {\n      // Add the 'has-files' class\n      $container.addClass('has-files'); // Get the upload images container\n\n      var $uploadedContainer = $container.find('.uploaded'),\n          // Get the files input\n      $input = $container.find('input[type=\"file\"]'); // Run through the files\n\n      $(files).each(function (i, file) {\n        // Add it to data transfer\n        dataTransfer.items.add(file); // Set preview\n\n        $uploadedContainer.append(createImg(URL.createObjectURL(file), dataTransfer.items.length - 1));\n      }); // Update input files\n\n      $input.prop('files', dataTransfer.files);\n    }; // Generate a random id\n\n\n    var random = function random() {\n      return Date.now() + Math.floor(Math.random() * 100 + 1);\n    };\n\n    this.init(); // Return the instance\n\n    return this;\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/ultima/image-uploader.js\n");

/***/ }),

/***/ 160:
/*!********************************************************************!*\
  !*** multi ./resources/metronic/js/pages/ultima/image-uploader.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\laragon\www\simpel-taiwan\resources\metronic\js\pages\ultima\image-uploader.js */"./resources/metronic/js/pages/ultima/image-uploader.js");


/***/ })

/******/ });