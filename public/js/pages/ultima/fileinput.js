/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 159);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/ultima/fileinput.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/pages/ultima/fileinput.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n * bootstrap-fileinput v5.2.2\r\n * http://plugins.krajee.com/file-input\r\n *\r\n * Author: Kartik Visweswaran\r\n * Copyright: 2014 - 2021, Kartik Visweswaran, Krajee.com\r\n *\r\n * Licensed under the BSD-3-Clause\r\n * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md\r\n */\n// (function (factory) {\n//     'use strict';\n//     if (typeof define === 'function' && define.amd) {\n//         define(['jquery'], factory);\n//     } else {\n//         if (typeof module === 'object' && module.exports) {\n//             //noinspection NpmUsedModulesInstalled\n//             module.exports = factory(require('jquery'));\n//         } else {\n//             factory(window.jQuery);\n//         }\n//     }\n// }\n(function ($) {\n  'use strict';\n\n  $.fn.fileinputLocales = {};\n  $.fn.fileinputThemes = {};\n\n  if (!$.fn.fileinputBsVersion) {\n    $.fn.fileinputBsVersion = window.Alert && window.Alert.VERSION || window.bootstrap && window.bootstrap.Alert && bootstrap.Alert.VERSION || '3.x.x';\n  }\n\n  String.prototype.setTokens = function (replacePairs) {\n    var str = this.toString(),\n        key,\n        re;\n\n    for (key in replacePairs) {\n      if (replacePairs.hasOwnProperty(key)) {\n        re = new RegExp('\\{' + key + '\\}', 'g');\n        str = str.replace(re, replacePairs[key]);\n      }\n    }\n\n    return str;\n  };\n\n  if (!Array.prototype.flatMap) {\n    // polyfill flatMap\n    Array.prototype.flatMap = function (lambda) {\n      return [].concat(this.map(lambda));\n    };\n  }\n\n  var $h, FileInput; // fileinput helper object for all global variables and internal helper methods\n\n  $h = {\n    FRAMES: '.kv-preview-thumb',\n    SORT_CSS: 'file-sortable',\n    INIT_FLAG: 'init-',\n    OBJECT_PARAMS: '<param name=\"controller\" value=\"true\" />\\n' + '<param name=\"allowFullScreen\" value=\"true\" />\\n' + '<param name=\"allowScriptAccess\" value=\"always\" />\\n' + '<param name=\"autoPlay\" value=\"false\" />\\n' + '<param name=\"autoStart\" value=\"false\" />\\n' + '<param name=\"quality\" value=\"high\" />\\n',\n    DEFAULT_PREVIEW: '<div class=\"file-preview-other\">\\n' + '<span class=\"{previewFileIconClass}\">{previewFileIcon}</span>\\n' + '</div>',\n    MODAL_ID: 'kvFileinputModal',\n    MODAL_EVENTS: ['show', 'shown', 'hide', 'hidden', 'loaded'],\n    logMessages: {\n      ajaxError: '{status}: {error}. Error Details: {text}.',\n      badDroppedFiles: 'Error scanning dropped files!',\n      badExifParser: 'Error loading the piexif.js library. {details}',\n      badInputType: 'The input \"type\" must be set to \"file\" for initializing the \"bootstrap-fileinput\" plugin.',\n      exifWarning: 'To avoid this warning, either set \"autoOrientImage\" to \"false\" OR ensure you have loaded ' + 'the \"piexif.js\" library correctly on your page before the \"fileinput.js\" script.',\n      invalidChunkSize: 'Invalid upload chunk size: \"{chunkSize}\". Resumable uploads are disabled.',\n      invalidThumb: 'Invalid thumb frame with id: \"{id}\".',\n      noResumableSupport: 'The browser does not support resumable or chunk uploads.',\n      noUploadUrl: 'The \"uploadUrl\" is not set. Ajax uploads and resumable uploads have been disabled.',\n      retryStatus: 'Retrying upload for chunk # {chunk} for {filename}... retry # {retry}.',\n      chunkQueueError: 'Could not push task to ajax pool for chunk index # {index}.',\n      resumableMaxRetriesReached: 'Maximum resumable ajax retries ({n}) reached.',\n      resumableRetryError: 'Could not retry the resumable request (try # {n})... aborting.',\n      resumableAborting: 'Aborting / cancelling the resumable request.',\n      resumableRequestError: 'Error processing resumable request. {msg}'\n    },\n    objUrl: window.URL || window.webkitURL,\n    isBs: function isBs(ver) {\n      var chk = $.trim(($.fn.fileinputBsVersion || '') + '');\n      ver = parseInt(ver, 10);\n\n      if (!chk) {\n        return ver === 4;\n      }\n\n      return ver === parseInt(chk.charAt(0), 10);\n    },\n    defaultButtonCss: function defaultButtonCss(fill) {\n      return 'btn-default btn-' + (fill ? '' : 'outline-') + 'secondary';\n    },\n    now: function now() {\n      return new Date().getTime();\n    },\n    round: function round(num) {\n      num = parseFloat(num);\n      return isNaN(num) ? 0 : Math.floor(Math.round(num));\n    },\n    getArray: function getArray(obj) {\n      var i,\n          arr = [],\n          len = obj && obj.length || 0;\n\n      for (i = 0; i < len; i++) {\n        arr.push(obj[i]);\n      }\n\n      return arr;\n    },\n    getFileRelativePath: function getFileRelativePath(file) {\n      /** @namespace file.relativePath */\n\n      /** @namespace file.webkitRelativePath */\n      return String(file.newPath || file.relativePath || file.webkitRelativePath || $h.getFileName(file) || null);\n    },\n    getFileId: function getFileId(file, generateFileId) {\n      var relativePath = $h.getFileRelativePath(file);\n\n      if (typeof generateFileId === 'function') {\n        return generateFileId(file);\n      }\n\n      if (!file) {\n        return null;\n      }\n\n      if (!relativePath) {\n        return null;\n      }\n\n      return file.size + '_' + encodeURIComponent(relativePath).replace(/%/g, '_');\n    },\n    getFrameSelector: function getFrameSelector(id, selector) {\n      selector = selector || '';\n      return '[id=\"' + id + '\"]' + selector;\n    },\n    getZoomSelector: function getZoomSelector(id, selector) {\n      return $h.getFrameSelector('zoom-' + id, selector);\n    },\n    getFrameElement: function getFrameElement($element, id, selector) {\n      return $element.find($h.getFrameSelector(id, selector));\n    },\n    getZoomElement: function getZoomElement($element, id, selector) {\n      return $element.find($h.getZoomSelector(id, selector));\n    },\n    getElapsed: function getElapsed(seconds) {\n      var delta = seconds,\n          out = '',\n          result = {},\n          structure = {\n        year: 31536000,\n        month: 2592000,\n        week: 604800,\n        // uncomment row to ignore\n        day: 86400,\n        // feel free to add your own row\n        hour: 3600,\n        minute: 60,\n        second: 1\n      };\n      $h.getObjectKeys(structure).forEach(function (key) {\n        result[key] = Math.floor(delta / structure[key]);\n        delta -= result[key] * structure[key];\n      });\n      $.each(result, function (key, value) {\n        if (value > 0) {\n          out += (out ? ' ' : '') + value + key.substring(0, 1);\n        }\n      });\n      return out;\n    },\n    debounce: function debounce(func, delay) {\n      var inDebounce;\n      return function () {\n        var args = arguments,\n            context = this;\n        clearTimeout(inDebounce);\n        inDebounce = setTimeout(function () {\n          func.apply(context, args);\n        }, delay);\n      };\n    },\n    stopEvent: function stopEvent(e) {\n      e.stopPropagation();\n      e.preventDefault();\n    },\n    getFileName: function getFileName(file) {\n      /** @namespace file.fileName */\n      return file ? file.fileName || file.name || '' : ''; // some confusion in different versions of Firefox\n    },\n    createObjectURL: function createObjectURL(data) {\n      if ($h.objUrl && $h.objUrl.createObjectURL && data) {\n        return $h.objUrl.createObjectURL(data);\n      }\n\n      return '';\n    },\n    revokeObjectURL: function revokeObjectURL(data) {\n      if ($h.objUrl && $h.objUrl.revokeObjectURL && data) {\n        $h.objUrl.revokeObjectURL(data);\n      }\n    },\n    compare: function compare(input, str, exact) {\n      return input !== undefined && (exact ? input === str : input.match(str));\n    },\n    isIE: function isIE(ver) {\n      var div, status; // check for IE versions < 11\n\n      if (navigator.appName !== 'Microsoft Internet Explorer') {\n        return false;\n      }\n\n      if (ver === 10) {\n        return new RegExp('msie\\\\s' + ver, 'i').test(navigator.userAgent);\n      }\n\n      div = document.createElement('div');\n      div.innerHTML = '<!--[if IE ' + ver + ']> <i></i> <![endif]-->';\n      status = div.getElementsByTagName('i').length;\n      document.body.appendChild(div);\n      div.parentNode.removeChild(div);\n      return status;\n    },\n    canOrientImage: function canOrientImage($el) {\n      var $img = $(document.createElement('img')).css({\n        width: '1px',\n        height: '1px'\n      }).insertAfter($el),\n          flag = $img.css('image-orientation');\n      $img.remove();\n      return !!flag;\n    },\n    canAssignFilesToInput: function canAssignFilesToInput() {\n      var input = document.createElement('input');\n\n      try {\n        input.type = 'file';\n        input.files = null;\n        return true;\n      } catch (err) {\n        return false;\n      }\n    },\n    getDragDropFolders: function getDragDropFolders(items) {\n      var i,\n          item,\n          len = items ? items.length : 0,\n          folders = 0;\n\n      if (len > 0 && items[0].webkitGetAsEntry()) {\n        for (i = 0; i < len; i++) {\n          item = items[i].webkitGetAsEntry();\n\n          if (item && item.isDirectory) {\n            folders++;\n          }\n        }\n      }\n\n      return folders;\n    },\n    initModal: function initModal($modal) {\n      var $body = $('body');\n\n      if ($body.length) {\n        $modal.appendTo($body);\n      }\n    },\n    isFunction: function isFunction(v) {\n      return typeof v === 'function';\n    },\n    isEmpty: function isEmpty(value, trim) {\n      if (value === undefined || value === null || value === '') {\n        return true;\n      }\n\n      if ($h.isString(value) && trim) {\n        return $.trim(value) === '';\n      }\n\n      if ($h.isArray(value)) {\n        return value.length === 0;\n      }\n\n      if ($.isPlainObject(value) && $.isEmptyObject(value)) {\n        return true;\n      }\n\n      return false;\n    },\n    isArray: function isArray(a) {\n      return Array.isArray(a) || Object.prototype.toString.call(a) === '[object Array]';\n    },\n    isString: function isString(a) {\n      return Object.prototype.toString.call(a) === '[object String]';\n    },\n    ifSet: function ifSet(needle, haystack, def) {\n      def = def || '';\n      return haystack && _typeof(haystack) === 'object' && needle in haystack ? haystack[needle] : def;\n    },\n    cleanArray: function cleanArray(arr) {\n      if (!(arr instanceof Array)) {\n        arr = [];\n      }\n\n      return arr.filter(function (e) {\n        return e !== undefined && e !== null;\n      });\n    },\n    spliceArray: function spliceArray(arr, index, reverseOrder) {\n      var i,\n          j = 0,\n          out = [],\n          newArr;\n\n      if (!(arr instanceof Array)) {\n        return [];\n      }\n\n      newArr = $.extend(true, [], arr);\n\n      if (reverseOrder) {\n        newArr.reverse();\n      }\n\n      for (i = 0; i < newArr.length; i++) {\n        if (i !== index) {\n          out[j] = newArr[i];\n          j++;\n        }\n      }\n\n      if (reverseOrder) {\n        out.reverse();\n      }\n\n      return out;\n    },\n    getNum: function getNum(num, def) {\n      def = def || 0;\n\n      if (typeof num === 'number') {\n        return num;\n      }\n\n      if (typeof num === 'string') {\n        num = parseFloat(num);\n      }\n\n      return isNaN(num) ? def : num;\n    },\n    hasFileAPISupport: function hasFileAPISupport() {\n      return !!(window.File && window.FileReader);\n    },\n    hasDragDropSupport: function hasDragDropSupport() {\n      var div = document.createElement('div');\n      /** @namespace div.draggable */\n\n      /** @namespace div.ondragstart */\n\n      /** @namespace div.ondrop */\n\n      return !$h.isIE(9) && (div.draggable !== undefined || div.ondragstart !== undefined && div.ondrop !== undefined);\n    },\n    hasFileUploadSupport: function hasFileUploadSupport() {\n      return $h.hasFileAPISupport() && window.FormData;\n    },\n    hasBlobSupport: function hasBlobSupport() {\n      try {\n        return !!window.Blob && Boolean(new Blob());\n      } catch (e) {\n        return false;\n      }\n    },\n    hasArrayBufferViewSupport: function hasArrayBufferViewSupport() {\n      try {\n        return new Blob([new Uint8Array(100)]).size === 100;\n      } catch (e) {\n        return false;\n      }\n    },\n    hasResumableUploadSupport: function hasResumableUploadSupport() {\n      /** @namespace Blob.prototype.webkitSlice */\n\n      /** @namespace Blob.prototype.mozSlice */\n      return $h.hasFileUploadSupport() && $h.hasBlobSupport() && $h.hasArrayBufferViewSupport() && (!!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || !!Blob.prototype.slice || false);\n    },\n    dataURI2Blob: function dataURI2Blob(dataURI) {\n      var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder,\n          canBlob = $h.hasBlobSupport(),\n          byteStr,\n          arrayBuffer,\n          intArray,\n          i,\n          mimeStr,\n          bb,\n          canProceed = (canBlob || BlobBuilder) && window.atob && window.ArrayBuffer && window.Uint8Array;\n\n      if (!canProceed) {\n        return null;\n      }\n\n      if (dataURI.split(',')[0].indexOf('base64') >= 0) {\n        byteStr = atob(dataURI.split(',')[1]);\n      } else {\n        byteStr = decodeURIComponent(dataURI.split(',')[1]);\n      }\n\n      arrayBuffer = new ArrayBuffer(byteStr.length);\n      intArray = new Uint8Array(arrayBuffer);\n\n      for (i = 0; i < byteStr.length; i += 1) {\n        intArray[i] = byteStr.charCodeAt(i);\n      }\n\n      mimeStr = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n      if (canBlob) {\n        return new Blob([$h.hasArrayBufferViewSupport() ? intArray : arrayBuffer], {\n          type: mimeStr\n        });\n      }\n\n      bb = new BlobBuilder();\n      bb.append(arrayBuffer);\n      return bb.getBlob(mimeStr);\n    },\n    arrayBuffer2String: function arrayBuffer2String(buffer) {\n      if (window.TextDecoder) {\n        return new TextDecoder('utf-8').decode(buffer);\n      }\n\n      var array = Array.prototype.slice.apply(new Uint8Array(buffer)),\n          out = '',\n          i = 0,\n          len,\n          c,\n          char2,\n          char3;\n      len = array.length;\n\n      while (i < len) {\n        c = array[i++];\n\n        switch (c >> 4) {\n          // jshint ignore:line\n          case 0:\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n            // 0xxxxxxx\n            out += String.fromCharCode(c);\n            break;\n\n          case 12:\n          case 13:\n            // 110x xxxx   10xx xxxx\n            char2 = array[i++];\n            out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F); // jshint ignore:line\n\n            break;\n\n          case 14:\n            // 1110 xxxx  10xx xxxx  10xx xxxx\n            char2 = array[i++];\n            char3 = array[i++];\n            out += String.fromCharCode((c & 0x0F) << 12 | // jshint ignore:line\n            (char2 & 0x3F) << 6 | // jshint ignore:line\n            (char3 & 0x3F) << 0); // jshint ignore:line\n\n            break;\n        }\n      }\n\n      return out;\n    },\n    isHtml: function isHtml(str) {\n      var a = document.createElement('div');\n      a.innerHTML = str;\n\n      for (var c = a.childNodes, i = c.length; i--;) {\n        if (c[i].nodeType === 1) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    isSvg: function isSvg(str) {\n      return str.match(/^\\s*<\\?xml/i) && (str.match(/<!DOCTYPE svg/i) || str.match(/<svg/i));\n    },\n    getMimeType: function getMimeType(signature, contents, type) {\n      switch (signature) {\n        case 'ffd8ffe0':\n        case 'ffd8ffe1':\n        case 'ffd8ffe2':\n          return 'image/jpeg';\n\n        case '89504e47':\n          return 'image/png';\n\n        case '47494638':\n          return 'image/gif';\n\n        case '49492a00':\n          return 'image/tiff';\n\n        case '52494646':\n          return 'image/webp';\n\n        case '66747970':\n          return 'video/3gp';\n\n        case '4f676753':\n          return 'video/ogg';\n\n        case '1a45dfa3':\n          return 'video/mkv';\n\n        case '000001ba':\n        case '000001b3':\n          return 'video/mpeg';\n\n        case '3026b275':\n          return 'video/wmv';\n\n        case '25504446':\n          return 'application/pdf';\n\n        case '25215053':\n          return 'application/ps';\n\n        case '504b0304':\n        case '504b0506':\n        case '504b0508':\n          return 'application/zip';\n\n        case '377abcaf':\n          return 'application/7z';\n\n        case '75737461':\n          return 'application/tar';\n\n        case '7801730d':\n          return 'application/dmg';\n\n        default:\n          switch (signature.substring(0, 6)) {\n            case '435753':\n              return 'application/x-shockwave-flash';\n\n            case '494433':\n              return 'audio/mp3';\n\n            case '425a68':\n              return 'application/bzip';\n\n            default:\n              switch (signature.substring(0, 4)) {\n                case '424d':\n                  return 'image/bmp';\n\n                case 'fffb':\n                  return 'audio/mp3';\n\n                case '4d5a':\n                  return 'application/exe';\n\n                case '1f9d':\n                case '1fa0':\n                  return 'application/zip';\n\n                case '1f8b':\n                  return 'application/gzip';\n\n                default:\n                  return contents && !contents.match(/[^\\u0000-\\u007f]/) ? 'application/text-plain' : type;\n              }\n\n          }\n\n      }\n    },\n    addCss: function addCss($el, css) {\n      $el.removeClass(css).addClass(css);\n    },\n    getElement: function getElement(options, param, value) {\n      return $h.isEmpty(options) || $h.isEmpty(options[param]) ? value : $(options[param]);\n    },\n    createElement: function createElement(str, tag) {\n      tag = tag || 'div';\n      return $($.parseHTML('<' + tag + '>' + str + '</' + tag + '>'));\n    },\n    uniqId: function uniqId() {\n      return (new Date().getTime() + Math.floor(Math.random() * Math.pow(10, 15))).toString(36);\n    },\n    cspBuffer: {\n      CSP_ATTRIB: 'data-csp-01928735',\n      // a randomly named temporary attribute to store the CSP elem id\n      domElementsStyles: {},\n      stash: function stash(htmlString) {\n        var self = this,\n            outerDom = $.parseHTML('<div>' + htmlString + '</div>'),\n            $el = $(outerDom);\n        $el.find('[style]').each(function (key, elem) {\n          var $elem = $(elem),\n              styleDeclaration = $elem[0].style,\n              id = $h.uniqId(),\n              styles = {};\n\n          if (styleDeclaration && styleDeclaration.length) {\n            $(styleDeclaration).each(function () {\n              styles[this] = styleDeclaration[this];\n            });\n            self.domElementsStyles[id] = styles;\n            $elem.removeAttr('style').attr(self.CSP_ATTRIB, id);\n          }\n        });\n        $el.filter('*').removeAttr('style'); // make sure all style attr are removed\n\n        var values = Object.values ? Object.values(outerDom) : Object.keys(outerDom).map(function (itm) {\n          return outerDom[itm];\n        });\n        return values.flatMap(function (elem) {\n          return elem.innerHTML;\n        }).join('');\n      },\n      apply: function apply(domElement) {\n        var self = this,\n            $el = $(domElement);\n        $el.find('[' + self.CSP_ATTRIB + ']').each(function (key, elem) {\n          var $elem = $(elem),\n              id = $elem.attr(self.CSP_ATTRIB),\n              styles = self.domElementsStyles[id];\n\n          if (styles) {\n            $elem.css(styles);\n          }\n\n          $elem.removeAttr(self.CSP_ATTRIB);\n        });\n        self.domElementsStyles = {};\n      }\n    },\n    setHtml: function setHtml($elem, htmlString) {\n      var buf = $h.cspBuffer;\n      $elem.html(buf.stash(htmlString));\n      buf.apply($elem);\n      return $elem;\n    },\n    htmlEncode: function htmlEncode(str, undefVal) {\n      if (str === undefined) {\n        return undefVal || null;\n      }\n\n      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n    },\n    replaceTags: function replaceTags(str, tags) {\n      var out = str;\n\n      if (!tags) {\n        return out;\n      }\n\n      $.each(tags, function (key, value) {\n        if (typeof value === 'function') {\n          value = value();\n        }\n\n        out = out.split(key).join(value);\n      });\n      return out;\n    },\n    cleanMemory: function cleanMemory($thumb) {\n      var data = $thumb.is('img') ? $thumb.attr('src') : $thumb.find('source').attr('src');\n      $h.revokeObjectURL(data);\n    },\n    findFileName: function findFileName(filePath) {\n      var sepIndex = filePath.lastIndexOf('/');\n\n      if (sepIndex === -1) {\n        sepIndex = filePath.lastIndexOf('\\\\');\n      }\n\n      return filePath.split(filePath.substring(sepIndex, sepIndex + 1)).pop();\n    },\n    checkFullScreen: function checkFullScreen() {\n      return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;\n    },\n    toggleFullScreen: function toggleFullScreen(maximize) {\n      var doc = document,\n          de = doc.documentElement,\n          isFullScreen = $h.checkFullScreen();\n\n      if (de && maximize && !isFullScreen) {\n        if (de.requestFullscreen) {\n          de.requestFullscreen();\n        } else {\n          if (de.msRequestFullscreen) {\n            de.msRequestFullscreen();\n          } else {\n            if (de.mozRequestFullScreen) {\n              de.mozRequestFullScreen();\n            } else {\n              if (de.webkitRequestFullscreen) {\n                de.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n              }\n            }\n          }\n        }\n      } else {\n        if (isFullScreen) {\n          if (doc.exitFullscreen) {\n            doc.exitFullscreen();\n          } else {\n            if (doc.msExitFullscreen) {\n              doc.msExitFullscreen();\n            } else {\n              if (doc.mozCancelFullScreen) {\n                doc.mozCancelFullScreen();\n              } else {\n                if (doc.webkitExitFullscreen) {\n                  doc.webkitExitFullscreen();\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    moveArray: function moveArray(arr, oldIndex, newIndex, reverseOrder) {\n      var newArr = $.extend(true, [], arr);\n\n      if (reverseOrder) {\n        newArr.reverse();\n      }\n\n      if (newIndex >= newArr.length) {\n        var k = newIndex - newArr.length;\n\n        while (k-- + 1) {\n          newArr.push(undefined);\n        }\n      }\n\n      newArr.splice(newIndex, 0, newArr.splice(oldIndex, 1)[0]);\n\n      if (reverseOrder) {\n        newArr.reverse();\n      }\n\n      return newArr;\n    },\n    closeButton: function closeButton(css) {\n      css = ($h.isBs(5) ? 'btn-close' : 'close') + (css ? ' ' + css : '');\n      return '<button type=\"button\" class=\"' + css + '\" aria-label=\"Close\">\\n' + ($h.isBs(5) ? '' : '  <span aria-hidden=\"true\">&times;</span>\\n') + '</button>';\n    },\n    getRotation: function getRotation(value) {\n      switch (value) {\n        case 2:\n          return 'rotateY(180deg)';\n\n        case 3:\n          return 'rotate(180deg)';\n\n        case 4:\n          return 'rotate(180deg) rotateY(180deg)';\n\n        case 5:\n          return 'rotate(270deg) rotateY(180deg)';\n\n        case 6:\n          return 'rotate(90deg)';\n\n        case 7:\n          return 'rotate(90deg) rotateY(180deg)';\n\n        case 8:\n          return 'rotate(270deg)';\n\n        default:\n          return '';\n      }\n    },\n    setTransform: function setTransform(el, val) {\n      if (!el) {\n        return;\n      }\n\n      el.style.transform = val;\n      el.style.webkitTransform = val;\n      el.style['-moz-transform'] = val;\n      el.style['-ms-transform'] = val;\n      el.style['-o-transform'] = val;\n    },\n    getObjectKeys: function getObjectKeys(obj) {\n      var keys = [];\n\n      if (obj) {\n        $.each(obj, function (key) {\n          keys.push(key);\n        });\n      }\n\n      return keys;\n    },\n    getObjectSize: function getObjectSize(obj) {\n      return $h.getObjectKeys(obj).length;\n    },\n\n    /**\r\n     * Small dependency injection for the task manager\r\n     * https://gist.github.com/fearphage/4341799\r\n     */\n    whenAll: function whenAll(array) {\n      var s = [].slice,\n          resolveValues = arguments.length === 1 && $h.isArray(array) ? array : s.call(arguments),\n          deferred = $.Deferred(),\n          i,\n          failed = 0,\n          value,\n          length = resolveValues.length,\n          remaining = length,\n          rejectContexts,\n          rejectValues,\n          resolveContexts,\n          updateFunc;\n      rejectContexts = rejectValues = resolveContexts = Array(length);\n\n      updateFunc = function updateFunc(index, contexts, values) {\n        return function () {\n          if (values !== resolveValues) {\n            failed++;\n          }\n\n          deferred.notifyWith(contexts[index] = this, values[index] = s.call(arguments));\n\n          if (! --remaining) {\n            deferred[(!failed ? 'resolve' : 'reject') + 'With'](contexts, values);\n          }\n        };\n      };\n\n      for (i = 0; i < length; i++) {\n        if ((value = resolveValues[i]) && $.isFunction(value.promise)) {\n          value.promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(updateFunc(i, rejectContexts, rejectValues));\n        } else {\n          deferred.notifyWith(this, value);\n          --remaining;\n        }\n      }\n\n      if (!remaining) {\n        deferred.resolveWith(resolveContexts, resolveValues);\n      }\n\n      return deferred.promise();\n    }\n  };\n\n  FileInput = function FileInput(element, options) {\n    var self = this;\n    self.$element = $(element);\n    self.$parent = self.$element.parent();\n\n    if (!self._validate()) {\n      return;\n    }\n\n    self.isPreviewable = $h.hasFileAPISupport();\n    self.isIE9 = $h.isIE(9);\n    self.isIE10 = $h.isIE(10);\n\n    if (self.isPreviewable || self.isIE9) {\n      self._init(options);\n\n      self._listen();\n    }\n\n    self.$element.removeClass('file-loading');\n  };\n\n  FileInput.prototype = {\n    constructor: FileInput,\n    _cleanup: function _cleanup() {\n      var self = this;\n      self.reader = null;\n      self.clearFileStack();\n      self.fileBatchCompleted = true;\n      self.isError = false;\n      self.isDuplicateError = false;\n      self.isPersistentError = false;\n      self.cancelling = false;\n      self.paused = false;\n      self.lastProgress = 0;\n\n      self._initAjax();\n    },\n    _isAborted: function _isAborted() {\n      var self = this;\n      return self.cancelling || self.paused;\n    },\n    _initAjax: function _initAjax() {\n      var self = this,\n          tm = self.taskManager = {\n        pool: {},\n        addPool: function addPool(id) {\n          return tm.pool[id] = new tm.TasksPool(id);\n        },\n        getPool: function getPool(id) {\n          return tm.pool[id];\n        },\n        addTask: function addTask(id, logic) {\n          // add standalone task directly from task manager\n          return new tm.Task(id, logic);\n        },\n        TasksPool: function TasksPool(id) {\n          var tp = this;\n          tp.id = id;\n          tp.cancelled = false;\n          tp.cancelledDeferrer = $.Deferred();\n          tp.tasks = {};\n\n          tp.addTask = function (id, logic) {\n            return tp.tasks[id] = new tm.Task(id, logic);\n          };\n\n          tp.size = function () {\n            return $h.getObjectSize(tp.tasks);\n          };\n\n          tp.run = function (maxThreads) {\n            var i = 0,\n                failed = false,\n                task,\n                tasksList = $h.getObjectKeys(tp.tasks).map(function (key) {\n              return tp.tasks[key];\n            }),\n                tasksDone = [],\n                deferred = $.Deferred(),\n                enqueue,\n                callback;\n\n            if (tp.cancelled) {\n              tp.cancelledDeferrer.resolve();\n              return deferred.reject();\n            } // if run all at once\n\n\n            if (!maxThreads) {\n              var tasksDeferredList = $h.getObjectKeys(tp.tasks).map(function (key) {\n                return tp.tasks[key].deferred;\n              }); // when all are done\n\n              $h.whenAll(tasksDeferredList).done(function () {\n                var argv = $h.getArray(arguments);\n\n                if (!tp.cancelled) {\n                  deferred.resolve.apply(null, argv);\n                  tp.cancelledDeferrer.reject();\n                } else {\n                  deferred.reject.apply(null, argv);\n                  tp.cancelledDeferrer.resolve();\n                }\n              }).fail(function () {\n                var argv = $h.getArray(arguments);\n                deferred.reject.apply(null, argv);\n\n                if (!tp.cancelled) {\n                  tp.cancelledDeferrer.reject();\n                } else {\n                  tp.cancelledDeferrer.resolve();\n                }\n              }); // run all tasks\n\n              $.each(tp.tasks, function (id) {\n                task = tp.tasks[id];\n                task.run();\n              });\n              return deferred;\n            }\n\n            enqueue = function enqueue(task) {\n              $.when(task.deferred).fail(function () {\n                failed = true;\n                callback.apply(null, arguments);\n              }).always(callback);\n            };\n\n            callback = function callback() {\n              var argv = $h.getArray(arguments); // notify a task just ended\n\n              deferred.notify(argv);\n              tasksDone.push(argv);\n\n              if (tp.cancelled) {\n                deferred.reject.apply(null, tasksDone);\n                tp.cancelledDeferrer.resolve();\n                return;\n              }\n\n              if (tasksDone.length === tp.size()) {\n                if (failed) {\n                  deferred.reject.apply(null, tasksDone);\n                } else {\n                  deferred.resolve.apply(null, tasksDone);\n                }\n              } // if there are any tasks remaining\n\n\n              if (tasksList.length) {\n                task = tasksList.shift();\n                enqueue(task);\n                task.run();\n              }\n            }; // run the first \"maxThreads\" tasks\n\n\n            while (tasksList.length && i++ < maxThreads) {\n              task = tasksList.shift();\n              enqueue(task);\n              task.run();\n            }\n\n            return deferred;\n          };\n\n          tp.cancel = function () {\n            tp.cancelled = true;\n            return tp.cancelledDeferrer;\n          };\n        },\n        Task: function Task(id, logic) {\n          var tk = this;\n          tk.id = id;\n          tk.deferred = $.Deferred();\n          tk.logic = logic;\n          tk.context = null;\n\n          tk.run = function () {\n            var argv = $h.getArray(arguments);\n            argv.unshift(tk.deferred); // add deferrer as first argument\n\n            logic.apply(tk.context, argv); // run task\n\n            return tk.deferred; // return deferrer\n          };\n\n          tk.runWithContext = function (context) {\n            tk.context = context;\n            return tk.run();\n          };\n        }\n      };\n      self.ajaxQueue = [];\n      self.ajaxRequests = [];\n      self.ajaxAborted = false;\n    },\n    _init: function _init(options, refreshMode) {\n      var self = this,\n          f,\n          $el = self.$element,\n          $cont,\n          t,\n          tmp;\n      self.options = options;\n      self.canOrientImage = $h.canOrientImage($el);\n      $.each(options, function (key, value) {\n        switch (key) {\n          case 'minFileCount':\n          case 'maxFileCount':\n          case 'maxTotalFileCount':\n          case 'minFileSize':\n          case 'maxFileSize':\n          case 'maxFilePreviewSize':\n          case 'resizeQuality':\n          case 'resizeIfSizeMoreThan':\n          case 'progressUploadThreshold':\n          case 'initialPreviewCount':\n          case 'zoomModalHeight':\n          case 'minImageHeight':\n          case 'maxImageHeight':\n          case 'minImageWidth':\n          case 'maxImageWidth':\n            self[key] = $h.getNum(value);\n            break;\n\n          default:\n            self[key] = value;\n            break;\n        }\n      });\n\n      if (self.errorCloseButton === undefined) {\n        self.errorCloseButton = $h.closeButton('kv-error-close' + ($h.isBs(5) ? '  float-end' : ''));\n      }\n\n      if (self.maxTotalFileCount > 0 && self.maxTotalFileCount < self.maxFileCount) {\n        self.maxTotalFileCount = self.maxFileCount;\n      }\n\n      if (self.rtl) {\n        // swap buttons for rtl\n        tmp = self.previewZoomButtonIcons.prev;\n        self.previewZoomButtonIcons.prev = self.previewZoomButtonIcons.next;\n        self.previewZoomButtonIcons.next = tmp;\n      } // validate chunk threads to not exceed maxAjaxThreads\n\n\n      if (!isNaN(self.maxAjaxThreads) && self.maxAjaxThreads < self.resumableUploadOptions.maxThreads) {\n        self.resumableUploadOptions.maxThreads = self.maxAjaxThreads;\n      }\n\n      self._initFileManager();\n\n      if (typeof self.autoOrientImage === 'function') {\n        self.autoOrientImage = self.autoOrientImage();\n      }\n\n      if (typeof self.autoOrientImageInitial === 'function') {\n        self.autoOrientImageInitial = self.autoOrientImageInitial();\n      }\n\n      if (!refreshMode) {\n        self._cleanup();\n      }\n\n      self.duplicateErrors = [];\n      self.$form = $el.closest('form');\n\n      self._initTemplateDefaults();\n\n      self.uploadFileAttr = !$h.isEmpty($el.attr('name')) ? $el.attr('name') : 'file_data';\n      t = self._getLayoutTemplate('progress');\n      self.progressTemplate = t.replace('{class}', self.progressClass);\n      self.progressInfoTemplate = t.replace('{class}', self.progressInfoClass);\n      self.progressPauseTemplate = t.replace('{class}', self.progressPauseClass);\n      self.progressCompleteTemplate = t.replace('{class}', self.progressCompleteClass);\n      self.progressErrorTemplate = t.replace('{class}', self.progressErrorClass);\n      self.isDisabled = $el.attr('disabled') || $el.attr('readonly');\n\n      if (self.isDisabled) {\n        $el.attr('disabled', true);\n      }\n\n      self.isClickable = self.browseOnZoneClick && self.showPreview && (self.dropZoneEnabled || !$h.isEmpty(self.defaultPreviewContent));\n      self.isAjaxUpload = $h.hasFileUploadSupport() && !$h.isEmpty(self.uploadUrl);\n      self.dropZoneEnabled = $h.hasDragDropSupport() && self.dropZoneEnabled;\n\n      if (!self.isAjaxUpload) {\n        self.dropZoneEnabled = self.dropZoneEnabled && $h.canAssignFilesToInput();\n      }\n\n      self.slug = typeof options.slugCallback === 'function' ? options.slugCallback : self._slugDefault;\n      self.mainTemplate = self.showCaption ? self._getLayoutTemplate('main1') : self._getLayoutTemplate('main2');\n      self.captionTemplate = self._getLayoutTemplate('caption');\n      self.previewGenericTemplate = self._getPreviewTemplate('generic');\n\n      if (!self.imageCanvas && self.resizeImage && (self.maxImageWidth || self.maxImageHeight)) {\n        self.imageCanvas = document.createElement('canvas');\n        self.imageCanvasContext = self.imageCanvas.getContext('2d');\n      }\n\n      if ($h.isEmpty($el.attr('id'))) {\n        $el.attr('id', $h.uniqId());\n      }\n\n      self.namespace = '.fileinput_' + $el.attr('id').replace(/-/g, '_');\n\n      if (self.$container === undefined) {\n        self.$container = self._createContainer();\n      } else {\n        self._refreshContainer();\n      }\n\n      $cont = self.$container;\n      self.$dropZone = $cont.find('.file-drop-zone');\n      self.$progress = $cont.find('.kv-upload-progress');\n      self.$btnUpload = $cont.find('.fileinput-upload');\n      self.$captionContainer = $h.getElement(options, 'elCaptionContainer', $cont.find('.file-caption'));\n      self.$caption = $h.getElement(options, 'elCaptionText', $cont.find('.file-caption-name'));\n\n      if (!$h.isEmpty(self.msgPlaceholder)) {\n        f = $el.attr('multiple') ? self.filePlural : self.fileSingle;\n        self.$caption.attr('placeholder', self.msgPlaceholder.replace('{files}', f));\n      }\n\n      self.$captionIcon = self.$captionContainer.find('.file-caption-icon');\n      self.$previewContainer = $h.getElement(options, 'elPreviewContainer', $cont.find('.file-preview'));\n      self.$preview = $h.getElement(options, 'elPreviewImage', $cont.find('.file-preview-thumbnails'));\n      self.$previewStatus = $h.getElement(options, 'elPreviewStatus', $cont.find('.file-preview-status'));\n      self.$errorContainer = $h.getElement(options, 'elErrorContainer', self.$previewContainer.find('.kv-fileinput-error'));\n\n      self._validateDisabled();\n\n      if (!$h.isEmpty(self.msgErrorClass)) {\n        $h.addCss(self.$errorContainer, self.msgErrorClass);\n      }\n\n      if (!refreshMode) {\n        self._resetErrors();\n\n        self.$errorContainer.hide();\n        self.previewInitId = 'thumb-' + $el.attr('id');\n\n        self._initPreviewCache();\n\n        self._initPreview(true);\n\n        self._initPreviewActions();\n\n        if (self.$parent.hasClass('file-loading')) {\n          self.$container.insertBefore(self.$parent);\n          self.$parent.remove();\n        }\n      } else {\n        if (!self._errorsExist()) {\n          self.$errorContainer.hide();\n        }\n      }\n\n      self._setFileDropZoneTitle();\n\n      if ($el.attr('disabled')) {\n        self.disable();\n      }\n\n      self._initZoom();\n\n      if (self.hideThumbnailContent) {\n        $h.addCss(self.$preview, 'hide-content');\n      }\n    },\n    _initFileManager: function _initFileManager() {\n      var self = this;\n      self.uploadStartTime = $h.now();\n      self.fileManager = {\n        stack: {},\n        filesProcessed: [],\n        errors: [],\n        loadedImages: {},\n        totalImages: 0,\n        totalFiles: null,\n        totalSize: null,\n        uploadedSize: 0,\n        stats: {},\n        bpsLog: [],\n        bps: 0,\n        initStats: function initStats(id) {\n          var data = {\n            started: $h.now()\n          };\n\n          if (id) {\n            self.fileManager.stats[id] = data;\n          } else {\n            self.fileManager.stats = data;\n          }\n        },\n        getUploadStats: function getUploadStats(id, loaded, total) {\n          var fm = self.fileManager,\n              started = id ? fm.stats[id] && fm.stats[id].started || $h.now() : self.uploadStartTime,\n              elapsed = ($h.now() - started) / 1000,\n              speeds = ['B/s', 'KB/s', 'MB/s', 'GB/s', 'TB/s', 'PB/s', 'EB/s', 'ZB/s', 'YB/s'],\n              bps = Math.ceil(elapsed ? loaded / elapsed : 0),\n              pendingBytes = total - loaded,\n              out,\n              delay = fm.bpsLog.length ? self.bitrateUpdateDelay : 0;\n          setTimeout(function () {\n            var i,\n                j = 0,\n                n = 0,\n                len,\n                beg;\n            fm.bpsLog.push(bps);\n            fm.bpsLog.sort(function (a, b) {\n              return a - b;\n            });\n            len = fm.bpsLog.length;\n            beg = len > 10 ? len - 10 : Math.ceil(len / 2);\n\n            for (i = len; i > beg; i--) {\n              n = parseFloat(fm.bpsLog[i]);\n              j++;\n            }\n\n            fm.bps = (j > 0 ? n / j : 0) * 64;\n          }, delay);\n          out = {\n            fileId: id,\n            started: started,\n            elapsed: elapsed,\n            loaded: loaded,\n            total: total,\n            bps: fm.bps,\n            bitrate: self._getSize(fm.bps, speeds),\n            pendingBytes: pendingBytes\n          };\n\n          if (id) {\n            fm.stats[id] = out;\n          } else {\n            fm.stats = out;\n          }\n\n          return out;\n        },\n        exists: function exists(id) {\n          return $.inArray(id, self.fileManager.getIdList()) !== -1;\n        },\n        count: function count() {\n          return self.fileManager.getIdList().length;\n        },\n        total: function total() {\n          var fm = self.fileManager;\n\n          if (!fm.totalFiles) {\n            fm.totalFiles = fm.count();\n          }\n\n          return fm.totalFiles;\n        },\n        getTotalSize: function getTotalSize() {\n          var fm = self.fileManager;\n\n          if (fm.totalSize) {\n            return fm.totalSize;\n          }\n\n          fm.totalSize = 0;\n          $.each(self.getFileStack(), function (id, f) {\n            var size = parseFloat(f.size);\n            fm.totalSize += isNaN(size) ? 0 : size;\n          });\n          return fm.totalSize;\n        },\n        add: function add(file, id) {\n          if (!id) {\n            id = self.fileManager.getId(file);\n          }\n\n          if (!id) {\n            return;\n          }\n\n          self.fileManager.stack[id] = {\n            file: file,\n            name: $h.getFileName(file),\n            relativePath: $h.getFileRelativePath(file),\n            size: file.size,\n            nameFmt: self._getFileName(file, ''),\n            sizeFmt: self._getSize(file.size)\n          };\n        },\n        remove: function remove($thumb) {\n          var id = self._getThumbFileId($thumb);\n\n          self.fileManager.removeFile(id);\n        },\n        removeFile: function removeFile(id) {\n          var fm = self.fileManager;\n\n          if (!id) {\n            return;\n          }\n\n          delete fm.stack[id];\n          delete fm.loadedImages[id];\n        },\n        move: function move(idFrom, idTo) {\n          var result = {},\n              stack = self.fileManager.stack;\n\n          if (!idFrom && !idTo || idFrom === idTo) {\n            return;\n          }\n\n          $.each(stack, function (k, v) {\n            if (k !== idFrom) {\n              result[k] = v;\n            }\n\n            if (k === idTo) {\n              result[idFrom] = stack[idFrom];\n            }\n          });\n          self.fileManager.stack = result;\n        },\n        list: function list() {\n          var files = [];\n          $.each(self.getFileStack(), function (k, v) {\n            if (v && v.file) {\n              files.push(v.file);\n            }\n          });\n          return files;\n        },\n        isPending: function isPending(id) {\n          return $.inArray(id, self.fileManager.filesProcessed) === -1 && self.fileManager.exists(id);\n        },\n        isProcessed: function isProcessed() {\n          var filesProcessed = true,\n              fm = self.fileManager;\n          $.each(self.getFileStack(), function (id) {\n            if (fm.isPending(id)) {\n              filesProcessed = false;\n            }\n          });\n          return filesProcessed;\n        },\n        clear: function clear() {\n          var fm = self.fileManager;\n          self.isDuplicateError = false;\n          self.isPersistentError = false;\n          fm.totalFiles = null;\n          fm.totalSize = null;\n          fm.uploadedSize = 0;\n          fm.stack = {};\n          fm.errors = [];\n          fm.filesProcessed = [];\n          fm.stats = {};\n          fm.bpsLog = [];\n          fm.bps = 0;\n          fm.clearImages();\n        },\n        clearImages: function clearImages() {\n          self.fileManager.loadedImages = {};\n          self.fileManager.totalImages = 0;\n        },\n        addImage: function addImage(id, config) {\n          self.fileManager.loadedImages[id] = config;\n        },\n        removeImage: function removeImage(id) {\n          delete self.fileManager.loadedImages[id];\n        },\n        getImageIdList: function getImageIdList() {\n          return $h.getObjectKeys(self.fileManager.loadedImages);\n        },\n        getImageCount: function getImageCount() {\n          return self.fileManager.getImageIdList().length;\n        },\n        getId: function getId(file) {\n          return self._getFileId(file);\n        },\n        getIndex: function getIndex(id) {\n          return self.fileManager.getIdList().indexOf(id);\n        },\n        getThumb: function getThumb(id) {\n          var $thumb = null;\n\n          self._getThumbs().each(function () {\n            var $t = $(this);\n\n            if (self._getThumbFileId($t) === id) {\n              $thumb = $t;\n            }\n          });\n\n          return $thumb;\n        },\n        getThumbIndex: function getThumbIndex($thumb) {\n          var id = self._getThumbFileId($thumb);\n\n          return self.fileManager.getIndex(id);\n        },\n        getIdList: function getIdList() {\n          return $h.getObjectKeys(self.fileManager.stack);\n        },\n        getFile: function getFile(id) {\n          return self.fileManager.stack[id] || null;\n        },\n        getFileName: function getFileName(id, fmt) {\n          var file = self.fileManager.getFile(id);\n\n          if (!file) {\n            return '';\n          }\n\n          return fmt ? file.nameFmt || '' : file.name || '';\n        },\n        getFirstFile: function getFirstFile() {\n          var ids = self.fileManager.getIdList(),\n              id = ids && ids.length ? ids[0] : null;\n          return self.fileManager.getFile(id);\n        },\n        setFile: function setFile(id, file) {\n          if (self.fileManager.getFile(id)) {\n            self.fileManager.stack[id].file = file;\n          } else {\n            self.fileManager.add(file, id);\n          }\n        },\n        setProcessed: function setProcessed(id) {\n          self.fileManager.filesProcessed.push(id);\n        },\n        getProgress: function getProgress() {\n          var total = self.fileManager.total(),\n              filesProcessed = self.fileManager.filesProcessed.length;\n\n          if (!total) {\n            return 0;\n          }\n\n          return Math.ceil(filesProcessed / total * 100);\n        },\n        setProgress: function setProgress(id, pct) {\n          var f = self.fileManager.getFile(id);\n\n          if (!isNaN(pct) && f) {\n            f.progress = pct;\n          }\n        }\n      };\n    },\n    _setUploadData: function _setUploadData(fd, config) {\n      var self = this;\n      $.each(config, function (key, value) {\n        var param = self.uploadParamNames[key] || key;\n\n        if ($h.isArray(value)) {\n          fd.append(param, value[0], value[1]);\n        } else {\n          fd.append(param, value);\n        }\n      });\n    },\n    _initResumableUpload: function _initResumableUpload() {\n      var self = this,\n          opts = self.resumableUploadOptions,\n          logs = $h.logMessages,\n          rm,\n          fm = self.fileManager;\n\n      if (!self.enableResumableUpload) {\n        return;\n      }\n\n      if (opts.fallback !== false && typeof opts.fallback !== 'function') {\n        opts.fallback = function (s) {\n          s._log(logs.noResumableSupport);\n\n          s.enableResumableUpload = false;\n        };\n      }\n\n      if (!$h.hasResumableUploadSupport() && opts.fallback !== false) {\n        opts.fallback(self);\n        return;\n      }\n\n      if (!self.uploadUrl && self.enableResumableUpload) {\n        self._log(logs.noUploadUrl);\n\n        self.enableResumableUpload = false;\n        return;\n      }\n\n      opts.chunkSize = parseFloat(opts.chunkSize);\n\n      if (opts.chunkSize <= 0 || isNaN(opts.chunkSize)) {\n        self._log(logs.invalidChunkSize, {\n          chunkSize: opts.chunkSize\n        });\n\n        self.enableResumableUpload = false;\n        return;\n      }\n\n      rm = self.resumableManager = {\n        init: function init(id, f, index) {\n          rm.logs = [];\n          rm.stack = [];\n          rm.error = '';\n          rm.id = id;\n          rm.file = f.file;\n          rm.fileName = f.name;\n          rm.fileIndex = index;\n          rm.completed = false;\n          rm.lastProgress = 0;\n\n          if (self.showPreview) {\n            rm.$thumb = fm.getThumb(id) || null;\n            rm.$progress = rm.$btnDelete = null;\n\n            if (rm.$thumb && rm.$thumb.length) {\n              rm.$progress = rm.$thumb.find('.file-thumb-progress');\n              rm.$btnDelete = rm.$thumb.find('.kv-file-remove');\n            }\n          }\n\n          rm.chunkSize = opts.chunkSize * 1024;\n          rm.chunkCount = rm.getTotalChunks();\n        },\n        setAjaxError: function setAjaxError(jqXHR, textStatus, errorThrown, isTest) {\n          if (jqXHR.responseJSON && jqXHR.responseJSON.error) {\n            errorThrown = jqXHR.responseJSON.error.toString();\n          }\n\n          if (!isTest) {\n            rm.error = errorThrown;\n          }\n\n          if (opts.showErrorLog) {\n            self._log(logs.ajaxError, {\n              status: jqXHR.status,\n              error: errorThrown,\n              text: jqXHR.responseText || ''\n            });\n          }\n        },\n        reset: function reset() {\n          rm.stack = [];\n          rm.chunksProcessed = {};\n        },\n        setProcessed: function setProcessed(status) {\n          var id = rm.id,\n              msg,\n              $thumb = rm.$thumb,\n              $prog = rm.$progress,\n              hasThumb = $thumb && $thumb.length,\n              params = {\n            id: hasThumb ? $thumb.attr('id') : '',\n            index: fm.getIndex(id),\n            fileId: id\n          },\n              tokens,\n              skipErrorsAndProceed = self.resumableUploadOptions.skipErrorsAndProceed;\n          rm.completed = true;\n          rm.lastProgress = 0;\n\n          if (hasThumb) {\n            $thumb.removeClass('file-uploading');\n          }\n\n          if (status === 'success') {\n            fm.uploadedSize += rm.file.size;\n\n            if (self.showPreview) {\n              self._setProgress(101, $prog);\n\n              self._setThumbStatus($thumb, 'Success');\n\n              self._initUploadSuccess(rm.chunksProcessed[id].data, $thumb);\n            }\n\n            fm.removeFile(id);\n            delete rm.chunksProcessed[id];\n\n            self._raise('fileuploaded', [params.id, params.index, params.fileId]);\n\n            if (fm.isProcessed()) {\n              self._setProgress(101);\n            }\n          } else {\n            if (status !== 'cancel') {\n              if (self.showPreview) {\n                self._setThumbStatus($thumb, 'Error');\n\n                self._setPreviewError($thumb, true);\n\n                self._setProgress(101, $prog, self.msgProgressError);\n\n                self._setProgress(101, self.$progress, self.msgProgressError);\n\n                self.cancelling = !skipErrorsAndProceed;\n              }\n\n              if (!self.$errorContainer.find('li[data-file-id=\"' + params.fileId + '\"]').length) {\n                tokens = {\n                  file: rm.fileName,\n                  max: opts.maxRetries,\n                  error: rm.error\n                };\n                msg = self.msgResumableUploadRetriesExceeded.setTokens(tokens);\n                $.extend(params, tokens);\n\n                self._showFileError(msg, params, 'filemaxretries');\n\n                if (skipErrorsAndProceed) {\n                  fm.removeFile(id);\n                  delete rm.chunksProcessed[id];\n\n                  if (fm.isProcessed()) {\n                    self._setProgress(101);\n                  }\n                }\n              }\n            }\n          }\n\n          if (fm.isProcessed()) {\n            rm.reset();\n          }\n        },\n        check: function check() {\n          var status = true;\n          $.each(rm.logs, function (index, value) {\n            if (!value) {\n              status = false;\n              return false;\n            }\n          });\n        },\n        processedResumables: function processedResumables() {\n          var logs = rm.logs,\n              i,\n              count = 0;\n\n          if (!logs || !logs.length) {\n            return 0;\n          }\n\n          for (i = 0; i < logs.length; i++) {\n            if (logs[i] === true) {\n              count++;\n            }\n          }\n\n          return count;\n        },\n        getUploadedSize: function getUploadedSize() {\n          var size = rm.processedResumables() * rm.chunkSize;\n          return size > rm.file.size ? rm.file.size : size;\n        },\n        getTotalChunks: function getTotalChunks() {\n          var chunkSize = parseFloat(rm.chunkSize);\n\n          if (!isNaN(chunkSize) && chunkSize > 0) {\n            return Math.ceil(rm.file.size / chunkSize);\n          }\n\n          return 0;\n        },\n        getProgress: function getProgress() {\n          var chunksProcessed = rm.processedResumables(),\n              total = rm.chunkCount;\n\n          if (total === 0) {\n            return 0;\n          }\n\n          return Math.ceil(chunksProcessed / total * 100);\n        },\n        checkAborted: function checkAborted(intervalId) {\n          if (self._isAborted()) {\n            clearInterval(intervalId);\n            self.unlock();\n          }\n        },\n        upload: function upload() {\n          var ids = fm.getIdList(),\n              flag = 'new',\n              intervalId;\n          intervalId = setInterval(function () {\n            var id;\n            rm.checkAborted(intervalId);\n\n            if (flag === 'new') {\n              self.lock();\n              flag = 'processing';\n              id = ids.shift();\n              fm.initStats(id);\n\n              if (fm.stack[id]) {\n                rm.init(id, fm.stack[id], fm.getIndex(id));\n                rm.processUpload();\n              }\n            }\n\n            if (!fm.isPending(id) && rm.completed) {\n              flag = 'new';\n            }\n\n            if (fm.isProcessed()) {\n              var $initThumbs = self.$preview.find('.file-preview-initial');\n\n              if ($initThumbs.length) {\n                $h.addCss($initThumbs, $h.SORT_CSS);\n\n                self._initSortable();\n              }\n\n              clearInterval(intervalId);\n\n              self._clearFileInput();\n\n              self.unlock();\n              setTimeout(function () {\n                var data = self.previewCache.data;\n\n                if (data) {\n                  self.initialPreview = data.content;\n                  self.initialPreviewConfig = data.config;\n                  self.initialPreviewThumbTags = data.tags;\n                }\n\n                self._raise('filebatchuploadcomplete', [self.initialPreview, self.initialPreviewConfig, self.initialPreviewThumbTags, self._getExtraData()]);\n              }, self.processDelay);\n            }\n          }, self.processDelay);\n        },\n        uploadResumable: function uploadResumable() {\n          var i,\n              pool,\n              tm = self.taskManager,\n              total = rm.chunkCount;\n          pool = tm.addPool(rm.id);\n\n          for (i = 0; i < total; i++) {\n            rm.logs[i] = !!(rm.chunksProcessed[rm.id] && rm.chunksProcessed[rm.id][i]);\n\n            if (!rm.logs[i]) {\n              rm.pushAjax(i, 0);\n            }\n          }\n\n          pool.run(opts.maxThreads).done(function () {\n            rm.setProcessed('success');\n          }).fail(function () {\n            rm.setProcessed(pool.cancelled ? 'cancel' : 'error');\n          });\n        },\n        processUpload: function processUpload() {\n          var fd,\n              f,\n              id = rm.id,\n              fnBefore,\n              fnSuccess,\n              fnError,\n              fnComplete,\n              outData;\n\n          if (!opts.testUrl) {\n            rm.uploadResumable();\n            return;\n          }\n\n          fd = new FormData();\n          f = fm.stack[id];\n\n          self._setUploadData(fd, {\n            fileId: id,\n            fileName: f.fileName,\n            fileSize: f.size,\n            fileRelativePath: f.relativePath,\n            chunkSize: rm.chunkSize,\n            chunkCount: rm.chunkCount\n          });\n\n          fnBefore = function fnBefore(jqXHR) {\n            outData = self._getOutData(fd, jqXHR);\n\n            self._raise('filetestbeforesend', [id, fm, rm, outData]);\n          };\n\n          fnSuccess = function fnSuccess(data, textStatus, jqXHR) {\n            outData = self._getOutData(fd, jqXHR, data);\n            var pNames = self.uploadParamNames,\n                chunksUploaded = pNames.chunksUploaded || 'chunksUploaded',\n                params = [id, fm, rm, outData];\n\n            if (!data[chunksUploaded] || !$h.isArray(data[chunksUploaded])) {\n              self._raise('filetesterror', params);\n            } else {\n              if (!rm.chunksProcessed[id]) {\n                rm.chunksProcessed[id] = {};\n              }\n\n              $.each(data[chunksUploaded], function (key, index) {\n                rm.logs[index] = true;\n                rm.chunksProcessed[id][index] = true;\n              });\n              rm.chunksProcessed[id].data = data;\n\n              self._raise('filetestsuccess', params);\n            }\n\n            rm.uploadResumable();\n          };\n\n          fnError = function fnError(jqXHR, textStatus, errorThrown) {\n            outData = self._getOutData(fd, jqXHR);\n\n            self._raise('filetestajaxerror', [id, fm, rm, outData]);\n\n            rm.setAjaxError(jqXHR, textStatus, errorThrown, true);\n            rm.uploadResumable();\n          };\n\n          fnComplete = function fnComplete() {\n            self._raise('filetestcomplete', [id, fm, rm, self._getOutData(fd)]);\n          };\n\n          self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, fd, id, rm.fileIndex, opts.testUrl);\n        },\n        pushAjax: function pushAjax(index, retry) {\n          var tm = self.taskManager,\n              pool = tm.getPool(rm.id);\n          pool.addTask(pool.size() + 1, function (deferrer) {\n            // use fifo chunk stack\n            var arr = rm.stack.shift(),\n                index;\n            index = arr[0];\n\n            if (!rm.chunksProcessed[rm.id] || !rm.chunksProcessed[rm.id][index]) {\n              rm.sendAjax(index, arr[1], deferrer);\n            } else {\n              self._log(logs.chunkQueueError, {\n                index: index\n              });\n            }\n          });\n          rm.stack.push([index, retry]);\n        },\n        sendAjax: function sendAjax(index, retry, deferrer) {\n          var f,\n              chunkSize = rm.chunkSize,\n              id = rm.id,\n              file = rm.file,\n              $thumb = rm.$thumb,\n              msgs = $h.logMessages,\n              $btnDelete = rm.$btnDelete,\n              logError = function logError(msg, tokens) {\n            if (tokens) {\n              msg = msg.setTokens(tokens);\n            }\n\n            msg = msgs.resumableRequestError.setTokens({\n              msg: msg\n            });\n\n            self._log(msg);\n\n            deferrer.reject(msg);\n          };\n\n          if (rm.chunksProcessed[id] && rm.chunksProcessed[id][index]) {\n            return;\n          }\n\n          if (retry > opts.maxRetries) {\n            logError(msgs.resumableMaxRetriesReached, {\n              n: opts.maxRetries\n            });\n            rm.setProcessed('error');\n            return;\n          }\n\n          var fd,\n              outData,\n              fnBefore,\n              fnSuccess,\n              fnError,\n              fnComplete,\n              slice = file.slice ? 'slice' : file.mozSlice ? 'mozSlice' : file.webkitSlice ? 'webkitSlice' : 'slice',\n              blob = file[slice](chunkSize * index, chunkSize * (index + 1));\n          fd = new FormData();\n          f = fm.stack[id];\n\n          self._setUploadData(fd, {\n            chunkCount: rm.chunkCount,\n            chunkIndex: index,\n            chunkSize: chunkSize,\n            chunkSizeStart: chunkSize * index,\n            fileBlob: [blob, rm.fileName],\n            fileId: id,\n            fileName: rm.fileName,\n            fileRelativePath: f.relativePath,\n            fileSize: file.size,\n            retryCount: retry\n          });\n\n          if (rm.$progress && rm.$progress.length) {\n            rm.$progress.show();\n          }\n\n          fnBefore = function fnBefore(jqXHR) {\n            outData = self._getOutData(fd, jqXHR);\n\n            if (self.showPreview) {\n              if (!$thumb.hasClass('file-preview-success')) {\n                self._setThumbStatus($thumb, 'Loading');\n\n                $h.addCss($thumb, 'file-uploading');\n              }\n\n              $btnDelete.attr('disabled', true);\n            }\n\n            self._raise('filechunkbeforesend', [id, index, retry, fm, rm, outData]);\n          };\n\n          fnSuccess = function fnSuccess(data, textStatus, jqXHR) {\n            if (self._isAborted()) {\n              logError(msgs.resumableAborting);\n              return;\n            }\n\n            outData = self._getOutData(fd, jqXHR, data);\n            var paramNames = self.uploadParamNames,\n                chunkIndex = paramNames.chunkIndex || 'chunkIndex',\n                params = [id, index, retry, fm, rm, outData];\n\n            if (data.error) {\n              if (opts.showErrorLog) {\n                self._log(logs.retryStatus, {\n                  retry: retry + 1,\n                  filename: rm.fileName,\n                  chunk: index\n                });\n              }\n\n              self._raise('filechunkerror', params);\n\n              rm.pushAjax(index, retry + 1);\n              rm.error = data.error;\n              logError(data.error);\n            } else {\n              rm.logs[data[chunkIndex]] = true;\n\n              if (!rm.chunksProcessed[id]) {\n                rm.chunksProcessed[id] = {};\n              }\n\n              rm.chunksProcessed[id][data[chunkIndex]] = true;\n              rm.chunksProcessed[id].data = data;\n              deferrer.resolve.call(null, data);\n\n              self._raise('filechunksuccess', params);\n\n              rm.check();\n            }\n          };\n\n          fnError = function fnError(jqXHR, textStatus, errorThrown) {\n            if (self._isAborted()) {\n              logError(msgs.resumableAborting);\n              return;\n            }\n\n            outData = self._getOutData(fd, jqXHR);\n            rm.setAjaxError(jqXHR, textStatus, errorThrown);\n\n            self._raise('filechunkajaxerror', [id, index, retry, fm, rm, outData]);\n\n            rm.pushAjax(index, retry + 1); // push another task\n\n            logError(msgs.resumableRetryError, {\n              n: retry - 1\n            }); // resolve the current task\n          };\n\n          fnComplete = function fnComplete() {\n            if (!self._isAborted()) {\n              self._raise('filechunkcomplete', [id, index, retry, fm, rm, self._getOutData(fd)]);\n            }\n          };\n\n          self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, fd, id, rm.fileIndex);\n        }\n      };\n      rm.reset();\n    },\n    _initTemplateDefaults: function _initTemplateDefaults() {\n      var self = this,\n          tMain1,\n          tMain2,\n          tPreview,\n          tFileIcon,\n          tClose,\n          tCaption,\n          tBtnDefault,\n          tBtnLink,\n          tBtnBrowse,\n          tModalMain,\n          tModal,\n          tProgress,\n          tSize,\n          tFooter,\n          tActions,\n          tActionDelete,\n          tActionUpload,\n          tActionDownload,\n          tActionZoom,\n          tActionDrag,\n          tIndicator,\n          tTagBef,\n          tTagBef1,\n          tTagBef2,\n          tTagAft,\n          tGeneric,\n          tHtml,\n          tImage,\n          tText,\n          tOffice,\n          tGdocs,\n          tVideo,\n          tAudio,\n          tFlash,\n          tObject,\n          tPdf,\n          tOther,\n          tStyle,\n          tZoomCache,\n          vDefaultDim,\n          tStats,\n          tModalLabel,\n          renderObject = function renderObject(type, mime) {\n        return '<object class=\"kv-preview-data file-preview-' + type + '\" title=\"{caption}\" ' + 'data=\"{data}\" type=\"' + mime + '\"' + tStyle + '>\\n' + $h.DEFAULT_PREVIEW + '\\n</object>\\n';\n      },\n          defBtnCss1 = 'btn btn-sm btn-kv ' + $h.defaultButtonCss();\n\n      tMain1 = '{preview}\\n' + '<div class=\"kv-upload-progress kv-hidden\"></div><div class=\"clearfix\"></div>\\n' + '<div class=\"file-caption {class}\">\\n' + '  <span class=\"file-caption-icon\"></span>\\n' + '  <div class=\"input-group\">\\n' + '{caption}\\n' + ($h.isBs(5) ? '' : '<div class=\"input-group-btn input-group-append\">\\n') + '      {remove}\\n' + '      {cancel}\\n' + '      {pause}\\n' + '      {upload}\\n' + '      {browse}\\n' + ($h.isBs(5) ? '' : '    </div>\\n') + '  </div>';\n      '</div>';\n      tMain2 = '{preview}\\n<div class=\"kv-upload-progress kv-hidden\"></div>\\n<div class=\"clearfix\"></div>\\n' + '<span class=\"{class}\">{remove}\\n{cancel}\\n{upload}\\n{browse}\\n</span>';\n      tPreview = '<div class=\"file-preview {class}\">\\n' + '  {close}' + '  <div class=\"{dropClass} clearfix\">\\n' + '    <div class=\"file-preview-thumbnails clearfix\">\\n' + '    </div>\\n' + '    <div class=\"file-preview-status text-center text-success\"></div>\\n' + '    <div class=\"kv-fileinput-error\"></div>\\n' + '  </div>\\n' + '</div>';\n      tClose = $h.closeButton('fileinput-remove');\n      tFileIcon = '<i class=\"bi-file-earmark-arrow-up\"></i>'; // noinspection HtmlUnknownAttribute\n\n      tCaption = '<input readonly class=\"file-caption-name form-control {class}\">\\n'; //noinspection HtmlUnknownAttribute\n\n      tBtnDefault = '<button type=\"{type}\" title=\"{title}\" class=\"{css}\" ' + '{status} {tabIndexConfig}>{icon} {label}</button>'; //noinspection HtmlUnknownTarget,HtmlUnknownAttribute\n\n      tBtnLink = '<a href=\"{href}\" title=\"{title}\" class=\"{css}\" {status} {tabIndexConfig}>{icon} {label}</a>'; //noinspection HtmlUnknownAttribute\n\n      tBtnBrowse = '<div class=\"{css}\" {status} {tabIndexConfig}>{icon} {label}</div>';\n      tModalLabel = $h.MODAL_ID + 'Label';\n      tModalMain = '<div id=\"' + $h.MODAL_ID + '\" class=\"file-zoom-dialog modal fade\" ' + 'aria-labelledby=\"' + tModalLabel + '\" {tabIndexConfig}></div>';\n      tModal = '<div class=\"modal-dialog modal-lg{rtl}\" role=\"document\">\\n' + '  <div class=\"modal-content\">\\n' + '    <div class=\"modal-header\">\\n' + '      <h5 class=\"modal-title\" id=\"' + tModalLabel + '\">{heading}</h5>\\n' + '      <span class=\"kv-zoom-title\"></span>\\n' + '      <div class=\"kv-zoom-actions\">{toggleheader}{fullscreen}{borderless}{close}</div>\\n' + '    </div>\\n' + '    <div class=\"modal-body\">\\n' + '      <div class=\"floating-buttons\"></div>\\n' + '      <div class=\"kv-zoom-body file-zoom-content {zoomFrameClass}\"></div>\\n' + '{prev} {next}\\n' + '    </div>\\n' + '  </div>\\n' + '</div>\\n';\n      tProgress = '<div class=\"progress\">\\n' + '    <div class=\"{class}\" role=\"progressbar\"' + ' aria-valuenow=\"{percent}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:{percent}%;\">\\n' + '        {status}\\n' + '     </div>\\n' + '</div>{stats}';\n      tStats = '<div class=\"text-primary file-upload-stats\">' + '<span class=\"pending-time\">{pendingTime}</span> ' + '<span class=\"upload-speed\">{uploadSpeed}</span>' + '</div>';\n      tSize = ' <samp>({sizeText})</samp>';\n      tFooter = '<div class=\"file-thumbnail-footer\">\\n' + '    <div class=\"file-footer-caption\" title=\"{caption}\">\\n' + '        <div class=\"file-caption-info\">{caption}</div>\\n' + '        <div class=\"file-size-info\">{size}</div>\\n' + '    </div>\\n' + '    {progress}\\n{indicator}\\n{actions}\\n' + '</div>';\n      tActions = '<div class=\"file-actions\">\\n' + '    <div class=\"file-footer-buttons\">\\n' + '        {download} {upload} {delete} {zoom} {other}' + '    </div>\\n' + '</div>\\n' + '{drag}\\n' + '<div class=\"clearfix\"></div>'; //noinspection HtmlUnknownAttribute\n\n      tActionDelete = '<button type=\"button\" class=\"kv-file-remove {removeClass}\" ' + 'title=\"{removeTitle}\" {dataUrl}{dataKey}>{removeIcon}</button>\\n';\n      tActionUpload = '<button type=\"button\" class=\"kv-file-upload {uploadClass}\" title=\"{uploadTitle}\">' + '{uploadIcon}</button>';\n      tActionDownload = '<a class=\"kv-file-download {downloadClass}\" title=\"{downloadTitle}\" ' + 'href=\"{downloadUrl}\" download=\"{caption}\" target=\"_blank\">{downloadIcon}</a>';\n      tActionZoom = '<button type=\"button\" class=\"kv-file-zoom {zoomClass}\" ' + 'title=\"{zoomTitle}\">{zoomIcon}</button>';\n      tActionDrag = '<span class=\"file-drag-handle {dragClass}\" title=\"{dragTitle}\">{dragIcon}</span>';\n      tIndicator = '<div class=\"file-upload-indicator\" title=\"{indicatorTitle}\">{indicator}</div>';\n      tTagBef = '<div class=\"file-preview-frame {frameClass}\" id=\"{previewId}\" data-fileindex=\"{fileindex}\"' + ' data-fileid=\"{fileid}\" data-template=\"{template}\"';\n      tTagBef1 = tTagBef + '><div class=\"kv-file-content\">\\n';\n      tTagBef2 = tTagBef + ' title=\"{caption}\"><div class=\"kv-file-content\">\\n';\n      tTagAft = '</div>{footer}\\n{zoomCache}</div>\\n';\n      tGeneric = '{content}\\n';\n      tStyle = ' {style}';\n      tHtml = renderObject('html', 'text/html');\n      tText = renderObject('text', 'text/plain;charset=UTF-8');\n      tPdf = renderObject('pdf', 'application/pdf');\n      tImage = '<img src=\"{data}\" class=\"file-preview-image kv-preview-data\" title=\"{title}\" alt=\"{alt}\"' + tStyle + '>\\n';\n      tOffice = '<iframe class=\"kv-preview-data file-preview-office\" ' + 'src=\"https://view.officeapps.live.com/op/embed.aspx?src={data}\"' + tStyle + '></iframe>';\n      tGdocs = '<iframe class=\"kv-preview-data file-preview-gdocs\" ' + 'src=\"https://docs.google.com/gview?url={data}&embedded=true\"' + tStyle + '></iframe>';\n      tVideo = '<video class=\"kv-preview-data file-preview-video\" controls' + tStyle + '>\\n' + '<source src=\"{data}\" type=\"{type}\">\\n' + $h.DEFAULT_PREVIEW + '\\n</video>\\n';\n      tAudio = '<!--suppress ALL --><audio class=\"kv-preview-data file-preview-audio\" controls' + tStyle + '>\\n<source src=\"{data}\" ' + 'type=\"{type}\">\\n' + $h.DEFAULT_PREVIEW + '\\n</audio>\\n';\n      tFlash = '<embed class=\"kv-preview-data file-preview-flash\" src=\"{data}\" type=\"application/x-shockwave-flash\"' + tStyle + '>\\n';\n      tObject = '<object class=\"kv-preview-data file-preview-object file-object {typeCss}\" ' + 'data=\"{data}\" type=\"{type}\"' + tStyle + '>\\n' + '<param name=\"movie\" value=\"{caption}\" />\\n' + $h.OBJECT_PARAMS + ' ' + $h.DEFAULT_PREVIEW + '\\n</object>\\n';\n      tOther = '<div class=\"kv-preview-data file-preview-other-frame\"' + tStyle + '>\\n' + $h.DEFAULT_PREVIEW + '\\n</div>\\n';\n      tZoomCache = '<div class=\"kv-zoom-cache\">{zoomContent}</div>';\n      vDefaultDim = {\n        width: '100%',\n        height: '100%',\n        'min-height': '480px'\n      };\n\n      if (self._isPdfRendered()) {\n        tPdf = self.pdfRendererTemplate.replace('{renderer}', self._encodeURI(self.pdfRendererUrl));\n      }\n\n      self.defaults = {\n        layoutTemplates: {\n          main1: tMain1,\n          main2: tMain2,\n          preview: tPreview,\n          close: tClose,\n          fileIcon: tFileIcon,\n          caption: tCaption,\n          modalMain: tModalMain,\n          modal: tModal,\n          progress: tProgress,\n          stats: tStats,\n          size: tSize,\n          footer: tFooter,\n          indicator: tIndicator,\n          actions: tActions,\n          actionDelete: tActionDelete,\n          actionUpload: tActionUpload,\n          actionDownload: tActionDownload,\n          actionZoom: tActionZoom,\n          actionDrag: tActionDrag,\n          btnDefault: tBtnDefault,\n          btnLink: tBtnLink,\n          btnBrowse: tBtnBrowse,\n          zoomCache: tZoomCache\n        },\n        previewMarkupTags: {\n          tagBefore1: tTagBef1,\n          tagBefore2: tTagBef2,\n          tagAfter: tTagAft\n        },\n        previewContentTemplates: {\n          generic: tGeneric,\n          html: tHtml,\n          image: tImage,\n          text: tText,\n          office: tOffice,\n          gdocs: tGdocs,\n          video: tVideo,\n          audio: tAudio,\n          flash: tFlash,\n          object: tObject,\n          pdf: tPdf,\n          other: tOther\n        },\n        allowedPreviewTypes: ['image', 'html', 'text', 'video', 'audio', 'flash', 'pdf', 'object'],\n        previewTemplates: {},\n        previewSettings: {\n          image: {\n            width: 'auto',\n            height: 'auto',\n            'max-width': '100%',\n            'max-height': '100%'\n          },\n          html: {\n            width: '213px',\n            height: '160px'\n          },\n          text: {\n            width: '213px',\n            height: '160px'\n          },\n          office: {\n            width: '213px',\n            height: '160px'\n          },\n          gdocs: {\n            width: '213px',\n            height: '160px'\n          },\n          video: {\n            width: '213px',\n            height: '160px'\n          },\n          audio: {\n            width: '100%',\n            height: '30px'\n          },\n          flash: {\n            width: '213px',\n            height: '160px'\n          },\n          object: {\n            width: '213px',\n            height: '160px'\n          },\n          pdf: {\n            width: '100%',\n            height: '160px',\n            'position': 'relative'\n          },\n          other: {\n            width: '213px',\n            height: '160px'\n          }\n        },\n        previewSettingsSmall: {\n          image: {\n            width: 'auto',\n            height: 'auto',\n            'max-width': '100%',\n            'max-height': '100%'\n          },\n          html: {\n            width: '100%',\n            height: '160px'\n          },\n          text: {\n            width: '100%',\n            height: '160px'\n          },\n          office: {\n            width: '100%',\n            height: '160px'\n          },\n          gdocs: {\n            width: '100%',\n            height: '160px'\n          },\n          video: {\n            width: '100%',\n            height: 'auto'\n          },\n          audio: {\n            width: '100%',\n            height: '30px'\n          },\n          flash: {\n            width: '100%',\n            height: 'auto'\n          },\n          object: {\n            width: '100%',\n            height: 'auto'\n          },\n          pdf: {\n            width: '100%',\n            height: '160px'\n          },\n          other: {\n            width: '100%',\n            height: '160px'\n          }\n        },\n        previewZoomSettings: {\n          image: {\n            width: 'auto',\n            height: 'auto',\n            'max-width': '100%',\n            'max-height': '100%'\n          },\n          html: vDefaultDim,\n          text: vDefaultDim,\n          office: {\n            width: '100%',\n            height: '100%',\n            'max-width': '100%',\n            'min-height': '480px'\n          },\n          gdocs: {\n            width: '100%',\n            height: '100%',\n            'max-width': '100%',\n            'min-height': '480px'\n          },\n          video: {\n            width: 'auto',\n            height: '100%',\n            'max-width': '100%'\n          },\n          audio: {\n            width: '100%',\n            height: '30px'\n          },\n          flash: {\n            width: 'auto',\n            height: '480px'\n          },\n          object: {\n            width: 'auto',\n            height: '100%',\n            'max-width': '100%',\n            'min-height': '480px'\n          },\n          pdf: vDefaultDim,\n          other: {\n            width: 'auto',\n            height: '100%',\n            'min-height': '480px'\n          }\n        },\n        mimeTypeAliases: {\n          'video/quicktime': 'video/mp4'\n        },\n        fileTypeSettings: {\n          image: function image(vType, vName) {\n            return $h.compare(vType, 'image.*') && !$h.compare(vType, /(tiff?|wmf)$/i) || $h.compare(vName, /\\.(gif|png|jpe?g)$/i);\n          },\n          html: function html(vType, vName) {\n            return $h.compare(vType, 'text/html') || $h.compare(vName, /\\.(htm|html)$/i);\n          },\n          office: function office(vType, vName) {\n            return $h.compare(vType, /(word|excel|powerpoint|office)$/i) || $h.compare(vName, /\\.(docx?|xlsx?|pptx?|pps|potx?)$/i);\n          },\n          gdocs: function gdocs(vType, vName) {\n            return $h.compare(vType, /(word|excel|powerpoint|office|iwork-pages|tiff?)$/i) || $h.compare(vName, /\\.(docx?|xlsx?|pptx?|pps|potx?|rtf|ods|odt|pages|ai|dxf|ttf|tiff?|wmf|e?ps)$/i);\n          },\n          text: function text(vType, vName) {\n            return $h.compare(vType, 'text.*') || $h.compare(vName, /\\.(xml|javascript)$/i) || $h.compare(vName, /\\.(txt|md|nfo|ini|json|php|js|css)$/i);\n          },\n          video: function video(vType, vName) {\n            return $h.compare(vType, 'video.*') && ($h.compare(vType, /(ogg|mp4|mp?g|mov|webm|3gp)$/i) || $h.compare(vName, /\\.(og?|mp4|webm|mp?g|mov|3gp)$/i));\n          },\n          audio: function audio(vType, vName) {\n            return $h.compare(vType, 'audio.*') && ($h.compare(vName, /(ogg|mp3|mp?g|wav)$/i) || $h.compare(vName, /\\.(og?|mp3|mp?g|wav)$/i));\n          },\n          flash: function flash(vType, vName) {\n            return $h.compare(vType, 'application/x-shockwave-flash', true) || $h.compare(vName, /\\.(swf)$/i);\n          },\n          pdf: function pdf(vType, vName) {\n            return $h.compare(vType, 'application/pdf', true) || $h.compare(vName, /\\.(pdf)$/i);\n          },\n          object: function object() {\n            return true;\n          },\n          other: function other() {\n            return true;\n          }\n        },\n        fileActionSettings: {\n          showRemove: true,\n          showUpload: true,\n          showDownload: true,\n          showZoom: true,\n          showDrag: true,\n          removeIcon: '<i class=\"bi-trash\"></i>',\n          removeClass: defBtnCss1,\n          removeErrorClass: 'btn btn-sm btn-kv btn-danger',\n          removeTitle: 'Remove file',\n          uploadIcon: '<i class=\"bi-upload\"></i>',\n          uploadClass: defBtnCss1,\n          uploadTitle: 'Upload file',\n          uploadRetryIcon: '<i class=\"bi-arrow-clockwise\"></i>',\n          uploadRetryTitle: 'Retry upload',\n          downloadIcon: '<i class=\"bi-download\"></i>',\n          downloadClass: defBtnCss1,\n          downloadTitle: 'Download file',\n          zoomIcon: '<i class=\"bi-zoom-in\"></i>',\n          zoomClass: defBtnCss1,\n          zoomTitle: 'View Details',\n          dragIcon: '<i class=\"bi-arrows-move\"></i>',\n          dragClass: 'text-primary',\n          dragTitle: 'Move / Rearrange',\n          dragSettings: {},\n          indicatorNew: '<i class=\"bi-plus-lg text-warning\"></i>',\n          indicatorSuccess: '<i class=\"bi-check-lg text-success\"></i>',\n          indicatorError: '<i class=\"bi-exclamation-lg text-danger\"></i>',\n          indicatorLoading: '<i class=\"bi-hourglass-bottom text-muted\"></i>',\n          indicatorPaused: '<i class=\"bi-pause-fill text-primary\"></i>',\n          indicatorNewTitle: 'Not uploaded yet',\n          indicatorSuccessTitle: 'Uploaded',\n          indicatorErrorTitle: 'Upload Error',\n          indicatorLoadingTitle: 'Uploading &hellip;',\n          indicatorPausedTitle: 'Upload Paused'\n        }\n      };\n      $.each(self.defaults, function (key, setting) {\n        if (key === 'allowedPreviewTypes') {\n          if (self.allowedPreviewTypes === undefined) {\n            self.allowedPreviewTypes = setting;\n          }\n\n          return;\n        }\n\n        self[key] = $.extend(true, {}, setting, self[key]);\n      });\n\n      self._initPreviewTemplates();\n    },\n    _initPreviewTemplates: function _initPreviewTemplates() {\n      var self = this,\n          tags = self.previewMarkupTags,\n          tagBef,\n          tagAft = tags.tagAfter;\n      $.each(self.previewContentTemplates, function (key, value) {\n        if ($h.isEmpty(self.previewTemplates[key])) {\n          tagBef = tags.tagBefore2;\n\n          if (key === 'generic' || key === 'image') {\n            tagBef = tags.tagBefore1;\n          }\n\n          if (self._isPdfRendered() && key === 'pdf') {\n            tagBef = tagBef.replace('kv-file-content', 'kv-file-content kv-pdf-rendered');\n          }\n\n          self.previewTemplates[key] = tagBef + value + tagAft;\n        }\n      });\n    },\n    _initPreviewCache: function _initPreviewCache() {\n      var self = this;\n      self.previewCache = {\n        data: {},\n        init: function init() {\n          var content = self.initialPreview;\n\n          if (content.length > 0 && !$h.isArray(content)) {\n            content = content.split(self.initialPreviewDelimiter);\n          }\n\n          self.previewCache.data = {\n            content: content,\n            config: self.initialPreviewConfig,\n            tags: self.initialPreviewThumbTags\n          };\n        },\n        count: function count(skipNull) {\n          if (!self.previewCache.data || !self.previewCache.data.content) {\n            return 0;\n          }\n\n          if (skipNull) {\n            var chk = self.previewCache.data.content.filter(function (n) {\n              return n !== null;\n            });\n            return chk.length;\n          }\n\n          return self.previewCache.data.content.length;\n        },\n        get: function get(i, isDisabled) {\n          var ind = $h.INIT_FLAG + i,\n              data = self.previewCache.data,\n              config = data.config[i],\n              content = data.content[i],\n              out,\n              $tmp,\n              cat,\n              ftr,\n              fname,\n              ftype,\n              frameClass,\n              asData = $h.ifSet('previewAsData', config, self.initialPreviewAsData),\n              a = config ? {\n            title: config.title || null,\n            alt: config.alt || null\n          } : {\n            title: null,\n            alt: null\n          },\n              parseTemplate = function parseTemplate(cat, dat, fname, ftype, ftr, ind, fclass, t) {\n            var fc = ' file-preview-initial ' + $h.SORT_CSS + (fclass ? ' ' + fclass : ''),\n                id = self.previewInitId + '-' + ind,\n                fileId = config && config.fileId || id;\n            /** @namespace config.zoomData */\n\n            return self._generatePreviewTemplate(cat, dat, fname, ftype, id, fileId, false, null, fc, ftr, ind, t, a, config && config.zoomData || dat);\n          };\n\n          if (!content || !content.length) {\n            return '';\n          }\n\n          isDisabled = isDisabled === undefined ? true : isDisabled;\n          cat = $h.ifSet('type', config, self.initialPreviewFileType || 'generic');\n          fname = $h.ifSet('filename', config, $h.ifSet('caption', config));\n          ftype = $h.ifSet('filetype', config, cat);\n          ftr = self.previewCache.footer(i, isDisabled, config && config.size || null);\n          frameClass = $h.ifSet('frameClass', config);\n\n          if (asData) {\n            out = parseTemplate(cat, content, fname, ftype, ftr, ind, frameClass);\n          } else {\n            out = parseTemplate('generic', content, fname, ftype, ftr, ind, frameClass, cat).setTokens({\n              'content': data.content[i]\n            });\n          }\n\n          if (data.tags.length && data.tags[i]) {\n            out = $h.replaceTags(out, data.tags[i]);\n          }\n          /** @namespace config.frameAttr */\n\n\n          if (!$h.isEmpty(config) && !$h.isEmpty(config.frameAttr)) {\n            $tmp = $h.createElement(out);\n            $tmp.find('.file-preview-initial').attr(config.frameAttr);\n            out = $tmp.html();\n            $tmp.remove();\n          }\n\n          return out;\n        },\n        clean: function clean(data) {\n          data.content = $h.cleanArray(data.content);\n          data.config = $h.cleanArray(data.config);\n          data.tags = $h.cleanArray(data.tags);\n          self.previewCache.data = data;\n        },\n        add: function add(content, config, tags, append) {\n          var data = self.previewCache.data,\n              index;\n\n          if (!content || !content.length) {\n            return 0;\n          }\n\n          index = content.length - 1;\n\n          if (!$h.isArray(content)) {\n            content = content.split(self.initialPreviewDelimiter);\n          }\n\n          if (append && data.content) {\n            index = data.content.push(content[0]) - 1;\n            data.config[index] = config;\n            data.tags[index] = tags;\n          } else {\n            data.content = content;\n            data.config = config;\n            data.tags = tags;\n          }\n\n          self.previewCache.clean(data);\n          return index;\n        },\n        set: function set(content, config, tags, append) {\n          var data = self.previewCache.data,\n              i,\n              chk;\n\n          if (!content || !content.length) {\n            return;\n          }\n\n          if (!$h.isArray(content)) {\n            content = content.split(self.initialPreviewDelimiter);\n          }\n\n          chk = content.filter(function (n) {\n            return n !== null;\n          });\n\n          if (!chk.length) {\n            return;\n          }\n\n          if (data.content === undefined) {\n            data.content = [];\n          }\n\n          if (data.config === undefined) {\n            data.config = [];\n          }\n\n          if (data.tags === undefined) {\n            data.tags = [];\n          }\n\n          if (append) {\n            for (i = 0; i < content.length; i++) {\n              if (content[i]) {\n                data.content.push(content[i]);\n              }\n            }\n\n            for (i = 0; i < config.length; i++) {\n              if (config[i]) {\n                data.config.push(config[i]);\n              }\n            }\n\n            for (i = 0; i < tags.length; i++) {\n              if (tags[i]) {\n                data.tags.push(tags[i]);\n              }\n            }\n          } else {\n            data.content = content;\n            data.config = config;\n            data.tags = tags;\n          }\n\n          self.previewCache.clean(data);\n        },\n        unset: function unset(index) {\n          var chk = self.previewCache.count(),\n              rev = self.reversePreviewOrder;\n\n          if (!chk) {\n            return;\n          }\n\n          if (chk === 1) {\n            self.previewCache.data.content = [];\n            self.previewCache.data.config = [];\n            self.previewCache.data.tags = [];\n            self.initialPreview = [];\n            self.initialPreviewConfig = [];\n            self.initialPreviewThumbTags = [];\n            return;\n          }\n\n          self.previewCache.data.content = $h.spliceArray(self.previewCache.data.content, index, rev);\n          self.previewCache.data.config = $h.spliceArray(self.previewCache.data.config, index, rev);\n          self.previewCache.data.tags = $h.spliceArray(self.previewCache.data.tags, index, rev);\n          var data = $.extend(true, {}, self.previewCache.data);\n          self.previewCache.clean(data);\n        },\n        out: function out() {\n          var html = '',\n              caption,\n              len = self.previewCache.count(),\n              i,\n              content;\n\n          if (len === 0) {\n            return {\n              content: '',\n              caption: ''\n            };\n          }\n\n          for (i = 0; i < len; i++) {\n            content = self.previewCache.get(i);\n            html = self.reversePreviewOrder ? content + html : html + content;\n          }\n\n          caption = self._getMsgSelected(len);\n          return {\n            content: html,\n            caption: caption\n          };\n        },\n        footer: function footer(i, isDisabled, size) {\n          var data = self.previewCache.data || {};\n\n          if ($h.isEmpty(data.content)) {\n            return '';\n          }\n\n          if ($h.isEmpty(data.config) || $h.isEmpty(data.config[i])) {\n            data.config[i] = {};\n          }\n\n          isDisabled = isDisabled === undefined ? true : isDisabled;\n          var config = data.config[i],\n              caption = $h.ifSet('caption', config),\n              a,\n              width = $h.ifSet('width', config, 'auto'),\n              url = $h.ifSet('url', config, false),\n              key = $h.ifSet('key', config, null),\n              fileId = $h.ifSet('fileId', config, null),\n              fs = self.fileActionSettings,\n              initPreviewShowDel = self.initialPreviewShowDelete || false,\n              downloadInitialUrl = !self.initialPreviewDownloadUrl ? '' : self.initialPreviewDownloadUrl + '?key=' + key + (fileId ? '&fileId=' + fileId : ''),\n              dUrl = config.downloadUrl || downloadInitialUrl,\n              dFil = config.filename || config.caption || '',\n              initPreviewShowDwl = !!dUrl,\n              sDel = $h.ifSet('showRemove', config, initPreviewShowDel),\n              sDwl = $h.ifSet('showDownload', config, $h.ifSet('showDownload', fs, initPreviewShowDwl)),\n              sZm = $h.ifSet('showZoom', config, $h.ifSet('showZoom', fs, true)),\n              sDrg = $h.ifSet('showDrag', config, $h.ifSet('showDrag', fs, true)),\n              dis = url === false && isDisabled;\n          sDwl = sDwl && config.downloadUrl !== false && !!dUrl;\n          a = self._renderFileActions(config, false, sDwl, sDel, sZm, sDrg, dis, url, key, true, dUrl, dFil);\n          return self._getLayoutTemplate('footer').setTokens({\n            'progress': self._renderThumbProgress(),\n            'actions': a,\n            'caption': caption,\n            'size': self._getSize(size),\n            'width': width,\n            'indicator': ''\n          });\n        }\n      };\n      self.previewCache.init();\n    },\n    _isPdfRendered: function _isPdfRendered() {\n      var self = this,\n          useLib = self.usePdfRenderer,\n          flag = typeof useLib === 'function' ? useLib() : !!useLib;\n      return flag && self.pdfRendererUrl;\n    },\n    _handler: function _handler($el, event, callback) {\n      var self = this,\n          ns = self.namespace,\n          ev = event.split(' ').join(ns + ' ') + ns;\n\n      if (!$el || !$el.length) {\n        return;\n      }\n\n      $el.off(ev).on(ev, callback);\n    },\n    _encodeURI: function _encodeURI(vUrl) {\n      var self = this;\n      return self.encodeUrl ? encodeURI(vUrl) : vUrl;\n    },\n    _log: function _log(msg, tokens) {\n      var self = this,\n          id = self.$element.attr('id');\n\n      if (!self.showConsoleLogs) {\n        return;\n      }\n\n      if (id) {\n        msg = '\"' + id + '\": ' + msg;\n      }\n\n      msg = 'bootstrap-fileinput: ' + msg;\n\n      if (_typeof(tokens) === 'object') {\n        msg = msg.setTokens(tokens);\n      }\n\n      if (window.console && typeof window.console.log !== 'undefined') {\n        window.console.log(msg);\n      } else {\n        window.alert(msg);\n      }\n    },\n    _validate: function _validate() {\n      var self = this,\n          status = self.$element.attr('type') === 'file';\n\n      if (!status) {\n        self._log($h.logMessages.badInputType);\n      }\n\n      return status;\n    },\n    _errorsExist: function _errorsExist() {\n      var self = this,\n          $err,\n          $errList = self.$errorContainer.find('li');\n\n      if ($errList.length) {\n        return true;\n      }\n\n      $err = $h.createElement(self.$errorContainer.html());\n      $err.find('.kv-error-close').remove();\n      $err.find('ul').remove();\n      return !!$.trim($err.text()).length;\n    },\n    _errorHandler: function _errorHandler(evt, caption) {\n      var self = this,\n          err = evt.target.error,\n          showError = function showError(msg) {\n        self._showError(msg.replace('{name}', caption));\n      };\n      /** @namespace err.NOT_FOUND_ERR */\n\n      /** @namespace err.SECURITY_ERR */\n\n      /** @namespace err.NOT_READABLE_ERR */\n\n\n      if (err.code === err.NOT_FOUND_ERR) {\n        showError(self.msgFileNotFound);\n      } else {\n        if (err.code === err.SECURITY_ERR) {\n          showError(self.msgFileSecured);\n        } else {\n          if (err.code === err.NOT_READABLE_ERR) {\n            showError(self.msgFileNotReadable);\n          } else {\n            if (err.code === err.ABORT_ERR) {\n              showError(self.msgFilePreviewAborted);\n            } else {\n              showError(self.msgFilePreviewError);\n            }\n          }\n        }\n      }\n    },\n    _addError: function _addError(msg) {\n      var self = this,\n          $error = self.$errorContainer;\n\n      if (msg && $error.length) {\n        $h.setHtml($error, self.errorCloseButton + msg);\n\n        self._handler($error.find('.kv-error-close'), 'click', function () {\n          setTimeout(function () {\n            if (self.showPreview && !self.getFrames().length) {\n              self.clear();\n            }\n\n            $error.fadeOut('slow');\n          }, self.processDelay);\n        });\n      }\n    },\n    _setValidationError: function _setValidationError(css) {\n      var self = this;\n      css = (css ? css + ' ' : '') + 'has-error';\n      self.$container.removeClass(css).addClass('has-error');\n      $h.addCss(self.$caption, 'is-invalid');\n    },\n    _resetErrors: function _resetErrors(fade) {\n      var self = this,\n          $error = self.$errorContainer,\n          history = self.resumableUploadOptions.retainErrorHistory;\n\n      if (self.isPersistentError || self.enableResumableUpload && history) {\n        return;\n      }\n\n      self.isError = false;\n      self.$container.removeClass('has-error');\n      self.$caption.removeClass('is-invalid is-valid file-processing');\n      $error.html('');\n\n      if (fade) {\n        $error.fadeOut('slow');\n      } else {\n        $error.hide();\n      }\n    },\n    _showFolderError: function _showFolderError(folders) {\n      var self = this,\n          $error = self.$errorContainer,\n          msg;\n\n      if (!folders) {\n        return;\n      }\n\n      if (!self.isAjaxUpload) {\n        self._clearFileInput();\n      }\n\n      msg = self.msgFoldersNotAllowed.replace('{n}', folders);\n\n      self._addError(msg);\n\n      self._setValidationError();\n\n      $error.fadeIn(self.fadeDelay);\n\n      self._raise('filefoldererror', [folders, msg]);\n    },\n    _showFileError: function _showFileError(msg, params, event) {\n      var self = this,\n          $error = self.$errorContainer,\n          ev = event || 'fileuploaderror',\n          fId = params && params.fileId || '',\n          e = params && params.id ? '<li data-thumb-id=\"' + params.id + '\" data-file-id=\"' + fId + '\">' + msg + '</li>' : '<li>' + msg + '</li>';\n\n      if ($error.find('ul').length === 0) {\n        self._addError('<ul>' + e + '</ul>');\n      } else {\n        $error.find('ul').append(e);\n      }\n\n      $error.fadeIn(self.fadeDelay);\n\n      self._raise(ev, [params, msg]);\n\n      self._setValidationError('file-input-new');\n\n      return true;\n    },\n    _showError: function _showError(msg, params, event) {\n      var self = this,\n          $error = self.$errorContainer,\n          ev = event || 'fileerror';\n      params = params || {};\n      params.reader = self.reader;\n\n      self._addError(msg);\n\n      $error.fadeIn(self.fadeDelay);\n\n      self._raise(ev, [params, msg]);\n\n      if (!self.isAjaxUpload) {\n        self._clearFileInput();\n      }\n\n      self._setValidationError('file-input-new');\n\n      self.$btnUpload.attr('disabled', true);\n      return true;\n    },\n    _noFilesError: function _noFilesError(params) {\n      var self = this,\n          label = self.minFileCount > 1 ? self.filePlural : self.fileSingle,\n          msg = self.msgFilesTooLess.replace('{n}', self.minFileCount).replace('{files}', label),\n          $error = self.$errorContainer;\n      msg = '<li>' + msg + '</li>';\n\n      if ($error.find('ul').length === 0) {\n        self._addError('<ul>' + msg + '</ul>');\n      } else {\n        $error.find('ul').append(msg);\n      }\n\n      self.isError = true;\n\n      self._updateFileDetails(0);\n\n      $error.fadeIn(self.fadeDelay);\n\n      self._raise('fileerror', [params, msg]);\n\n      self._clearFileInput();\n\n      self._setValidationError();\n    },\n    _parseError: function _parseError(operation, jqXHR, errorThrown, fileName) {\n      /** @namespace jqXHR.responseJSON */\n      var self = this,\n          errMsg = $.trim(errorThrown + ''),\n          textPre,\n          errText,\n          text;\n      errText = jqXHR.responseJSON && jqXHR.responseJSON.error ? jqXHR.responseJSON.error.toString() : '';\n      text = errText ? errText : jqXHR.responseText;\n\n      if (self.cancelling && self.msgUploadAborted) {\n        errMsg = self.msgUploadAborted;\n      }\n\n      if (self.showAjaxErrorDetails && text) {\n        if (errText) {\n          errMsg = $.trim(errText + '');\n        } else {\n          text = $.trim(text.replace(/\\n\\s*\\n/g, '\\n'));\n          textPre = text.length ? '<pre>' + text + '</pre>' : '';\n          errMsg += errMsg ? textPre : text;\n        }\n      }\n\n      if (!errMsg) {\n        errMsg = self.msgAjaxError.replace('{operation}', operation);\n      }\n\n      self.cancelling = false;\n      return fileName ? '<b>' + fileName + ': </b>' + errMsg : errMsg;\n    },\n    _parseFileType: function _parseFileType(type, name) {\n      var self = this,\n          isValid,\n          vType,\n          cat,\n          i,\n          types = self.allowedPreviewTypes || [];\n\n      if (type === 'application/text-plain') {\n        return 'text';\n      }\n\n      for (i = 0; i < types.length; i++) {\n        cat = types[i];\n        isValid = self.fileTypeSettings[cat];\n        vType = isValid(type, name) ? cat : '';\n\n        if (!$h.isEmpty(vType)) {\n          return vType;\n        }\n      }\n\n      return 'other';\n    },\n    _getPreviewIcon: function _getPreviewIcon(fname) {\n      var self = this,\n          ext,\n          out = null;\n\n      if (fname && fname.indexOf('.') > -1) {\n        ext = fname.split('.').pop();\n\n        if (self.previewFileIconSettings) {\n          out = self.previewFileIconSettings[ext] || self.previewFileIconSettings[ext.toLowerCase()] || null;\n        }\n\n        if (self.previewFileExtSettings) {\n          $.each(self.previewFileExtSettings, function (key, func) {\n            if (self.previewFileIconSettings[key] && func(ext)) {\n              out = self.previewFileIconSettings[key]; //noinspection UnnecessaryReturnStatementJS\n\n              return;\n            }\n          });\n        }\n      }\n\n      return out || self.previewFileIcon;\n    },\n    _parseFilePreviewIcon: function _parseFilePreviewIcon(content, fname) {\n      var self = this,\n          icn = self._getPreviewIcon(fname),\n          out = content;\n\n      if (out.indexOf('{previewFileIcon}') > -1) {\n        out = out.setTokens({\n          'previewFileIconClass': self.previewFileIconClass,\n          'previewFileIcon': icn\n        });\n      }\n\n      return out;\n    },\n    _raise: function _raise(event, params) {\n      var self = this,\n          e = $.Event(event);\n\n      if (params !== undefined) {\n        self.$element.trigger(e, params);\n      } else {\n        self.$element.trigger(e);\n      }\n\n      if (e.isDefaultPrevented() || e.result === false) {\n        return false;\n      }\n\n      switch (event) {\n        // ignore these events\n        case 'filebatchuploadcomplete':\n        case 'filebatchuploadsuccess':\n        case 'fileuploaded':\n        case 'fileclear':\n        case 'filecleared':\n        case 'filereset':\n        case 'fileerror':\n        case 'filefoldererror':\n        case 'fileuploaderror':\n        case 'filebatchuploaderror':\n        case 'filedeleteerror':\n        case 'filecustomerror':\n        case 'filesuccessremove':\n          break;\n        // receive data response via `filecustomerror` event`\n\n        default:\n          if (!self.ajaxAborted) {\n            self.ajaxAborted = e.result;\n          }\n\n          break;\n      }\n\n      return true;\n    },\n    _listenFullScreen: function _listenFullScreen(isFullScreen) {\n      var self = this,\n          $modal = self.$modal,\n          $btnFull,\n          $btnBord;\n\n      if (!$modal || !$modal.length) {\n        return;\n      }\n\n      $btnFull = $modal && $modal.find('.btn-kv-fullscreen');\n      $btnBord = $modal && $modal.find('.btn-kv-borderless');\n\n      if (!$btnFull.length || !$btnBord.length) {\n        return;\n      }\n\n      $btnFull.removeClass('active').attr('aria-pressed', 'false');\n      $btnBord.removeClass('active').attr('aria-pressed', 'false');\n\n      if (isFullScreen) {\n        $btnFull.addClass('active').attr('aria-pressed', 'true');\n      } else {\n        $btnBord.addClass('active').attr('aria-pressed', 'true');\n      }\n\n      if ($modal.hasClass('file-zoom-fullscreen')) {\n        self._maximizeZoomDialog();\n      } else {\n        if (isFullScreen) {\n          self._maximizeZoomDialog();\n        } else {\n          $btnBord.removeClass('active').attr('aria-pressed', 'false');\n        }\n      }\n    },\n    _listen: function _listen() {\n      var self = this,\n          $el = self.$element,\n          $form = self.$form,\n          $cont = self.$container,\n          fullScreenEv;\n\n      self._handler($el, 'click', function (e) {\n        self._initFileSelected();\n\n        if ($el.hasClass('file-no-browse')) {\n          if ($el.data('zoneClicked')) {\n            $el.data('zoneClicked', false);\n          } else {\n            e.preventDefault();\n          }\n        }\n      });\n\n      self._handler($el, 'change', $.proxy(self._change, self));\n\n      self._handler(self.$caption, 'paste', $.proxy(self.paste, self));\n\n      if (self.showBrowse) {\n        self._handler(self.$btnFile, 'click', $.proxy(self._browse, self));\n\n        self._handler(self.$btnFile, 'keypress', function (e) {\n          var keycode = e.keyCode || e.which;\n\n          if (keycode === 13) {\n            $el.trigger('click');\n\n            self._browse(e);\n          }\n        });\n      }\n\n      self._handler($cont.find('.fileinput-remove:not([disabled])'), 'click', $.proxy(self.clear, self));\n\n      self._handler($cont.find('.fileinput-cancel'), 'click', $.proxy(self.cancel, self));\n\n      self._handler($cont.find('.fileinput-pause'), 'click', $.proxy(self.pause, self));\n\n      self._initDragDrop();\n\n      self._handler($form, 'reset', $.proxy(self.clear, self));\n\n      if (!self.isAjaxUpload) {\n        self._handler($form, 'submit', $.proxy(self._submitForm, self));\n      }\n\n      self._handler(self.$container.find('.fileinput-upload'), 'click', $.proxy(self._uploadClick, self));\n\n      self._handler($(window), 'resize', function () {\n        self._listenFullScreen(screen.width === window.innerWidth && screen.height === window.innerHeight);\n      });\n\n      fullScreenEv = 'webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange';\n\n      self._handler($(document), fullScreenEv, function () {\n        self._listenFullScreen($h.checkFullScreen());\n      });\n\n      self.$caption.on('focus', function () {\n        self.$captionContainer.focus();\n      });\n\n      self._autoFitContent();\n\n      self._initClickable();\n\n      self._refreshPreview();\n    },\n    _autoFitContent: function _autoFitContent() {\n      var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,\n          self = this,\n          config = width < 400 ? self.previewSettingsSmall || self.defaults.previewSettingsSmall : self.previewSettings || self.defaults.previewSettings,\n          sel;\n      $.each(config, function (cat, settings) {\n        sel = '.file-preview-frame .file-preview-' + cat;\n        self.$preview.find(sel + '.kv-preview-data,' + sel + ' .kv-preview-data').css(settings);\n      });\n    },\n    _scanDroppedItems: function _scanDroppedItems(item, files, path) {\n      path = path || '';\n\n      var self = this,\n          i,\n          dirReader,\n          _readDir,\n          errorHandler = function errorHandler(e) {\n        self._log($h.logMessages.badDroppedFiles);\n\n        self._log(e);\n      };\n\n      if (item.isFile) {\n        item.file(function (file) {\n          if (path) {\n            file.newPath = path + file.name;\n          }\n\n          files.push(file);\n        }, errorHandler);\n      } else {\n        if (item.isDirectory) {\n          dirReader = item.createReader();\n\n          _readDir = function readDir() {\n            dirReader.readEntries(function (entries) {\n              if (entries && entries.length > 0) {\n                for (i = 0; i < entries.length; i++) {\n                  self._scanDroppedItems(entries[i], files, path + item.name + '/');\n                } // recursively call readDir() again, since browser can only handle first 100 entries.\n\n\n                _readDir();\n              }\n\n              return null;\n            }, errorHandler);\n          };\n\n          _readDir();\n        }\n      }\n    },\n    _initDragDrop: function _initDragDrop() {\n      var self = this,\n          $zone = self.$dropZone;\n\n      if (self.dropZoneEnabled && self.showPreview) {\n        self._handler($zone, 'dragenter dragover', $.proxy(self._zoneDragEnter, self));\n\n        self._handler($zone, 'dragleave', $.proxy(self._zoneDragLeave, self));\n\n        self._handler($zone, 'drop', $.proxy(self._zoneDrop, self));\n\n        self._handler($(document), 'dragenter dragover drop', self._zoneDragDropInit);\n      }\n    },\n    _zoneDragDropInit: function _zoneDragDropInit(e) {\n      e.stopPropagation();\n      e.preventDefault();\n    },\n    _zoneDragEnter: function _zoneDragEnter(e) {\n      var self = this,\n          dt = e.originalEvent.dataTransfer,\n          hasFiles = $.inArray('Files', dt.types) > -1;\n\n      self._zoneDragDropInit(e);\n\n      if (self.isDisabled || !hasFiles) {\n        dt.effectAllowed = 'none';\n        dt.dropEffect = 'none';\n        return;\n      }\n\n      dt.dropEffect = 'copy';\n\n      if (self._raise('fileDragEnter', {\n        'sourceEvent': e,\n        'files': dt.types.Files\n      })) {\n        $h.addCss(self.$dropZone, 'file-highlighted');\n      }\n    },\n    _zoneDragLeave: function _zoneDragLeave(e) {\n      var self = this;\n\n      self._zoneDragDropInit(e);\n\n      if (self.isDisabled) {\n        return;\n      }\n\n      if (self._raise('fileDragLeave', {\n        'sourceEvent': e\n      })) {\n        self.$dropZone.removeClass('file-highlighted');\n      }\n    },\n    _dropFiles: function _dropFiles(e, files) {\n      var self = this,\n          $el = self.$element;\n\n      if (!self.isAjaxUpload) {\n        self.changeTriggered = true;\n        $el.get(0).files = files;\n        setTimeout(function () {\n          self.changeTriggered = false;\n          $el.trigger('change' + self.namespace);\n        }, self.processDelay);\n      } else {\n        self._change(e, files);\n      }\n\n      self.$dropZone.removeClass('file-highlighted');\n    },\n    _zoneDrop: function _zoneDrop(e) {\n      /** @namespace e.originalEvent.dataTransfer */\n      var self = this,\n          i,\n          $el = self.$element,\n          dt = e.originalEvent.dataTransfer,\n          files = dt.files,\n          items = dt.items,\n          folders = $h.getDragDropFolders(items);\n      e.preventDefault();\n\n      if (self.isDisabled || $h.isEmpty(files)) {\n        return;\n      }\n\n      if (!self._raise('fileDragDrop', {\n        'sourceEvent': e,\n        'files': files\n      })) {\n        return;\n      }\n\n      if (folders > 0) {\n        if (!self.isAjaxUpload) {\n          self._showFolderError(folders);\n\n          return;\n        }\n\n        files = [];\n\n        for (i = 0; i < items.length; i++) {\n          var item = items[i].webkitGetAsEntry();\n\n          if (item) {\n            self._scanDroppedItems(item, files);\n          }\n        }\n\n        setTimeout(function () {\n          self._dropFiles(e, files);\n        }, 500);\n      } else {\n        self._dropFiles(e, files);\n      }\n    },\n    _uploadClick: function _uploadClick(e) {\n      var self = this,\n          $btn = self.$container.find('.fileinput-upload'),\n          $form,\n          isEnabled = !$btn.hasClass('disabled') && $h.isEmpty($btn.attr('disabled'));\n\n      if (e && e.isDefaultPrevented()) {\n        return;\n      }\n\n      if (!self.isAjaxUpload) {\n        if (isEnabled && $btn.attr('type') !== 'submit') {\n          $form = $btn.closest('form'); // downgrade to normal form submit if possible\n\n          if ($form.length) {\n            $form.trigger('submit');\n          }\n\n          e.preventDefault();\n        }\n\n        return;\n      }\n\n      e.preventDefault();\n\n      if (isEnabled) {\n        self.upload();\n      }\n    },\n    _submitForm: function _submitForm() {\n      var self = this;\n      return self._isFileSelectionValid() && !self._abort({});\n    },\n    _clearPreview: function _clearPreview() {\n      var self = this,\n          $thumbs = self.showUploadedThumbs ? self.getFrames(':not(.file-preview-success)') : self.getFrames();\n      $thumbs.each(function () {\n        var $thumb = $(this);\n        $thumb.remove();\n      });\n\n      if (!self.getFrames().length || !self.showPreview) {\n        self._resetUpload();\n      }\n\n      self._validateDefaultPreview();\n    },\n    _initSortable: function _initSortable() {\n      var self = this,\n          $el = self.$preview,\n          settings,\n          selector = '.' + $h.SORT_CSS,\n          $cont,\n          $body = $('body'),\n          $html = $('html'),\n          rev = self.reversePreviewOrder,\n          Sortable = window.Sortable,\n          beginGrab,\n          endGrab;\n\n      if (!Sortable || $el.find(selector).length === 0) {\n        return;\n      }\n\n      $cont = $body.length ? $body : $html.length ? $html : self.$container;\n\n      beginGrab = function beginGrab() {\n        $cont.addClass('file-grabbing');\n      };\n\n      endGrab = function endGrab() {\n        $cont.removeClass('file-grabbing');\n      };\n\n      settings = {\n        handle: '.drag-handle-init',\n        dataIdAttr: 'data-fileid',\n        animation: 600,\n        draggable: selector,\n        scroll: false,\n        forceFallback: true,\n        onChoose: beginGrab,\n        onStart: beginGrab,\n        onUnchoose: endGrab,\n        onEnd: endGrab,\n        onSort: function onSort(e) {\n          var oldIndex = e.oldIndex,\n              newIndex = e.newIndex,\n              i = 0,\n              len = self.initialPreviewConfig.length,\n              exceedsLast = len > 0 && newIndex >= len,\n              $item = $(e.item),\n              $first;\n\n          if (exceedsLast) {\n            newIndex = len - 1;\n          }\n\n          self.initialPreview = $h.moveArray(self.initialPreview, oldIndex, newIndex, rev);\n          self.initialPreviewConfig = $h.moveArray(self.initialPreviewConfig, oldIndex, newIndex, rev);\n          self.previewCache.init();\n          self.getFrames('.file-preview-initial').each(function () {\n            $(this).attr('data-fileindex', $h.INIT_FLAG + i);\n            i++;\n          });\n\n          if (exceedsLast) {\n            $first = self.getFrames(':not(.file-preview-initial):first');\n\n            if ($first.length) {\n              $item.slideUp(function () {\n                $item.insertBefore($first).slideDown();\n              });\n            }\n          }\n\n          self._raise('filesorted', {\n            previewId: $item.attr('id'),\n            'oldIndex': oldIndex,\n            'newIndex': newIndex,\n            stack: self.initialPreviewConfig\n          });\n        }\n      };\n      $.extend(true, settings, self.fileActionSettings.dragSettings);\n\n      if (self.sortable) {\n        self.sortable.destroy();\n      }\n\n      self.sortable = Sortable.create($el[0], settings);\n    },\n    _setPreviewContent: function _setPreviewContent(content) {\n      var self = this;\n      $h.setHtml(self.$preview, content);\n\n      self._autoFitContent();\n    },\n    _initPreviewImageOrientations: function _initPreviewImageOrientations() {\n      var self = this,\n          i = 0,\n          canOrientImage = self.canOrientImage;\n\n      if (!self.autoOrientImageInitial && !canOrientImage) {\n        return;\n      }\n\n      self.getFrames('.file-preview-initial').each(function () {\n        var $thumb = $(this),\n            $img,\n            $zoomImg,\n            id,\n            config = self.initialPreviewConfig[i];\n        /** @namespace config.exif */\n\n        if (config && config.exif && config.exif.Orientation) {\n          id = $thumb.attr('id');\n          $img = $thumb.find('>.kv-file-content img');\n          $zoomImg = self._getZoom(id, ' >.kv-file-content img');\n\n          if (canOrientImage) {\n            $img.css('image-orientation', self.autoOrientImageInitial ? 'from-image' : 'none');\n          } else {\n            self.setImageOrientation($img, $zoomImg, config.exif.Orientation, $thumb);\n          }\n        }\n\n        i++;\n      });\n    },\n    _initPreview: function _initPreview(isInit) {\n      var self = this,\n          cap = self.initialCaption || '',\n          out;\n\n      if (!self.previewCache.count(true)) {\n        self._clearPreview();\n\n        if (isInit) {\n          self._setCaption(cap);\n        } else {\n          self._initCaption();\n        }\n\n        return;\n      }\n\n      out = self.previewCache.out();\n      cap = isInit && self.initialCaption ? self.initialCaption : out.caption;\n\n      self._setPreviewContent(out.content);\n\n      self._setInitThumbAttr();\n\n      self._setCaption(cap);\n\n      self._initSortable();\n\n      if (!$h.isEmpty(out.content)) {\n        self.$container.removeClass('file-input-new');\n      }\n\n      self._initPreviewImageOrientations();\n    },\n    _getZoomButton: function _getZoomButton(type) {\n      var self = this,\n          label = self.previewZoomButtonIcons[type],\n          css = self.previewZoomButtonClasses[type],\n          title = ' title=\"' + (self.previewZoomButtonTitles[type] || '') + '\" ',\n          tag = $h.isBs(5) ? 'bs-' : '',\n          params = title + (type === 'close' ? ' data-' + tag + 'dismiss=\"modal\" aria-hidden=\"true\"' : '');\n\n      if (type === 'fullscreen' || type === 'borderless' || type === 'toggleheader') {\n        params += ' data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\"';\n      }\n\n      return '<button type=\"button\" class=\"' + css + ' btn-kv-' + type + '\"' + params + '>' + label + '</button>';\n    },\n    _getModalContent: function _getModalContent() {\n      var self = this;\n      return self._getLayoutTemplate('modal').setTokens({\n        'rtl': self.rtl ? ' kv-rtl' : '',\n        'zoomFrameClass': self.frameClass,\n        'heading': self.msgZoomModalHeading,\n        'prev': self._getZoomButton('prev'),\n        'next': self._getZoomButton('next'),\n        'toggleheader': self._getZoomButton('toggleheader'),\n        'fullscreen': self._getZoomButton('fullscreen'),\n        'borderless': self._getZoomButton('borderless'),\n        'close': self._getZoomButton('close')\n      });\n    },\n    _listenModalEvent: function _listenModalEvent(event) {\n      var self = this,\n          $modal = self.$modal,\n          getParams = function getParams(e) {\n        return {\n          sourceEvent: e,\n          previewId: $modal.data('previewId'),\n          modal: $modal\n        };\n      };\n\n      $modal.on(event + '.bs.modal', function (e) {\n        if (e.namespace !== 'bs.modal') {\n          return;\n        }\n\n        var $btnFull = $modal.find('.btn-fullscreen'),\n            $btnBord = $modal.find('.btn-borderless');\n\n        if ($modal.data('fileinputPluginId') === self.$element.attr('id')) {\n          self._raise('filezoom' + event, getParams(e));\n        }\n\n        if (event === 'shown') {\n          $btnBord.removeClass('active').attr('aria-pressed', 'false');\n          $btnFull.removeClass('active').attr('aria-pressed', 'false');\n\n          if ($modal.hasClass('file-zoom-fullscreen')) {\n            self._maximizeZoomDialog();\n\n            if ($h.checkFullScreen()) {\n              $btnFull.addClass('active').attr('aria-pressed', 'true');\n            } else {\n              $btnBord.addClass('active').attr('aria-pressed', 'true');\n            }\n          }\n        }\n      });\n    },\n    _initZoom: function _initZoom() {\n      var self = this,\n          $dialog,\n          modalMain = self._getLayoutTemplate('modalMain'),\n          modalId = '#' + $h.MODAL_ID;\n\n      modalMain = self._setTabIndex('modal', modalMain);\n\n      if (!self.showPreview) {\n        return;\n      }\n\n      self.$modal = $(modalId);\n\n      if (!self.$modal || !self.$modal.length) {\n        $dialog = $h.createElement($h.cspBuffer.stash(modalMain)).insertAfter(self.$container);\n        self.$modal = $(modalId).insertBefore($dialog);\n        $h.cspBuffer.apply(self.$modal);\n        $dialog.remove();\n      }\n\n      $h.initModal(self.$modal);\n      self.$modal.html($h.cspBuffer.stash(self._getModalContent()));\n      $h.cspBuffer.apply(self.$modal);\n      $.each($h.MODAL_EVENTS, function (key, event) {\n        self._listenModalEvent(event);\n      });\n    },\n    _initZoomButtons: function _initZoomButtons() {\n      var self = this,\n          previewId = self.$modal.data('previewId') || '',\n          $first,\n          $last,\n          thumbs = self.getFrames().toArray(),\n          len = thumbs.length,\n          $prev = self.$modal.find('.btn-kv-prev'),\n          $next = self.$modal.find('.btn-kv-next');\n\n      if (thumbs.length < 2) {\n        $prev.hide();\n        $next.hide();\n        return;\n      } else {\n        $prev.show();\n        $next.show();\n      }\n\n      if (!len) {\n        return;\n      }\n\n      $first = $(thumbs[0]);\n      $last = $(thumbs[len - 1]);\n      $prev.removeAttr('disabled');\n      $next.removeAttr('disabled');\n\n      if ($first.length && $first.attr('id') === previewId) {\n        $prev.attr('disabled', true);\n      }\n\n      if ($last.length && $last.attr('id') === previewId) {\n        $next.attr('disabled', true);\n      }\n    },\n    _maximizeZoomDialog: function _maximizeZoomDialog() {\n      var self = this,\n          $modal = self.$modal,\n          $head = $modal.find('.modal-header:visible'),\n          $foot = $modal.find('.modal-footer:visible'),\n          $body = $modal.find('.modal-body'),\n          h = $(window).height(),\n          diff = 0;\n      $modal.addClass('file-zoom-fullscreen');\n\n      if ($head && $head.length) {\n        h -= $head.outerHeight(true);\n      }\n\n      if ($foot && $foot.length) {\n        h -= $foot.outerHeight(true);\n      }\n\n      if ($body && $body.length) {\n        diff = $body.outerHeight(true) - $body.height();\n        h -= diff;\n      }\n\n      $modal.find('.kv-zoom-body').height(h);\n    },\n    _resizeZoomDialog: function _resizeZoomDialog(fullScreen) {\n      var self = this,\n          $modal = self.$modal,\n          $btnFull = $modal.find('.btn-kv-fullscreen'),\n          $btnBord = $modal.find('.btn-kv-borderless');\n\n      if ($modal.hasClass('file-zoom-fullscreen')) {\n        $h.toggleFullScreen(false);\n\n        if (!fullScreen) {\n          if (!$btnFull.hasClass('active')) {\n            $modal.removeClass('file-zoom-fullscreen');\n            self.$modal.find('.kv-zoom-body').css('height', self.zoomModalHeight);\n          } else {\n            $btnFull.removeClass('active').attr('aria-pressed', 'false');\n          }\n        } else {\n          if (!$btnFull.hasClass('active')) {\n            $modal.removeClass('file-zoom-fullscreen');\n\n            self._resizeZoomDialog(true);\n\n            if ($btnBord.hasClass('active')) {\n              $btnBord.removeClass('active').attr('aria-pressed', 'false');\n            }\n          }\n        }\n      } else {\n        if (!fullScreen) {\n          self._maximizeZoomDialog();\n\n          return;\n        }\n\n        $h.toggleFullScreen(true);\n      }\n\n      $modal.focus();\n    },\n    _setZoomContent: function _setZoomContent($frame, animate) {\n      var self = this,\n          $content,\n          tmplt,\n          body,\n          title,\n          $body,\n          $dataEl,\n          config,\n          previewId = $frame.attr('id'),\n          $zoomPreview = self._getZoom(previewId),\n          $modal = self.$modal,\n          $tmp,\n          $btnFull = $modal.find('.btn-kv-fullscreen'),\n          $btnBord = $modal.find('.btn-kv-borderless'),\n          cap,\n          size,\n          $btnTogh = $modal.find('.btn-kv-toggleheader');\n\n      tmplt = $zoomPreview.attr('data-template') || 'generic';\n      $content = $zoomPreview.find('.kv-file-content');\n      body = $content.length ? $content.html() : '';\n      cap = $frame.data('caption') || '';\n      size = $frame.data('size') || '';\n      title = cap + ' ' + size;\n      $modal.find('.kv-zoom-title').attr('title', $('<div/>').html(title).text()).html(title);\n      $body = $modal.find('.kv-zoom-body');\n      $modal.removeClass('kv-single-content');\n\n      if (animate) {\n        $tmp = $body.addClass('file-thumb-loading').clone().insertAfter($body);\n        $h.setHtml($body, body).hide();\n        $tmp.fadeOut('fast', function () {\n          $body.fadeIn('fast', function () {\n            $body.removeClass('file-thumb-loading');\n          });\n          $tmp.remove();\n        });\n      } else {\n        $h.setHtml($body, body);\n      }\n\n      config = self.previewZoomSettings[tmplt];\n\n      if (config) {\n        $dataEl = $body.find('.kv-preview-data');\n        $h.addCss($dataEl, 'file-zoom-detail');\n        $.each(config, function (key, value) {\n          $dataEl.css(key, value);\n\n          if ($dataEl.attr('width') && key === 'width' || $dataEl.attr('height') && key === 'height') {\n            $dataEl.removeAttr(key);\n          }\n        });\n      }\n\n      $modal.data('previewId', previewId);\n\n      self._handler($modal.find('.btn-kv-prev'), 'click', function () {\n        self._zoomSlideShow('prev', previewId);\n      });\n\n      self._handler($modal.find('.btn-kv-next'), 'click', function () {\n        self._zoomSlideShow('next', previewId);\n      });\n\n      self._handler($btnFull, 'click', function () {\n        self._resizeZoomDialog(true);\n      });\n\n      self._handler($btnBord, 'click', function () {\n        self._resizeZoomDialog(false);\n      });\n\n      self._handler($btnTogh, 'click', function () {\n        var $header = $modal.find('.modal-header'),\n            $floatBar = $modal.find('.modal-body .floating-buttons'),\n            ht,\n            $actions = $header.find('.kv-zoom-actions'),\n            resize = function resize(height) {\n          var $body = self.$modal.find('.kv-zoom-body'),\n              h = self.zoomModalHeight;\n\n          if ($modal.hasClass('file-zoom-fullscreen')) {\n            h = $body.outerHeight(true);\n\n            if (!height) {\n              h = h - $header.outerHeight(true);\n            }\n          }\n\n          $body.css('height', height ? h + height : h);\n        };\n\n        if ($header.is(':visible')) {\n          ht = $header.outerHeight(true);\n          $header.slideUp('slow', function () {\n            $actions.find('.btn').appendTo($floatBar);\n            resize(ht);\n          });\n        } else {\n          $floatBar.find('.btn').appendTo($actions);\n          $header.slideDown('slow', function () {\n            resize();\n          });\n        }\n\n        $modal.focus();\n      });\n\n      self._handler($modal, 'keydown', function (e) {\n        var key = e.which || e.keyCode,\n            $prev = $(this).find('.btn-kv-prev'),\n            $next = $(this).find('.btn-kv-next'),\n            vId = $(this).data('previewId'),\n            vPrevKey = self.rtl ? 39 : 37,\n            vNextKey = self.rtl ? 37 : 39;\n\n        if (key === vPrevKey && $prev.length && !$prev.attr('disabled')) {\n          self._zoomSlideShow('prev', vId);\n        }\n\n        if (key === vNextKey && $next.length && !$next.attr('disabled')) {\n          self._zoomSlideShow('next', vId);\n        }\n      });\n    },\n    _showModal: function _showModal($frame) {\n      var self = this,\n          $modal = self.$modal,\n          bs5Modal;\n\n      if (!$frame || !$frame.length) {\n        return;\n      }\n\n      $h.initModal($modal);\n      $h.setHtml($modal, self._getModalContent());\n\n      self._setZoomContent($frame);\n\n      $modal.data({\n        backdrop: false\n      }); //$modal.data('fileinputPluginId', self.$element.attr('id'));\n\n      $modal.modal('show');\n\n      self._initZoomButtons();\n    },\n    _zoomPreview: function _zoomPreview($btn) {\n      var self = this,\n          $frame;\n\n      if (!$btn.length) {\n        throw 'Cannot zoom to detailed preview!';\n      }\n\n      $frame = $btn.closest($h.FRAMES);\n\n      self._showModal($frame);\n    },\n    _zoomSlideShow: function _zoomSlideShow(dir, previewId) {\n      var self = this,\n          $btn = self.$modal.find('.kv-zoom-actions .btn-kv-' + dir),\n          $targFrame,\n          i,\n          $thumb,\n          thumbsData = self.getFrames().toArray(),\n          thumbs = [],\n          len = thumbsData.length,\n          out;\n\n      if ($btn.attr('disabled')) {\n        return;\n      }\n\n      for (i = 0; i < len; i++) {\n        $thumb = $(thumbsData[i]);\n\n        if ($thumb && $thumb.length && $thumb.find('.kv-file-zoom:visible').length) {\n          thumbs.push(thumbsData[i]);\n        }\n      }\n\n      len = thumbs.length;\n\n      for (i = 0; i < len; i++) {\n        if ($(thumbs[i]).attr('id') === previewId) {\n          out = dir === 'prev' ? i - 1 : i + 1;\n          break;\n        }\n      }\n\n      if (out < 0 || out >= len || !thumbs[out]) {\n        return;\n      }\n\n      $targFrame = $(thumbs[out]);\n\n      if ($targFrame.length) {\n        self._setZoomContent($targFrame, true);\n      }\n\n      self._initZoomButtons();\n\n      self._raise('filezoom' + dir, {\n        'previewId': previewId,\n        modal: self.$modal\n      });\n    },\n    _initZoomButton: function _initZoomButton() {\n      var self = this;\n      self.$preview.find('.kv-file-zoom').each(function () {\n        var $el = $(this);\n\n        self._handler($el, 'click', function () {\n          self._zoomPreview($el);\n        });\n      });\n    },\n    _inputFileCount: function _inputFileCount() {\n      return this.$element[0].files.length;\n    },\n    _refreshPreview: function _refreshPreview() {\n      var self = this,\n          files;\n\n      if (!self._inputFileCount() && !self.isAjaxUpload || !self.showPreview || !self.isPreviewable) {\n        return;\n      }\n\n      if (self.isAjaxUpload) {\n        if (self.fileManager.count() > 0) {\n          files = $.extend(true, {}, self.getFileList());\n          self.fileManager.clear();\n\n          self._clearFileInput();\n        } else {\n          files = self.$element[0].files;\n        }\n      } else {\n        files = self.$element[0].files;\n      }\n\n      if (files && files.length) {\n        self.readFiles(files);\n\n        self._setFileDropZoneTitle();\n      }\n    },\n    _clearObjects: function _clearObjects($el) {\n      $el.find('video audio').each(function () {\n        this.pause();\n        $(this).remove();\n      });\n      $el.find('img object div').each(function () {\n        $(this).remove();\n      });\n    },\n    _clearFileInput: function _clearFileInput() {\n      var self = this,\n          $el = self.$element,\n          $srcFrm,\n          $tmpFrm,\n          $tmpEl;\n\n      if (!self._inputFileCount()) {\n        return;\n      }\n\n      $srcFrm = $el.closest('form');\n      $tmpFrm = $(document.createElement('form'));\n      $tmpEl = $(document.createElement('div'));\n      $el.before($tmpEl);\n\n      if ($srcFrm.length) {\n        $srcFrm.after($tmpFrm);\n      } else {\n        $tmpEl.after($tmpFrm);\n      }\n\n      $tmpFrm.append($el).trigger('reset');\n      $tmpEl.before($el).remove();\n      $tmpFrm.remove();\n    },\n    _resetUpload: function _resetUpload() {\n      var self = this;\n      self.uploadStartTime = $h.now();\n      self.uploadCache = [];\n      self.$btnUpload.removeAttr('disabled');\n\n      self._setProgress(0);\n\n      self._hideProgress();\n\n      self._resetErrors(false);\n\n      self._initAjax();\n\n      self.fileManager.clearImages();\n\n      self._resetCanvas();\n\n      if (self.overwriteInitial) {\n        self.initialPreview = [];\n        self.initialPreviewConfig = [];\n        self.initialPreviewThumbTags = [];\n        self.previewCache.data = {\n          content: [],\n          config: [],\n          tags: []\n        };\n      }\n    },\n    _resetCanvas: function _resetCanvas() {\n      var self = this;\n\n      if (self.imageCanvas && self.imageCanvasContext) {\n        self.imageCanvasContext.clearRect(0, 0, self.imageCanvas.width, self.imageCanvas.height);\n      }\n    },\n    _hasInitialPreview: function _hasInitialPreview() {\n      var self = this;\n      return !self.overwriteInitial && self.previewCache.count(true);\n    },\n    _resetPreview: function _resetPreview() {\n      var self = this,\n          out,\n          cap,\n          $div,\n          hasSuc = self.showUploadedThumbs,\n          hasErr = !self.removeFromPreviewOnError,\n          includeProcessed = (hasSuc || hasErr) && self.isDuplicateError;\n\n      if (self.previewCache.count(true)) {\n        out = self.previewCache.out();\n\n        if (includeProcessed) {\n          $div = $h.createElement('').insertAfter(self.$container);\n          self.getFrames().each(function () {\n            var $thumb = $(this);\n\n            if (hasSuc && $thumb.hasClass('file-preview-success') || hasErr && $thumb.hasClass('file-preview-error')) {\n              $div.append($thumb);\n            }\n          });\n        }\n\n        self._setPreviewContent(out.content);\n\n        self._setInitThumbAttr();\n\n        cap = self.initialCaption ? self.initialCaption : out.caption;\n\n        self._setCaption(cap);\n\n        if (includeProcessed) {\n          $div.contents().appendTo(self.$preview);\n          $div.remove();\n        }\n      } else {\n        self._clearPreview();\n\n        self._initCaption();\n      }\n\n      if (self.showPreview) {\n        self._initZoom();\n\n        self._initSortable();\n      }\n\n      self.isDuplicateError = false;\n    },\n    _clearDefaultPreview: function _clearDefaultPreview() {\n      var self = this;\n      self.$preview.find('.file-default-preview').remove();\n    },\n    _validateDefaultPreview: function _validateDefaultPreview() {\n      var self = this;\n\n      if (!self.showPreview || $h.isEmpty(self.defaultPreviewContent)) {\n        return;\n      }\n\n      self._setPreviewContent('<div class=\"file-default-preview\">' + self.defaultPreviewContent + '</div>');\n\n      self.$container.removeClass('file-input-new');\n\n      self._initClickable();\n    },\n    _resetPreviewThumbs: function _resetPreviewThumbs(isAjax) {\n      var self = this,\n          out;\n\n      if (isAjax) {\n        self._clearPreview();\n\n        self.clearFileStack();\n        return;\n      }\n\n      if (self._hasInitialPreview()) {\n        out = self.previewCache.out();\n\n        self._setPreviewContent(out.content);\n\n        self._setInitThumbAttr();\n\n        self._setCaption(out.caption);\n\n        self._initPreviewActions();\n      } else {\n        self._clearPreview();\n      }\n    },\n    _getLayoutTemplate: function _getLayoutTemplate(t) {\n      var self = this,\n          template = self.layoutTemplates[t];\n\n      if ($h.isEmpty(self.customLayoutTags)) {\n        return template;\n      }\n\n      return $h.replaceTags(template, self.customLayoutTags);\n    },\n    _getPreviewTemplate: function _getPreviewTemplate(t) {\n      var self = this,\n          templates = self.previewTemplates,\n          template = templates[t] || templates.other;\n\n      if ($h.isEmpty(self.customPreviewTags)) {\n        return template;\n      }\n\n      return $h.replaceTags(template, self.customPreviewTags);\n    },\n    _getOutData: function _getOutData(formdata, jqXHR, responseData, filesData) {\n      var self = this;\n      jqXHR = jqXHR || {};\n      responseData = responseData || {};\n      filesData = filesData || self.fileManager.list();\n      return {\n        formdata: formdata,\n        files: filesData,\n        filenames: self.filenames,\n        filescount: self.getFilesCount(),\n        extra: self._getExtraData(),\n        response: responseData,\n        reader: self.reader,\n        jqXHR: jqXHR\n      };\n    },\n    _getMsgSelected: function _getMsgSelected(n, processing) {\n      var self = this,\n          strFiles = n === 1 ? self.fileSingle : self.filePlural;\n      return n > 0 ? self.msgSelected.replace('{n}', n).replace('{files}', strFiles) : processing ? self.msgProcessing : self.msgNoFilesSelected;\n    },\n    _getFrame: function _getFrame(id, skipWarning) {\n      var self = this,\n          $frame = $h.getFrameElement(self.$preview, id);\n\n      if (self.showPreview && !skipWarning && !$frame.length) {\n        self._log($h.logMessages.invalidThumb, {\n          id: id\n        });\n      }\n\n      return $frame;\n    },\n    _getZoom: function _getZoom(id, selector) {\n      var self = this,\n          $frame = $h.getZoomElement(self.$preview, id, selector);\n\n      if (self.showPreview && !$frame.length) {\n        self._log($h.logMessages.invalidThumb, {\n          id: id\n        });\n      }\n\n      return $frame;\n    },\n    _getThumbs: function _getThumbs(css) {\n      css = css || '';\n      return this.getFrames(':not(.file-preview-initial)' + css);\n    },\n    _getThumbId: function _getThumbId(fileId) {\n      var self = this;\n      return self.previewInitId + '-' + fileId;\n    },\n    _getExtraData: function _getExtraData(fileId, index) {\n      var self = this,\n          data = self.uploadExtraData;\n\n      if (typeof self.uploadExtraData === 'function') {\n        data = self.uploadExtraData(fileId, index);\n      }\n\n      return data;\n    },\n    _initXhr: function _initXhr(xhrobj, fileId) {\n      var self = this,\n          fm = self.fileManager,\n          func = function func(event) {\n        var pct = 0,\n            total = event.total,\n            loaded = event.loaded || event.position,\n            stats = fm.getUploadStats(fileId, loaded, total);\n        /** @namespace event.lengthComputable */\n\n        if (event.lengthComputable && !self.enableResumableUpload) {\n          pct = $h.round(loaded / total * 100);\n        }\n\n        if (fileId) {\n          self._setFileUploadStats(fileId, pct, stats);\n        } else {\n          self._setProgress(pct, null, null, self._getStats(stats));\n        }\n\n        self._raise('fileajaxprogress', [stats]);\n      };\n\n      if (xhrobj.upload) {\n        if (self.progressDelay) {\n          func = $h.debounce(func, self.progressDelay);\n        }\n\n        xhrobj.upload.addEventListener('progress', func, false);\n      }\n\n      return xhrobj;\n    },\n    _initAjaxSettings: function _initAjaxSettings() {\n      var self = this;\n      self._ajaxSettings = $.extend(true, {}, self.ajaxSettings);\n      self._ajaxDeleteSettings = $.extend(true, {}, self.ajaxDeleteSettings);\n    },\n    _mergeAjaxCallback: function _mergeAjaxCallback(funcName, srcFunc, type) {\n      var self = this,\n          settings = self._ajaxSettings,\n          flag = self.mergeAjaxCallbacks,\n          targFunc;\n\n      if (type === 'delete') {\n        settings = self._ajaxDeleteSettings;\n        flag = self.mergeAjaxDeleteCallbacks;\n      }\n\n      targFunc = settings[funcName];\n\n      if (flag && typeof targFunc === 'function') {\n        if (flag === 'before') {\n          settings[funcName] = function () {\n            targFunc.apply(this, arguments);\n            srcFunc.apply(this, arguments);\n          };\n        } else {\n          settings[funcName] = function () {\n            srcFunc.apply(this, arguments);\n            targFunc.apply(this, arguments);\n          };\n        }\n      } else {\n        settings[funcName] = srcFunc;\n      }\n    },\n    _ajaxSubmit: function _ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, formdata, fileId, index, vUrl) {\n      var self = this,\n          settings,\n          defaults,\n          data,\n          ajaxTask;\n\n      if (!self._raise('filepreajax', [formdata, fileId, index])) {\n        return;\n      }\n\n      formdata.append('initialPreview', JSON.stringify(self.initialPreview));\n      formdata.append('initialPreviewConfig', JSON.stringify(self.initialPreviewConfig));\n      formdata.append('initialPreviewThumbTags', JSON.stringify(self.initialPreviewThumbTags));\n\n      self._initAjaxSettings();\n\n      self._mergeAjaxCallback('beforeSend', fnBefore);\n\n      self._mergeAjaxCallback('success', fnSuccess);\n\n      self._mergeAjaxCallback('complete', fnComplete);\n\n      self._mergeAjaxCallback('error', fnError);\n\n      vUrl = vUrl || self.uploadUrlThumb || self.uploadUrl;\n\n      if (typeof vUrl === 'function') {\n        vUrl = vUrl();\n      }\n\n      data = self._getExtraData(fileId, index) || {};\n\n      if (_typeof(data) === 'object') {\n        $.each(data, function (key, value) {\n          formdata.append(key, value);\n        });\n      }\n\n      defaults = {\n        xhr: function xhr() {\n          var xhrobj = $.ajaxSettings.xhr();\n          return self._initXhr(xhrobj, fileId);\n        },\n        url: self._encodeURI(vUrl),\n        type: 'POST',\n        dataType: 'json',\n        data: formdata,\n        cache: false,\n        processData: false,\n        contentType: false\n      };\n      settings = $.extend(true, {}, defaults, self._ajaxSettings);\n      ajaxTask = self.taskManager.addTask(fileId + '-' + index, function () {\n        var self = this.self,\n            config,\n            xhr;\n        config = self.ajaxQueue.shift();\n        xhr = $.ajax(config);\n        self.ajaxRequests.push(xhr);\n      });\n      self.ajaxQueue.push(settings);\n      ajaxTask.runWithContext({\n        self: self\n      });\n    },\n    _mergeArray: function _mergeArray(prop, content) {\n      var self = this,\n          arr1 = $h.cleanArray(self[prop]),\n          arr2 = $h.cleanArray(content);\n      self[prop] = arr1.concat(arr2);\n    },\n    _initUploadSuccess: function _initUploadSuccess(out, $thumb, allFiles) {\n      var self = this,\n          append,\n          data,\n          index,\n          $div,\n          $newCache,\n          content,\n          config,\n          tags,\n          id,\n          i;\n\n      if (!self.showPreview || _typeof(out) !== 'object' || $.isEmptyObject(out)) {\n        self._resetCaption();\n\n        return;\n      }\n\n      if (out.initialPreview !== undefined && out.initialPreview.length > 0) {\n        self.hasInitData = true;\n        content = out.initialPreview || [];\n        config = out.initialPreviewConfig || [];\n        tags = out.initialPreviewThumbTags || [];\n        append = out.append === undefined || out.append;\n\n        if (content.length > 0 && !$h.isArray(content)) {\n          content = content.split(self.initialPreviewDelimiter);\n        }\n\n        if (content.length) {\n          self._mergeArray('initialPreview', content);\n\n          self._mergeArray('initialPreviewConfig', config);\n\n          self._mergeArray('initialPreviewThumbTags', tags);\n        }\n\n        if ($thumb !== undefined) {\n          if (!allFiles) {\n            index = self.previewCache.add(content[0], config[0], tags[0], append);\n            data = self.previewCache.get(index, false);\n            $div = $h.createElement(data).hide().appendTo($thumb);\n            $newCache = $div.find('.kv-zoom-cache');\n\n            if ($newCache && $newCache.length) {\n              $newCache.appendTo($thumb);\n            }\n\n            $thumb.fadeOut('slow', function () {\n              var $newThumb = $div.find('.file-preview-frame');\n\n              if ($newThumb && $newThumb.length) {\n                $newThumb.insertBefore($thumb).fadeIn('slow').css('display:inline-block');\n              }\n\n              self._initPreviewActions();\n\n              self._clearFileInput();\n\n              $thumb.remove();\n              $div.remove();\n\n              self._initSortable();\n            });\n          } else {\n            id = $thumb.attr('id');\n            i = self._getUploadCacheIndex(id);\n\n            if (i !== null) {\n              self.uploadCache[i] = {\n                id: id,\n                content: content[0],\n                config: config[0] || [],\n                tags: tags[0] || [],\n                append: append\n              };\n            }\n          }\n        } else {\n          self.previewCache.set(content, config, tags, append);\n\n          self._initPreview();\n\n          self._initPreviewActions();\n        }\n      }\n\n      self._resetCaption();\n    },\n    _getUploadCacheIndex: function _getUploadCacheIndex(id) {\n      var self = this,\n          i,\n          len = self.uploadCache.length,\n          config;\n\n      for (i = 0; i < len; i++) {\n        config = self.uploadCache[i];\n\n        if (config.id === id) {\n          return i;\n        }\n      }\n\n      return null;\n    },\n    _initSuccessThumbs: function _initSuccessThumbs() {\n      var self = this;\n\n      if (!self.showPreview) {\n        return;\n      }\n\n      setTimeout(function () {\n        self._getThumbs($h.FRAMES + '.file-preview-success').each(function () {\n          var $thumb = $(this),\n              $remove = $thumb.find('.kv-file-remove');\n          $remove.removeAttr('disabled');\n\n          self._handler($remove, 'click', function () {\n            var id = $thumb.attr('id'),\n                out = self._raise('filesuccessremove', [id, $thumb.attr('data-fileindex')]);\n\n            $h.cleanMemory($thumb);\n\n            if (out === false) {\n              return;\n            }\n\n            self.$caption.attr('title', '');\n            $thumb.fadeOut('slow', function () {\n              var fm = self.fileManager;\n              $thumb.remove();\n\n              if (!self.getFrames().length) {\n                self.reset();\n              }\n            });\n          });\n        });\n      }, self.processDelay);\n    },\n    _updateInitialPreview: function _updateInitialPreview() {\n      var self = this,\n          u = self.uploadCache;\n\n      if (self.showPreview) {\n        $.each(u, function (key, setting) {\n          self.previewCache.add(setting.content, setting.config, setting.tags, setting.append);\n        });\n\n        if (self.hasInitData) {\n          self._initPreview();\n\n          self._initPreviewActions();\n        }\n      }\n    },\n    _getThumbFileId: function _getThumbFileId($thumb) {\n      var self = this;\n\n      if (self.showPreview && $thumb !== undefined) {\n        return $thumb.attr('data-fileid');\n      }\n\n      return null;\n    },\n    _getThumbFile: function _getThumbFile($thumb) {\n      var self = this,\n          id = self._getThumbFileId($thumb);\n\n      return id ? self.fileManager.getFile(id) : null;\n    },\n    _uploadSingle: function _uploadSingle(i, id, isBatch) {\n      var self = this,\n          fm = self.fileManager,\n          count = fm.count(),\n          formdata = new FormData(),\n          outData,\n          previewId = self._getThumbId(id),\n          $thumb,\n          chkComplete,\n          $btnUpload,\n          $btnDelete,\n          hasPostData = count > 0 || !$.isEmptyObject(self.uploadExtraData),\n          uploadFailed,\n          $prog,\n          fnBefore,\n          errMsg,\n          fnSuccess,\n          fnComplete,\n          fnError,\n          updateUploadLog,\n          op = self.ajaxOperations.uploadThumb,\n          fileObj = fm.getFile(id),\n          params = {\n        id: previewId,\n        index: i,\n        fileId: id\n      },\n          fileName = self.fileManager.getFileName(id, true);\n\n      if (self.enableResumableUpload) {\n        // not enabled for resumable uploads\n        return;\n      }\n\n      if (self.showPreview) {\n        $thumb = fm.getThumb(id);\n        $prog = $thumb.find('.file-thumb-progress');\n        $btnUpload = $thumb.find('.kv-file-upload');\n        $btnDelete = $thumb.find('.kv-file-remove');\n        $prog.show();\n      }\n\n      if (count === 0 || !hasPostData || self.showPreview && $btnUpload && $btnUpload.hasClass('disabled') || self._abort(params)) {\n        return;\n      }\n\n      updateUploadLog = function updateUploadLog() {\n        if (!uploadFailed) {\n          fm.removeFile(id);\n        } else {\n          fm.errors.push(id);\n        }\n\n        fm.setProcessed(id);\n\n        if (fm.isProcessed()) {\n          self.fileBatchCompleted = true;\n          chkComplete();\n        }\n      };\n\n      chkComplete = function chkComplete() {\n        var $initThumbs;\n\n        if (!self.fileBatchCompleted) {\n          return;\n        }\n\n        setTimeout(function () {\n          var triggerReset = fm.count() === 0,\n              errCount = fm.errors.length;\n\n          self._updateInitialPreview();\n\n          self.unlock(triggerReset);\n\n          if (triggerReset) {\n            self._clearFileInput();\n          }\n\n          $initThumbs = self.$preview.find('.file-preview-initial');\n\n          if (self.uploadAsync && $initThumbs.length) {\n            $h.addCss($initThumbs, $h.SORT_CSS);\n\n            self._initSortable();\n          }\n\n          self._raise('filebatchuploadcomplete', [fm.stack, self._getExtraData()]);\n\n          if (!self.retryErrorUploads || errCount === 0) {\n            fm.clear();\n          }\n\n          self._setProgress(101);\n\n          self.ajaxAborted = false;\n        }, self.processDelay);\n      };\n\n      fnBefore = function fnBefore(jqXHR) {\n        outData = self._getOutData(formdata, jqXHR);\n        fm.initStats(id);\n        self.fileBatchCompleted = false;\n\n        if (!isBatch) {\n          self.ajaxAborted = false;\n        }\n\n        if (self.showPreview) {\n          if (!$thumb.hasClass('file-preview-success')) {\n            self._setThumbStatus($thumb, 'Loading');\n\n            $h.addCss($thumb, 'file-uploading');\n          }\n\n          $btnUpload.attr('disabled', true);\n          $btnDelete.attr('disabled', true);\n        }\n\n        if (!isBatch) {\n          self.lock();\n        }\n\n        if (fm.errors.indexOf(id) !== -1) {\n          delete fm.errors[id];\n        }\n\n        self._raise('filepreupload', [outData, previewId, i, self._getThumbFileId($thumb)]);\n\n        $.extend(true, params, outData);\n\n        if (self._abort(params)) {\n          jqXHR.abort();\n\n          if (!isBatch) {\n            self._setThumbStatus($thumb, 'New');\n\n            $thumb.removeClass('file-uploading');\n            $btnUpload.removeAttr('disabled');\n            $btnDelete.removeAttr('disabled');\n            self.unlock();\n          }\n\n          self._setProgressCancelled();\n        }\n      };\n\n      fnSuccess = function fnSuccess(data, textStatus, jqXHR) {\n        var pid = self.showPreview && $thumb.attr('id') ? $thumb.attr('id') : previewId;\n        outData = self._getOutData(formdata, jqXHR, data);\n        $.extend(true, params, outData);\n        setTimeout(function () {\n          if ($h.isEmpty(data) || $h.isEmpty(data.error)) {\n            if (self.showPreview) {\n              self._setThumbStatus($thumb, 'Success');\n\n              $btnUpload.hide();\n\n              self._initUploadSuccess(data, $thumb, isBatch);\n\n              self._setProgress(101, $prog);\n            }\n\n            self._raise('fileuploaded', [outData, pid, i, self._getThumbFileId($thumb)]);\n\n            if (!isBatch) {\n              self.fileManager.remove($thumb);\n            } else {\n              updateUploadLog();\n            }\n          } else {\n            uploadFailed = true;\n            errMsg = self._parseError(op, jqXHR, self.msgUploadError, self.fileManager.getFileName(id));\n\n            self._showFileError(errMsg, params);\n\n            self._setPreviewError($thumb, true);\n\n            if (!self.retryErrorUploads) {\n              $btnUpload.hide();\n            }\n\n            if (isBatch) {\n              updateUploadLog();\n            }\n\n            self._setProgress(101, self._getFrame(pid).find('.file-thumb-progress'), self.msgUploadError);\n          }\n        }, self.processDelay);\n      };\n\n      fnComplete = function fnComplete() {\n        if (self.showPreview) {\n          $btnUpload.removeAttr('disabled');\n          $btnDelete.removeAttr('disabled');\n          $thumb.removeClass('file-uploading');\n        }\n\n        if (!isBatch) {\n          self.unlock(false);\n\n          self._clearFileInput();\n        } else {\n          chkComplete();\n        }\n\n        self._initSuccessThumbs();\n      };\n\n      fnError = function fnError(jqXHR, textStatus, errorThrown) {\n        errMsg = self._parseError(op, jqXHR, errorThrown, self.fileManager.getFileName(id));\n        uploadFailed = true;\n        setTimeout(function () {\n          var $prog;\n\n          if (isBatch) {\n            updateUploadLog();\n          }\n\n          self.fileManager.setProgress(id, 100);\n\n          self._setPreviewError($thumb, true);\n\n          if (!self.retryErrorUploads) {\n            $btnUpload.hide();\n          }\n\n          $.extend(true, params, self._getOutData(formdata, jqXHR));\n\n          self._setProgress(101, self.$progress, self.msgAjaxProgressError.replace('{operation}', op));\n\n          $prog = self.showPreview && $thumb ? $thumb.find('.file-thumb-progress') : '';\n\n          self._setProgress(101, $prog, self.msgUploadError);\n\n          self._showFileError(errMsg, params);\n        }, self.processDelay);\n      };\n\n      self._setFileData(formdata, fileObj.file, fileName, id);\n\n      self._setUploadData(formdata, {\n        fileId: id\n      });\n\n      self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, formdata, id, i);\n    },\n    _setFileData: function _setFileData(formdata, file, fileName, fileId) {\n      var self = this,\n          preProcess = self.preProcessUpload;\n\n      if (preProcess && typeof preProcess === 'function') {\n        formdata.append(self.uploadFileAttr, preProcess(fileId, file));\n      } else {\n        formdata.append(self.uploadFileAttr, file, fileName);\n      }\n    },\n    _uploadBatch: function _uploadBatch() {\n      var self = this,\n          fm = self.fileManager,\n          total = fm.total(),\n          params = {},\n          fnBefore,\n          fnSuccess,\n          fnError,\n          fnComplete,\n          hasPostData = total > 0 || !$.isEmptyObject(self.uploadExtraData),\n          errMsg,\n          setAllUploaded,\n          formdata = new FormData(),\n          op = self.ajaxOperations.uploadBatch;\n\n      if (total === 0 || !hasPostData || self._abort(params)) {\n        return;\n      }\n\n      setAllUploaded = function setAllUploaded() {\n        self.fileManager.clear();\n\n        self._clearFileInput();\n      };\n\n      fnBefore = function fnBefore(jqXHR) {\n        self.lock();\n        fm.initStats();\n\n        var outData = self._getOutData(formdata, jqXHR);\n\n        self.ajaxAborted = false;\n\n        if (self.showPreview) {\n          self._getThumbs().each(function () {\n            var $thumb = $(this),\n                $btnUpload = $thumb.find('.kv-file-upload'),\n                $btnDelete = $thumb.find('.kv-file-remove');\n\n            if (!$thumb.hasClass('file-preview-success')) {\n              self._setThumbStatus($thumb, 'Loading');\n\n              $h.addCss($thumb, 'file-uploading');\n            }\n\n            $btnUpload.attr('disabled', true);\n            $btnDelete.attr('disabled', true);\n          });\n        }\n\n        self._raise('filebatchpreupload', [outData]);\n\n        if (self._abort(outData)) {\n          jqXHR.abort();\n\n          self._getThumbs().each(function () {\n            var $thumb = $(this),\n                $btnUpload = $thumb.find('.kv-file-upload'),\n                $btnDelete = $thumb.find('.kv-file-remove');\n\n            if ($thumb.hasClass('file-preview-loading')) {\n              self._setThumbStatus($thumb, 'New');\n\n              $thumb.removeClass('file-uploading');\n            }\n\n            $btnUpload.removeAttr('disabled');\n            $btnDelete.removeAttr('disabled');\n          });\n\n          self._setProgressCancelled();\n        }\n      };\n\n      fnSuccess = function fnSuccess(data, textStatus, jqXHR) {\n        /** @namespace data.errorkeys */\n        var outData = self._getOutData(formdata, jqXHR, data),\n            key = 0,\n            $thumbs = self._getThumbs(':not(.file-preview-success)'),\n            keys = $h.isEmpty(data) || $h.isEmpty(data.errorkeys) ? [] : data.errorkeys;\n\n        if ($h.isEmpty(data) || $h.isEmpty(data.error)) {\n          self._raise('filebatchuploadsuccess', [outData]);\n\n          setAllUploaded();\n\n          if (self.showPreview) {\n            $thumbs.each(function () {\n              var $thumb = $(this);\n\n              self._setThumbStatus($thumb, 'Success');\n\n              $thumb.removeClass('file-uploading');\n              $thumb.find('.kv-file-upload').hide().removeAttr('disabled');\n            });\n\n            self._initUploadSuccess(data);\n          } else {\n            self.reset();\n          }\n\n          self._setProgress(101);\n        } else {\n          if (self.showPreview) {\n            $thumbs.each(function () {\n              var $thumb = $(this);\n              $thumb.removeClass('file-uploading');\n              $thumb.find('.kv-file-upload').removeAttr('disabled');\n              $thumb.find('.kv-file-remove').removeAttr('disabled');\n\n              if (keys.length === 0 || $.inArray(key, keys) !== -1) {\n                self._setPreviewError($thumb, true);\n\n                if (!self.retryErrorUploads) {\n                  $thumb.find('.kv-file-upload').hide();\n                  self.fileManager.remove($thumb);\n                }\n              } else {\n                $thumb.find('.kv-file-upload').hide();\n\n                self._setThumbStatus($thumb, 'Success');\n\n                self.fileManager.remove($thumb);\n              }\n\n              if (!$thumb.hasClass('file-preview-error') || self.retryErrorUploads) {\n                key++;\n              }\n            });\n\n            self._initUploadSuccess(data);\n          }\n\n          errMsg = self._parseError(op, jqXHR, self.msgUploadError);\n\n          self._showFileError(errMsg, outData, 'filebatchuploaderror');\n\n          self._setProgress(101, self.$progress, self.msgUploadError);\n        }\n      };\n\n      fnComplete = function fnComplete() {\n        self.unlock();\n\n        self._initSuccessThumbs();\n\n        self._clearFileInput();\n\n        self._raise('filebatchuploadcomplete', [self.fileManager.stack, self._getExtraData()]);\n      };\n\n      fnError = function fnError(jqXHR, textStatus, errorThrown) {\n        var outData = self._getOutData(formdata, jqXHR);\n\n        errMsg = self._parseError(op, jqXHR, errorThrown);\n\n        self._showFileError(errMsg, outData, 'filebatchuploaderror');\n\n        self.uploadFileCount = total - 1;\n\n        if (!self.showPreview) {\n          return;\n        }\n\n        self._getThumbs().each(function () {\n          var $thumb = $(this);\n          $thumb.removeClass('file-uploading');\n\n          if (self._getThumbFile($thumb)) {\n            self._setPreviewError($thumb);\n          }\n        });\n\n        self._getThumbs().removeClass('file-uploading');\n\n        self._getThumbs(' .kv-file-upload').removeAttr('disabled');\n\n        self._getThumbs(' .kv-file-delete').removeAttr('disabled');\n\n        self._setProgress(101, self.$progress, self.msgAjaxProgressError.replace('{operation}', op));\n      };\n\n      var ctr = 0;\n      $.each(self.fileManager.stack, function (key, data) {\n        if (!$h.isEmpty(data.file)) {\n          self._setFileData(formdata, data.file, data.nameFmt || 'untitled_' + ctr, key);\n        }\n\n        ctr++;\n      });\n\n      self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, formdata);\n    },\n    _uploadExtraOnly: function _uploadExtraOnly() {\n      var self = this,\n          params = {},\n          fnBefore,\n          fnSuccess,\n          fnComplete,\n          fnError,\n          formdata = new FormData(),\n          errMsg,\n          op = self.ajaxOperations.uploadExtra;\n\n      if (self._abort(params)) {\n        return;\n      }\n\n      fnBefore = function fnBefore(jqXHR) {\n        self.lock();\n\n        var outData = self._getOutData(formdata, jqXHR);\n\n        self._raise('filebatchpreupload', [outData]);\n\n        self._setProgress(50);\n\n        params.data = outData;\n        params.xhr = jqXHR;\n\n        if (self._abort(params)) {\n          jqXHR.abort();\n\n          self._setProgressCancelled();\n        }\n      };\n\n      fnSuccess = function fnSuccess(data, textStatus, jqXHR) {\n        var outData = self._getOutData(formdata, jqXHR, data);\n\n        if ($h.isEmpty(data) || $h.isEmpty(data.error)) {\n          self._raise('filebatchuploadsuccess', [outData]);\n\n          self._clearFileInput();\n\n          self._initUploadSuccess(data);\n\n          self._setProgress(101);\n        } else {\n          errMsg = self._parseError(op, jqXHR, self.msgUploadError);\n\n          self._showFileError(errMsg, outData, 'filebatchuploaderror');\n        }\n      };\n\n      fnComplete = function fnComplete() {\n        self.unlock();\n\n        self._clearFileInput();\n\n        self._raise('filebatchuploadcomplete', [self.fileManager.stack, self._getExtraData()]);\n      };\n\n      fnError = function fnError(jqXHR, textStatus, errorThrown) {\n        var outData = self._getOutData(formdata, jqXHR);\n\n        errMsg = self._parseError(op, jqXHR, errorThrown);\n        params.data = outData;\n\n        self._showFileError(errMsg, outData, 'filebatchuploaderror');\n\n        self._setProgress(101, self.$progress, self.msgAjaxProgressError.replace('{operation}', op));\n      };\n\n      self._ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError, formdata);\n    },\n    _deleteFileIndex: function _deleteFileIndex($frame) {\n      var self = this,\n          ind = $frame.attr('data-fileindex'),\n          rev = self.reversePreviewOrder;\n\n      if (ind.substring(0, 5) === $h.INIT_FLAG) {\n        ind = parseInt(ind.replace($h.INIT_FLAG, ''));\n        self.initialPreview = $h.spliceArray(self.initialPreview, ind, rev);\n        self.initialPreviewConfig = $h.spliceArray(self.initialPreviewConfig, ind, rev);\n        self.initialPreviewThumbTags = $h.spliceArray(self.initialPreviewThumbTags, ind, rev);\n        self.getFrames().each(function () {\n          var $nFrame = $(this),\n              nInd = $nFrame.attr('data-fileindex');\n\n          if (nInd.substring(0, 5) === $h.INIT_FLAG) {\n            nInd = parseInt(nInd.replace($h.INIT_FLAG, ''));\n\n            if (nInd > ind) {\n              nInd--;\n              $nFrame.attr('data-fileindex', $h.INIT_FLAG + nInd);\n            }\n          }\n        });\n      }\n    },\n    _resetCaption: function _resetCaption() {\n      var self = this;\n      setTimeout(function () {\n        var cap,\n            n,\n            chk = self.previewCache.count(true),\n            len = self.fileManager.count(),\n            file,\n            incomplete = ':not(.file-preview-success):not(.file-preview-error)',\n            hasThumb = self.showPreview && self.getFrames(incomplete).length;\n\n        if (len === 0 && chk === 0 && !hasThumb) {\n          self.reset();\n        } else {\n          n = chk + len;\n\n          if (n > 1) {\n            cap = self._getMsgSelected(n);\n          } else {\n            file = self.fileManager.getFirstFile();\n            cap = file ? file.nameFmt : '_';\n          }\n\n          self._setCaption(cap);\n        }\n      }, self.processDelay);\n    },\n    _initFileActions: function _initFileActions() {\n      var self = this;\n\n      if (!self.showPreview) {\n        return;\n      }\n\n      self._initZoomButton();\n\n      self.getFrames(' .kv-file-remove').each(function () {\n        var $el = $(this),\n            $frame = $el.closest($h.FRAMES),\n            hasError,\n            id = $frame.attr('id'),\n            ind = $frame.attr('data-fileindex'),\n            status,\n            fm = self.fileManager;\n\n        self._handler($el, 'click', function () {\n          status = self._raise('filepreremove', [id, ind]);\n\n          if (status === false || !self._validateMinCount()) {\n            return false;\n          }\n\n          hasError = $frame.hasClass('file-preview-error');\n          $h.cleanMemory($frame);\n          $frame.fadeOut('slow', function () {\n            self.fileManager.remove($frame);\n\n            self._clearObjects($frame);\n\n            $frame.remove();\n\n            if (id && hasError) {\n              self.$errorContainer.find('li[data-thumb-id=\"' + id + '\"]').fadeOut('fast', function () {\n                $(this).remove();\n\n                if (!self._errorsExist()) {\n                  self._resetErrors();\n                }\n              });\n            }\n\n            self._clearFileInput();\n\n            self._resetCaption();\n\n            self._raise('fileremoved', [id, ind]);\n          });\n        });\n      });\n      self.getFrames(' .kv-file-upload').each(function () {\n        var $el = $(this);\n\n        self._handler($el, 'click', function () {\n          var $frame = $el.closest($h.FRAMES),\n              fileId = self._getThumbFileId($frame);\n\n          self._hideProgress();\n\n          if ($frame.hasClass('file-preview-error') && !self.retryErrorUploads) {\n            return;\n          }\n\n          self._uploadSingle(self.fileManager.getIndex(fileId), fileId, false);\n        });\n      });\n    },\n    _initPreviewActions: function _initPreviewActions() {\n      var self = this,\n          $preview = self.$preview,\n          deleteExtraData = self.deleteExtraData || {},\n          btnRemove = $h.FRAMES + ' .kv-file-remove',\n          settings = self.fileActionSettings,\n          origClass = settings.removeClass,\n          errClass = settings.removeErrorClass,\n          resetProgress = function resetProgress() {\n        var hasFiles = self.isAjaxUpload ? self.previewCache.count(true) : self._inputFileCount();\n\n        if (!self.getFrames().length && !hasFiles) {\n          self._setCaption('');\n\n          self.reset();\n          self.initialCaption = '';\n        }\n      };\n\n      self._initZoomButton();\n\n      $preview.find(btnRemove).each(function () {\n        var $el = $(this),\n            vUrl = $el.data('url') || self.deleteUrl,\n            vKey = $el.data('key'),\n            errMsg,\n            fnBefore,\n            fnSuccess,\n            fnError,\n            op = self.ajaxOperations.deleteThumb;\n\n        if ($h.isEmpty(vUrl) || vKey === undefined) {\n          return;\n        }\n\n        if (typeof vUrl === 'function') {\n          vUrl = vUrl();\n        }\n\n        var $frame = $el.closest($h.FRAMES),\n            cache = self.previewCache.data,\n            settings,\n            params,\n            config,\n            fileName,\n            extraData,\n            index = $frame.attr('data-fileindex');\n        index = parseInt(index.replace($h.INIT_FLAG, ''));\n        config = $h.isEmpty(cache.config) && $h.isEmpty(cache.config[index]) ? null : cache.config[index];\n        extraData = $h.isEmpty(config) || $h.isEmpty(config.extra) ? deleteExtraData : config.extra;\n        fileName = config && (config.filename || config.caption) || '';\n\n        if (typeof extraData === 'function') {\n          extraData = extraData();\n        }\n\n        params = {\n          id: $el.attr('id'),\n          key: vKey,\n          extra: extraData\n        };\n\n        fnBefore = function fnBefore(jqXHR) {\n          self.ajaxAborted = false;\n\n          self._raise('filepredelete', [vKey, jqXHR, extraData]);\n\n          if (self._abort()) {\n            jqXHR.abort();\n          } else {\n            $el.removeClass(errClass);\n            $h.addCss($frame, 'file-uploading');\n            $h.addCss($el, 'disabled ' + origClass);\n          }\n        };\n\n        fnSuccess = function fnSuccess(data, textStatus, jqXHR) {\n          var n, cap;\n\n          if (!$h.isEmpty(data) && !$h.isEmpty(data.error)) {\n            params.jqXHR = jqXHR;\n            params.response = data;\n            errMsg = self._parseError(op, jqXHR, self.msgDeleteError, fileName);\n\n            self._showFileError(errMsg, params, 'filedeleteerror');\n\n            $frame.removeClass('file-uploading');\n            $el.removeClass('disabled ' + origClass).addClass(errClass);\n            resetProgress();\n            return;\n          }\n\n          $frame.removeClass('file-uploading').addClass('file-deleted');\n          $frame.fadeOut('slow', function () {\n            index = parseInt($frame.attr('data-fileindex').replace($h.INIT_FLAG, ''));\n            self.previewCache.unset(index);\n\n            self._deleteFileIndex($frame);\n\n            n = self.previewCache.count(true);\n            cap = n > 0 ? self._getMsgSelected(n) : '';\n\n            self._setCaption(cap);\n\n            self._raise('filedeleted', [vKey, jqXHR, extraData]);\n\n            self._clearObjects($frame);\n\n            $frame.remove();\n            resetProgress();\n          });\n        };\n\n        fnError = function fnError(jqXHR, textStatus, errorThrown) {\n          var errMsg = self._parseError(op, jqXHR, errorThrown, fileName);\n\n          params.jqXHR = jqXHR;\n          params.response = {};\n\n          self._showFileError(errMsg, params, 'filedeleteerror');\n\n          $frame.removeClass('file-uploading');\n          $el.removeClass('disabled ' + origClass).addClass(errClass);\n          resetProgress();\n        };\n\n        self._initAjaxSettings();\n\n        self._mergeAjaxCallback('beforeSend', fnBefore, 'delete');\n\n        self._mergeAjaxCallback('success', fnSuccess, 'delete');\n\n        self._mergeAjaxCallback('error', fnError, 'delete');\n\n        settings = $.extend(true, {}, {\n          url: self._encodeURI(vUrl),\n          type: 'POST',\n          dataType: 'json',\n          data: $.extend(true, {}, {\n            key: vKey\n          }, extraData)\n        }, self._ajaxDeleteSettings);\n\n        self._handler($el, 'click', function () {\n          if (!self._validateMinCount()) {\n            return false;\n          }\n\n          self.ajaxAborted = false;\n\n          self._raise('filebeforedelete', [vKey, extraData]);\n\n          if (self.ajaxAborted instanceof Promise) {\n            self.ajaxAborted.then(function (result) {\n              if (!result) {\n                $.ajax(settings);\n              }\n            });\n          } else {\n            if (!self.ajaxAborted) {\n              $.ajax(settings);\n            }\n          }\n        });\n      });\n    },\n    _hideFileIcon: function _hideFileIcon() {\n      var self = this;\n\n      if (self.overwriteInitial) {\n        self.$captionContainer.removeClass('icon-visible');\n      }\n    },\n    _showFileIcon: function _showFileIcon() {\n      var self = this;\n      $h.addCss(self.$captionContainer, 'icon-visible');\n    },\n    _getSize: function _getSize(bytes, sizes) {\n      var self = this,\n          size = parseFloat(bytes),\n          i,\n          func = self.fileSizeGetter,\n          out;\n\n      if (!$.isNumeric(bytes) || !$.isNumeric(size)) {\n        return '';\n      }\n\n      if (typeof func === 'function') {\n        out = func(size);\n      } else {\n        if (size === 0) {\n          out = '0.00 B';\n        } else {\n          if (!sizes) {\n            sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n          }\n\n          i = Math.floor(Math.log(size) / Math.log(1024));\n          out = (size / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\n        }\n      }\n\n      return self._getLayoutTemplate('size').replace('{sizeText}', out);\n    },\n    _getFileType: function _getFileType(ftype) {\n      var self = this;\n      return self.mimeTypeAliases[ftype] || ftype;\n    },\n    _generatePreviewTemplate: function _generatePreviewTemplate(cat, data, fname, ftype, previewId, fileId, isError, size, frameClass, foot, ind, templ, attrs, zoomData) {\n      var self = this,\n          caption = self.slug(fname),\n          prevContent,\n          zoomContent = '',\n          styleAttribs = '',\n          screenW = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,\n          config,\n          title = caption,\n          alt = caption,\n          typeCss = 'type-default',\n          getContent,\n          footer = foot || self._renderFileFooter(cat, caption, size, 'auto', isError),\n          forcePrevIcon = self.preferIconicPreview,\n          forceZoomIcon = self.preferIconicZoomPreview,\n          newCat = forcePrevIcon ? 'other' : cat;\n\n      config = screenW < 400 ? self.previewSettingsSmall[newCat] || self.defaults.previewSettingsSmall[newCat] : self.previewSettings[newCat] || self.defaults.previewSettings[newCat];\n\n      if (config) {\n        $.each(config, function (key, val) {\n          styleAttribs += key + ':' + val + ';';\n        });\n      }\n\n      getContent = function getContent(c, d, zoom, frameCss) {\n        var id = zoom ? 'zoom-' + previewId : previewId,\n            tmplt = self._getPreviewTemplate(c),\n            css = (frameClass || '') + ' ' + frameCss;\n\n        if (self.frameClass) {\n          css = self.frameClass + ' ' + css;\n        }\n\n        if (zoom) {\n          css = css.replace(' ' + $h.SORT_CSS, '');\n        }\n\n        tmplt = self._parseFilePreviewIcon(tmplt, fname);\n\n        if (cat === 'object' && !ftype) {\n          $.each(self.defaults.fileTypeSettings, function (key, func) {\n            if (key === 'object' || key === 'other') {\n              return;\n            }\n\n            if (func(fname, ftype)) {\n              typeCss = 'type-' + key;\n            }\n          });\n        }\n\n        if (!$h.isEmpty(attrs)) {\n          if (attrs.title !== undefined && attrs.title !== null) {\n            title = attrs.title;\n          }\n\n          if (attrs.alt !== undefined && attrs.alt !== null) {\n            title = attrs.alt;\n          }\n        }\n\n        return tmplt.setTokens({\n          'previewId': id,\n          'caption': caption,\n          'title': title,\n          'alt': alt,\n          'frameClass': css,\n          'type': self._getFileType(ftype),\n          'fileindex': ind,\n          'fileid': fileId || '',\n          'typeCss': typeCss,\n          'footer': footer,\n          'data': d,\n          'template': templ || cat,\n          'style': styleAttribs ? 'style=\"' + styleAttribs + '\"' : ''\n        });\n      };\n\n      ind = ind || previewId.slice(previewId.lastIndexOf('-') + 1);\n\n      if (self.fileActionSettings.showZoom) {\n        zoomContent = getContent(forceZoomIcon ? 'other' : cat, zoomData ? zoomData : data, true, 'kv-zoom-thumb');\n      }\n\n      zoomContent = '\\n' + self._getLayoutTemplate('zoomCache').replace('{zoomContent}', zoomContent);\n\n      if (typeof self.sanitizeZoomCache === 'function') {\n        zoomContent = self.sanitizeZoomCache(zoomContent);\n      }\n\n      prevContent = getContent(forcePrevIcon ? 'other' : cat, data, false, 'kv-preview-thumb');\n      return prevContent.setTokens({\n        zoomCache: zoomContent\n      });\n    },\n    _addToPreview: function _addToPreview($preview, content) {\n      var self = this,\n          $el;\n      content = $h.cspBuffer.stash(content);\n      $el = self.reversePreviewOrder ? $preview.prepend(content) : $preview.append(content);\n      $h.cspBuffer.apply($preview);\n      return $el;\n    },\n    _previewDefault: function _previewDefault(file, isDisabled) {\n      var self = this,\n          $preview = self.$preview;\n\n      if (!self.showPreview) {\n        return;\n      }\n\n      var fname = $h.getFileName(file),\n          ftype = file ? file.type : '',\n          content,\n          size = file.size || 0,\n          caption = self._getFileName(file, ''),\n          isError = isDisabled === true && !self.isAjaxUpload,\n          data = $h.createObjectURL(file),\n          fileId = self.fileManager.getId(file),\n          previewId = self._getThumbId(fileId);\n\n      self._clearDefaultPreview();\n\n      content = self._generatePreviewTemplate('other', data, fname, ftype, previewId, fileId, isError, size);\n\n      self._addToPreview($preview, content);\n\n      self._setThumbAttr(previewId, caption, size);\n\n      if (isDisabled === true && self.isAjaxUpload) {\n        self._setThumbStatus(self._getFrame(previewId), 'Error');\n      }\n    },\n    _previewFile: function _previewFile(i, file, theFile, data, fileInfo) {\n      if (!this.showPreview) {\n        return;\n      }\n\n      var self = this,\n          fname = $h.getFileName(file),\n          ftype = fileInfo.type,\n          caption = fileInfo.name,\n          cat = self._parseFileType(ftype, fname),\n          content,\n          $preview = self.$preview,\n          fsize = file.size || 0,\n          iData = cat === 'image' ? theFile.target.result : data,\n          fm = self.fileManager,\n          fileId = fm.getId(file),\n          previewId = self._getThumbId(fileId);\n      /** @namespace window.DOMPurify */\n\n\n      content = self._generatePreviewTemplate(cat, iData, fname, ftype, previewId, fileId, false, fsize);\n\n      self._clearDefaultPreview();\n\n      self._addToPreview($preview, content);\n\n      var $thumb = self._getFrame(previewId);\n\n      self._validateImageOrientation($thumb.find('img'), file, previewId, fileId, caption, ftype, fsize, iData);\n\n      self._setThumbAttr(previewId, caption, fsize);\n\n      self._initSortable();\n    },\n    _setThumbAttr: function _setThumbAttr(id, caption, size) {\n      var self = this,\n          $frame = self._getFrame(id);\n\n      if ($frame.length) {\n        size = size && size > 0 ? self._getSize(size) : '';\n        $frame.data({\n          'caption': caption,\n          'size': size\n        });\n      }\n    },\n    _setInitThumbAttr: function _setInitThumbAttr() {\n      var self = this,\n          data = self.previewCache.data,\n          len = self.previewCache.count(true),\n          config,\n          caption,\n          size,\n          previewId;\n\n      if (len === 0) {\n        return;\n      }\n\n      for (var i = 0; i < len; i++) {\n        config = data.config[i];\n        previewId = self.previewInitId + '-' + $h.INIT_FLAG + i;\n        caption = $h.ifSet('caption', config, $h.ifSet('filename', config));\n        size = $h.ifSet('size', config);\n\n        self._setThumbAttr(previewId, caption, size);\n      }\n    },\n    _slugDefault: function _slugDefault(text) {\n      // noinspection RegExpRedundantEscape\n      return $h.isEmpty(text, true) ? '' : String(text).replace(/[\\[\\]\\/\\{}:;#%=\\(\\)\\*\\+\\?\\\\\\^\\$\\|<>&\"']/g, '_');\n    },\n    _updateFileDetails: function _updateFileDetails(numFiles, skipRaiseEvent) {\n      var self = this,\n          $el = self.$element,\n          label,\n          n,\n          log,\n          nFiles,\n          file,\n          name = $h.isIE(9) && $h.findFileName($el.val()) || $el[0].files[0] && $el[0].files[0].name;\n\n      if (!name && self.fileManager.count() > 0) {\n        file = self.fileManager.getFirstFile();\n        label = file.nameFmt;\n      } else {\n        label = name ? self.slug(name) : '_';\n      }\n\n      n = self.isAjaxUpload ? self.fileManager.count() : numFiles;\n      nFiles = self.previewCache.count(true) + n;\n      log = n === 1 ? label : self._getMsgSelected(nFiles, !self.isAjaxUpload && !self.isError);\n\n      if (self.isError) {\n        self.$previewContainer.removeClass('file-thumb-loading');\n\n        self._initCapStatus();\n\n        self.$previewStatus.html('');\n        self.$captionContainer.removeClass('icon-visible');\n      } else {\n        self._showFileIcon();\n      }\n\n      self._setCaption(log, self.isError);\n\n      self.$container.removeClass('file-input-new file-input-ajax-new');\n\n      if (!skipRaiseEvent) {\n        self._raise('fileselect', [numFiles, label]);\n      }\n\n      if (self.previewCache.count(true)) {\n        self._initPreviewActions();\n      }\n    },\n    _setThumbStatus: function _setThumbStatus($thumb, status) {\n      var self = this;\n\n      if (!self.showPreview) {\n        return;\n      }\n\n      var icon = 'indicator' + status,\n          msg = icon + 'Title',\n          css = 'file-preview-' + status.toLowerCase(),\n          $indicator = $thumb.find('.file-upload-indicator'),\n          config = self.fileActionSettings;\n      $thumb.removeClass('file-preview-success file-preview-error file-preview-paused file-preview-loading');\n\n      if (status === 'Success') {\n        $thumb.find('.file-drag-handle').remove();\n      }\n\n      $h.setHtml($indicator, config[icon]);\n      $indicator.attr('title', config[msg]);\n      $thumb.addClass(css);\n\n      if (status === 'Error' && !self.retryErrorUploads) {\n        $thumb.find('.kv-file-upload').attr('disabled', true);\n      }\n    },\n    _setProgressCancelled: function _setProgressCancelled() {\n      var self = this;\n\n      self._setProgress(101, self.$progress, self.msgCancelled);\n    },\n    _setProgress: function _setProgress(p, $el, error, stats) {\n      var self = this;\n      $el = $el || self.$progress;\n\n      if (!$el.length) {\n        return;\n      }\n\n      var pct = Math.min(p, 100),\n          out,\n          pctLimit = self.progressUploadThreshold,\n          t = p <= 100 ? self.progressTemplate : self.progressCompleteTemplate,\n          template = pct < 100 ? self.progressTemplate : error ? self.paused ? self.progressPauseTemplate : self.progressErrorTemplate : t;\n\n      if (p >= 100) {\n        stats = '';\n      }\n\n      if (!$h.isEmpty(template)) {\n        if (pctLimit && pct > pctLimit && p <= 100) {\n          out = template.setTokens({\n            'percent': pctLimit,\n            'status': self.msgUploadThreshold\n          });\n        } else {\n          out = template.setTokens({\n            'percent': pct,\n            'status': p > 100 ? self.msgUploadEnd : pct + '%'\n          });\n        }\n\n        stats = stats || '';\n        out = out.setTokens({\n          stats: stats\n        });\n        $h.setHtml($el, out);\n\n        if (error) {\n          $h.setHtml($el.find('[role=\"progressbar\"]'), error);\n        }\n      }\n    },\n    _hasFiles: function _hasFiles() {\n      var el = this.$element[0];\n      return !!(el && el.files && el.files.length);\n    },\n    _setFileDropZoneTitle: function _setFileDropZoneTitle() {\n      var self = this,\n          $zone = self.$container.find('.file-drop-zone'),\n          title = self.dropZoneTitle,\n          strFiles;\n\n      if (self.isClickable) {\n        strFiles = $h.isEmpty(self.$element.attr('multiple')) ? self.fileSingle : self.filePlural;\n        title += self.dropZoneClickTitle.replace('{files}', strFiles);\n      }\n\n      $zone.find('.' + self.dropZoneTitleClass).remove();\n\n      if (!self.showPreview || $zone.length === 0 || self.fileManager.count() > 0 || !self.dropZoneEnabled || self.previewCache.count() > 0 || !self.isAjaxUpload && self._hasFiles()) {\n        return;\n      }\n\n      if ($zone.find($h.FRAMES).length === 0 && $h.isEmpty(self.defaultPreviewContent)) {\n        $zone.prepend('<div class=\"' + self.dropZoneTitleClass + '\">' + title + '</div>');\n      }\n\n      self.$container.removeClass('file-input-new');\n      $h.addCss(self.$container, 'file-input-ajax-new');\n    },\n    _getStats: function _getStats(stats) {\n      var self = this,\n          pendingTime,\n          t;\n\n      if (!self.showUploadStats || !stats || !stats.bitrate) {\n        return '';\n      }\n\n      t = self._getLayoutTemplate('stats');\n      pendingTime = !stats.elapsed || !stats.bps ? self.msgCalculatingTime : self.msgPendingTime.setTokens({\n        time: $h.getElapsed(Math.ceil(stats.pendingBytes / stats.bps))\n      });\n      return t.setTokens({\n        uploadSpeed: stats.bitrate,\n        pendingTime: pendingTime\n      });\n    },\n    _setResumableProgress: function _setResumableProgress(pct, stats, $thumb) {\n      var self = this,\n          rm = self.resumableManager,\n          obj = $thumb ? rm : self,\n          $prog = $thumb ? $thumb.find('.file-thumb-progress') : null;\n\n      if (obj.lastProgress === 0) {\n        obj.lastProgress = pct;\n      }\n\n      if (pct < obj.lastProgress) {\n        pct = obj.lastProgress;\n      }\n\n      self._setProgress(pct, $prog, null, self._getStats(stats));\n\n      obj.lastProgress = pct;\n    },\n    _toggleResumableProgress: function _toggleResumableProgress(template, message) {\n      var self = this,\n          $progress = self.$progress;\n\n      if ($progress && $progress.length) {\n        $h.setHtml($progress, template.setTokens({\n          percent: 101,\n          status: message,\n          stats: ''\n        }));\n      }\n    },\n    _setFileUploadStats: function _setFileUploadStats(id, pct, stats) {\n      var self = this,\n          $prog = self.$progress;\n\n      if (!self.showPreview && (!$prog || !$prog.length)) {\n        return;\n      }\n\n      var fm = self.fileManager,\n          rm = self.resumableManager,\n          $thumb = fm.getThumb(id),\n          pctTot,\n          totUpSize = 0,\n          totSize = fm.getTotalSize(),\n          totStats = $.extend(true, {}, stats);\n\n      if (self.enableResumableUpload) {\n        var loaded = stats.loaded,\n            currUplSize = rm.getUploadedSize(),\n            currTotSize = rm.file.size,\n            totLoaded;\n        loaded += currUplSize;\n        totLoaded = fm.uploadedSize + loaded;\n        pct = $h.round(100 * loaded / currTotSize);\n        stats.pendingBytes = currTotSize - currUplSize;\n\n        self._setResumableProgress(pct, stats, $thumb);\n\n        pctTot = Math.floor(100 * totLoaded / totSize);\n        totStats.pendingBytes = totSize - totLoaded;\n\n        self._setResumableProgress(pctTot, totStats);\n      } else {\n        fm.setProgress(id, pct);\n        $prog = $thumb && $thumb.length ? $thumb.find('.file-thumb-progress') : null;\n\n        self._setProgress(pct, $prog, null, self._getStats(stats));\n\n        $.each(fm.stats, function (id, cfg) {\n          totUpSize += cfg.loaded;\n        });\n        totStats.pendingBytes = totSize - totUpSize;\n        pctTot = $h.round(totUpSize / totSize * 100);\n\n        self._setProgress(pctTot, null, null, self._getStats(totStats));\n      }\n    },\n    _validateMinCount: function _validateMinCount() {\n      var self = this,\n          len = self.isAjaxUpload ? self.fileManager.count() : self._inputFileCount();\n\n      if (self.validateInitialCount && self.minFileCount > 0 && self._getFileCount(len - 1) < self.minFileCount) {\n        self._noFilesError({});\n\n        return false;\n      }\n\n      return true;\n    },\n    _getFileCount: function _getFileCount(fileCount, includeInitial) {\n      var self = this,\n          addCount = 0;\n\n      if (includeInitial === undefined) {\n        includeInitial = self.validateInitialCount && !self.overwriteInitial;\n      }\n\n      if (includeInitial) {\n        addCount = self.previewCache.count(true);\n        fileCount += addCount;\n      }\n\n      return fileCount;\n    },\n    _getFileId: function _getFileId(file) {\n      return $h.getFileId(file, this.generateFileId);\n    },\n    _getFileName: function _getFileName(file, defaultValue) {\n      var self = this,\n          fileName = $h.getFileName(file);\n      return fileName ? self.slug(fileName) : defaultValue;\n    },\n    _getFileNames: function _getFileNames(skipNull) {\n      var self = this;\n      return self.filenames.filter(function (n) {\n        return skipNull ? n !== undefined : n !== undefined && n !== null;\n      });\n    },\n    _setPreviewError: function _setPreviewError($thumb, keepFile) {\n      var self = this,\n          removeFrame = self.removeFromPreviewOnError && !self.retryErrorUploads;\n\n      if (!keepFile || removeFrame) {\n        self.fileManager.remove($thumb);\n      }\n\n      if (!self.showPreview) {\n        return;\n      }\n\n      if (removeFrame) {\n        $thumb.remove();\n        return;\n      } else {\n        self._setThumbStatus($thumb, 'Error');\n      }\n\n      self._refreshUploadButton($thumb);\n    },\n    _refreshUploadButton: function _refreshUploadButton($thumb) {\n      var self = this,\n          $btn = $thumb.find('.kv-file-upload'),\n          cfg = self.fileActionSettings,\n          icon = cfg.uploadIcon,\n          title = cfg.uploadTitle;\n\n      if (!$btn.length) {\n        return;\n      }\n\n      if (self.retryErrorUploads) {\n        icon = cfg.uploadRetryIcon;\n        title = cfg.uploadRetryTitle;\n      }\n\n      $btn.attr('title', title);\n      $h.setHtml($btn, icon);\n    },\n    _checkDimensions: function _checkDimensions(i, chk, $img, $thumb, fname, type, params) {\n      var self = this,\n          msg,\n          dim,\n          tag = chk === 'Small' ? 'min' : 'max',\n          limit = self[tag + 'Image' + type],\n          $imgEl,\n          isValid;\n\n      if ($h.isEmpty(limit) || !$img.length) {\n        return;\n      }\n\n      $imgEl = $img[0];\n      dim = type === 'Width' ? $imgEl.naturalWidth || $imgEl.width : $imgEl.naturalHeight || $imgEl.height;\n      isValid = chk === 'Small' ? dim >= limit : dim <= limit;\n\n      if (isValid) {\n        return;\n      }\n\n      msg = self['msgImage' + type + chk].setTokens({\n        'name': fname,\n        'size': limit\n      });\n\n      self._showFileError(msg, params);\n\n      self._setPreviewError($thumb);\n    },\n    _getExifObj: function _getExifObj(data) {\n      var self = this,\n          exifObj,\n          error = $h.logMessages.exifWarning;\n\n      if (data.slice(0, 23) !== 'data:image/jpeg;base64,' && data.slice(0, 22) !== 'data:image/jpg;base64,') {\n        exifObj = null;\n        return;\n      }\n\n      try {\n        exifObj = window.piexif ? window.piexif.load(data) : null;\n      } catch (err) {\n        exifObj = null;\n        error = err && err.message || '';\n      }\n\n      if (!exifObj) {\n        self._log($h.logMessages.badExifParser, {\n          details: error\n        });\n      }\n\n      return exifObj;\n    },\n    setImageOrientation: function setImageOrientation($img, $zoomImg, value, $thumb) {\n      var self = this,\n          invalidImg = !$img || !$img.length,\n          invalidZoomImg = !$zoomImg || !$zoomImg.length,\n          $mark,\n          isHidden = false,\n          $div,\n          zoomOnly = invalidImg && $thumb && $thumb.attr('data-template') === 'image',\n          ev;\n\n      if (invalidImg && invalidZoomImg) {\n        return;\n      }\n\n      ev = 'load.fileinputimageorient';\n\n      if (zoomOnly) {\n        $img = $zoomImg;\n        $zoomImg = null;\n        $img.css(self.previewSettings.image);\n        $div = $(document.createElement('div')).appendTo($thumb.find('.kv-file-content'));\n        $mark = $(document.createElement('span')).insertBefore($img);\n        $img.css('visibility', 'hidden').removeClass('file-zoom-detail').appendTo($div);\n      } else {\n        isHidden = !$img.is(':visible');\n      }\n\n      $img.off(ev).on(ev, function () {\n        if (isHidden) {\n          self.$preview.removeClass('hide-content');\n          $thumb.find('.kv-file-content').css('visibility', 'hidden');\n        }\n\n        var img = $img[0],\n            zoomImg = $zoomImg && $zoomImg.length ? $zoomImg[0] : null,\n            h = img.offsetHeight,\n            w = img.offsetWidth,\n            r = $h.getRotation(value);\n\n        if (isHidden) {\n          $thumb.find('.kv-file-content').css('visibility', 'visible');\n          self.$preview.addClass('hide-content');\n        }\n\n        $img.data('orientation', value);\n\n        if (zoomImg) {\n          $zoomImg.data('orientation', value);\n        }\n\n        if (value < 5) {\n          $h.setTransform(img, r);\n          $h.setTransform(zoomImg, r);\n          return;\n        }\n\n        var offsetAngle = Math.atan(w / h),\n            origFactor = Math.sqrt(Math.pow(h, 2) + Math.pow(w, 2)),\n            scale = !origFactor ? 1 : h / Math.cos(Math.PI / 2 + offsetAngle) / origFactor,\n            s = ' scale(' + Math.abs(scale) + ')';\n        $h.setTransform(img, r + s);\n        $h.setTransform(zoomImg, r + s);\n\n        if (zoomOnly) {\n          $img.css('visibility', 'visible').insertAfter($mark).addClass('file-zoom-detail');\n          $mark.remove();\n          $div.remove();\n        }\n      });\n    },\n    _validateImageOrientation: function _validateImageOrientation($img, file, previewId, fileId, caption, ftype, fsize, iData) {\n      var self = this,\n          exifObj = null,\n          value,\n          autoOrientImage = self.autoOrientImage,\n          selector;\n\n      if (self.canOrientImage) {\n        $img.css('image-orientation', autoOrientImage ? 'from-image' : 'none');\n\n        self._validateImage(previewId, fileId, caption, ftype, fsize, iData, exifObj);\n\n        return;\n      }\n\n      selector = $h.getZoomSelector(previewId, ' img');\n      exifObj = autoOrientImage ? self._getExifObj(iData) : null;\n      value = exifObj ? exifObj['0th'][piexif.ImageIFD.Orientation] : null; // jshint ignore:line\n\n      if (!value) {\n        self._validateImage(previewId, fileId, caption, ftype, fsize, iData, exifObj);\n\n        return;\n      }\n\n      self.setImageOrientation($img, $(selector), value, self._getFrame(previewId));\n\n      self._raise('fileimageoriented', {\n        '$img': $img,\n        'file': file\n      });\n\n      self._validateImage(previewId, fileId, caption, ftype, fsize, iData, exifObj);\n    },\n    _validateImage: function _validateImage(previewId, fileId, fname, ftype, fsize, iData, exifObj) {\n      var self = this,\n          $preview = self.$preview,\n          params,\n          w1,\n          w2,\n          $thumb = self._getFrame(previewId),\n          i = $thumb.attr('data-fileindex'),\n          $img = $thumb.find('img');\n\n      fname = fname || 'Untitled';\n      $img.one('load', function () {\n        w1 = $thumb.width();\n        w2 = $preview.width();\n\n        if (w1 > w2) {\n          $img.css('width', '100%');\n        }\n\n        params = {\n          ind: i,\n          id: previewId,\n          fileId: fileId\n        };\n\n        self._checkDimensions(i, 'Small', $img, $thumb, fname, 'Width', params);\n\n        self._checkDimensions(i, 'Small', $img, $thumb, fname, 'Height', params);\n\n        if (!self.resizeImage) {\n          self._checkDimensions(i, 'Large', $img, $thumb, fname, 'Width', params);\n\n          self._checkDimensions(i, 'Large', $img, $thumb, fname, 'Height', params);\n        }\n\n        self._raise('fileimageloaded', [previewId]);\n\n        self.fileManager.addImage(fileId, {\n          ind: i,\n          img: $img,\n          thumb: $thumb,\n          pid: previewId,\n          typ: ftype,\n          siz: fsize,\n          validated: false,\n          imgData: iData,\n          exifObj: exifObj\n        });\n        $thumb.data('exif', exifObj);\n\n        self._validateAllImages();\n      }).one('error', function () {\n        self._raise('fileimageloaderror', [previewId]);\n      });\n    },\n    _validateAllImages: function _validateAllImages() {\n      var self = this,\n          counter = {\n        val: 0\n      },\n          numImgs = self.fileManager.getImageCount(),\n          fsize,\n          minSize = self.resizeIfSizeMoreThan;\n\n      if (numImgs !== self.fileManager.totalImages) {\n        return;\n      }\n\n      self._raise('fileimagesloaded');\n\n      if (!self.resizeImage) {\n        return;\n      }\n\n      $.each(self.fileManager.loadedImages, function (id, config) {\n        if (!config.validated) {\n          fsize = config.siz;\n\n          if (fsize && fsize > minSize * 1000) {\n            self._getResizedImage(id, config, counter, numImgs);\n          }\n\n          config.validated = true;\n        }\n      });\n    },\n    _getResizedImage: function _getResizedImage(id, config, counter, numImgs) {\n      var self = this,\n          img = $(config.img)[0],\n          width = img.naturalWidth,\n          height = img.naturalHeight,\n          blob,\n          ratio = 1,\n          maxWidth = self.maxImageWidth || width,\n          maxHeight = self.maxImageHeight || height,\n          isValidImage = !!(width && height),\n          chkWidth,\n          chkHeight,\n          canvas = self.imageCanvas,\n          dataURI,\n          context = self.imageCanvasContext,\n          type = config.typ,\n          pid = config.pid,\n          ind = config.ind,\n          $thumb = config.thumb,\n          throwError,\n          msg,\n          exifObj = config.exifObj,\n          exifStr,\n          file,\n          params,\n          evParams;\n\n      throwError = function throwError(msg, params, ev) {\n        if (self.isAjaxUpload) {\n          self._showFileError(msg, params, ev);\n        } else {\n          self._showError(msg, params, ev);\n        }\n\n        self._setPreviewError($thumb);\n      };\n\n      file = self.fileManager.getFile(id);\n      params = {\n        id: pid,\n        'index': ind,\n        fileId: id\n      };\n      evParams = [id, pid, ind];\n\n      if (!file || !isValidImage || width <= maxWidth && height <= maxHeight) {\n        if (isValidImage && file) {\n          self._raise('fileimageresized', evParams);\n        }\n\n        counter.val++;\n\n        if (counter.val === numImgs) {\n          self._raise('fileimagesresized');\n        }\n\n        if (!isValidImage) {\n          throwError(self.msgImageResizeError, params, 'fileimageresizeerror');\n          return;\n        }\n      }\n\n      type = type || self.resizeDefaultImageType;\n      chkWidth = width > maxWidth;\n      chkHeight = height > maxHeight;\n\n      if (self.resizePreference === 'width') {\n        ratio = chkWidth ? maxWidth / width : chkHeight ? maxHeight / height : 1;\n      } else {\n        ratio = chkHeight ? maxHeight / height : chkWidth ? maxWidth / width : 1;\n      }\n\n      self._resetCanvas();\n\n      width *= ratio;\n      height *= ratio;\n      canvas.width = width;\n      canvas.height = height;\n\n      try {\n        context.drawImage(img, 0, 0, width, height);\n        dataURI = canvas.toDataURL(type, self.resizeQuality);\n\n        if (exifObj) {\n          exifStr = window.piexif.dump(exifObj);\n          dataURI = window.piexif.insert(exifStr, dataURI);\n        }\n\n        blob = $h.dataURI2Blob(dataURI);\n        self.fileManager.setFile(id, blob);\n\n        self._raise('fileimageresized', evParams);\n\n        counter.val++;\n\n        if (counter.val === numImgs) {\n          self._raise('fileimagesresized', [undefined, undefined]);\n        }\n\n        if (!(blob instanceof Blob)) {\n          throwError(self.msgImageResizeError, params, 'fileimageresizeerror');\n        }\n      } catch (err) {\n        counter.val++;\n\n        if (counter.val === numImgs) {\n          self._raise('fileimagesresized', [undefined, undefined]);\n        }\n\n        msg = self.msgImageResizeException.replace('{errors}', err.message);\n        throwError(msg, params, 'fileimageresizeexception');\n      }\n    },\n    _showProgress: function _showProgress() {\n      var self = this;\n\n      if (self.$progress && self.$progress.length) {\n        self.$progress.show();\n      }\n    },\n    _hideProgress: function _hideProgress() {\n      var self = this;\n\n      if (self.$progress && self.$progress.length) {\n        self.$progress.hide();\n      }\n    },\n    _initBrowse: function _initBrowse($container) {\n      var self = this,\n          $el = self.$element;\n\n      if (self.showBrowse) {\n        self.$btnFile = $container.find('.btn-file').append($el);\n      } else {\n        $el.appendTo($container).attr('tabindex', -1);\n        $h.addCss($el, 'file-no-browse');\n      }\n    },\n    _initClickable: function _initClickable() {\n      var self = this,\n          $zone,\n          $tmpZone;\n\n      if (!self.isClickable) {\n        return;\n      }\n\n      $zone = self.$dropZone;\n\n      if (!self.isAjaxUpload) {\n        $tmpZone = self.$preview.find('.file-default-preview');\n\n        if ($tmpZone.length) {\n          $zone = $tmpZone;\n        }\n      }\n\n      $h.addCss($zone, 'clickable');\n      $zone.attr('tabindex', -1);\n\n      self._handler($zone, 'click', function (e) {\n        var $tar = $(e.target);\n\n        if (!self.$errorContainer.is(':visible') && (!$tar.parents('.file-preview-thumbnails').length || $tar.parents('.file-default-preview').length)) {\n          self.$element.data('zoneClicked', true).trigger('click');\n          $zone.blur();\n        }\n      });\n    },\n    _initCaption: function _initCaption() {\n      var self = this,\n          cap = self.initialCaption || '';\n\n      if (self.overwriteInitial || $h.isEmpty(cap)) {\n        self.$caption.val('');\n        return false;\n      }\n\n      self._setCaption(cap);\n\n      return true;\n    },\n    _setCaption: function _setCaption(content, isError) {\n      var self = this,\n          title,\n          out,\n          icon,\n          n,\n          cap,\n          file;\n\n      if (!self.$caption.length) {\n        return;\n      }\n\n      self.$captionContainer.removeClass('icon-visible');\n\n      if (isError) {\n        title = $('<div>' + self.msgValidationError + '</div>').text();\n        n = self.fileManager.count();\n\n        if (n) {\n          file = self.fileManager.getFirstFile();\n          cap = n === 1 && file ? file.nameFmt : self._getMsgSelected(n);\n        } else {\n          cap = self._getMsgSelected(self.msgNo);\n        }\n\n        out = $h.isEmpty(content) ? cap : content;\n        icon = '<span class=\"' + self.msgValidationErrorClass + '\">' + self.msgValidationErrorIcon + '</span>';\n      } else {\n        if ($h.isEmpty(content)) {\n          self.$caption.attr('title', '');\n          return;\n        }\n\n        title = $('<div>' + content + '</div>').text();\n        out = title;\n        icon = self._getLayoutTemplate('fileIcon');\n      }\n\n      self.$captionContainer.addClass('icon-visible');\n      self.$caption.attr('title', title).val(out);\n      $h.setHtml(self.$captionIcon, icon);\n    },\n    _createContainer: function _createContainer() {\n      var self = this,\n          attribs = {\n        'class': 'file-input file-input-new' + (self.rtl ? ' kv-rtl' : '')\n      },\n          $container = $h.createElement($h.cspBuffer.stash(self._renderMain()));\n      $h.cspBuffer.apply($container);\n      $container.insertBefore(self.$element).attr(attribs);\n\n      self._initBrowse($container);\n\n      if (self.theme) {\n        $container.addClass('theme-' + self.theme);\n      }\n\n      return $container;\n    },\n    _refreshContainer: function _refreshContainer() {\n      var self = this,\n          $container = self.$container,\n          $el = self.$element;\n      $el.insertAfter($container);\n      $h.setHtml($container, self._renderMain());\n\n      self._initBrowse($container);\n\n      self._validateDisabled();\n    },\n    _validateDisabled: function _validateDisabled() {\n      var self = this;\n      self.$caption.attr({\n        readonly: self.isDisabled\n      });\n    },\n    _setTabIndex: function _setTabIndex(type, html) {\n      var self = this,\n          index = self.tabIndexConfig[type];\n      return html.setTokens({\n        tabIndexConfig: index === undefined || index === null ? '' : 'tabindex=\"' + index + '\"'\n      });\n    },\n    _renderMain: function _renderMain() {\n      var self = this,\n          dropCss = self.dropZoneEnabled ? ' file-drop-zone' : 'file-drop-disabled',\n          close = !self.showClose ? '' : self._getLayoutTemplate('close'),\n          preview = !self.showPreview ? '' : self._getLayoutTemplate('preview').setTokens({\n        'class': self.previewClass,\n        'dropClass': dropCss\n      }),\n          css = self.isDisabled ? self.captionClass + ' file-caption-disabled' : self.captionClass,\n          caption = self.captionTemplate.setTokens({\n        'class': css + ' kv-fileinput-caption'\n      });\n      caption = self._setTabIndex('caption', caption);\n      return self.mainTemplate.setTokens({\n        'class': self.mainClass + (!self.showBrowse && self.showCaption ? ' no-browse' : ''),\n        'preview': preview,\n        'close': close,\n        'caption': caption,\n        'upload': self._renderButton('upload'),\n        'remove': self._renderButton('remove'),\n        'cancel': self._renderButton('cancel'),\n        'pause': self._renderButton('pause'),\n        'browse': self._renderButton('browse')\n      });\n    },\n    _renderButton: function _renderButton(type) {\n      var self = this,\n          tmplt = self._getLayoutTemplate('btnDefault'),\n          css = self[type + 'Class'],\n          title = self[type + 'Title'],\n          icon = self[type + 'Icon'],\n          label = self[type + 'Label'],\n          status = self.isDisabled ? ' disabled' : '',\n          btnType = 'button';\n\n      switch (type) {\n        case 'remove':\n          if (!self.showRemove) {\n            return '';\n          }\n\n          break;\n\n        case 'cancel':\n          if (!self.showCancel) {\n            return '';\n          }\n\n          css += ' kv-hidden';\n          break;\n\n        case 'pause':\n          if (!self.showPause) {\n            return '';\n          }\n\n          css += ' kv-hidden';\n          break;\n\n        case 'upload':\n          if (!self.showUpload) {\n            return '';\n          }\n\n          if (self.isAjaxUpload && !self.isDisabled) {\n            tmplt = self._getLayoutTemplate('btnLink').replace('{href}', self.uploadUrl);\n          } else {\n            btnType = 'submit';\n          }\n\n          break;\n\n        case 'browse':\n          if (!self.showBrowse) {\n            return '';\n          }\n\n          tmplt = self._getLayoutTemplate('btnBrowse');\n          break;\n\n        default:\n          return '';\n      }\n\n      tmplt = self._setTabIndex(type, tmplt);\n      css += type === 'browse' ? ' btn-file' : ' fileinput-' + type + ' fileinput-' + type + '-button';\n\n      if (!$h.isEmpty(label)) {\n        label = ' <span class=\"' + self.buttonLabelClass + '\">' + label + '</span>';\n      }\n\n      return tmplt.setTokens({\n        'type': btnType,\n        'css': css,\n        'title': title,\n        'status': status,\n        'icon': icon,\n        'label': label\n      });\n    },\n    _renderThumbProgress: function _renderThumbProgress() {\n      var self = this;\n      return '<div class=\"file-thumb-progress kv-hidden\">' + self.progressInfoTemplate.setTokens({\n        percent: 101,\n        status: self.msgUploadBegin,\n        stats: ''\n      }) + '</div>';\n    },\n    _renderFileFooter: function _renderFileFooter(cat, caption, size, width, isError) {\n      var self = this,\n          config = self.fileActionSettings,\n          rem = config.showRemove,\n          drg = config.showDrag,\n          upl = config.showUpload,\n          zoom = config.showZoom,\n          out,\n          params,\n          template = self._getLayoutTemplate('footer'),\n          tInd = self._getLayoutTemplate('indicator'),\n          ind = isError ? config.indicatorError : config.indicatorNew,\n          title = isError ? config.indicatorErrorTitle : config.indicatorNewTitle,\n          indicator = tInd.setTokens({\n        'indicator': ind,\n        'indicatorTitle': title\n      });\n\n      size = self._getSize(size);\n      params = {\n        type: cat,\n        caption: caption,\n        size: size,\n        width: width,\n        progress: '',\n        indicator: indicator\n      };\n\n      if (self.isAjaxUpload) {\n        params.progress = self._renderThumbProgress();\n        params.actions = self._renderFileActions(params, upl, false, rem, zoom, drg, false, false, false);\n      } else {\n        params.actions = self._renderFileActions(params, false, false, false, zoom, drg, false, false, false);\n      }\n\n      out = template.setTokens(params);\n      out = $h.replaceTags(out, self.previewThumbTags);\n      return out;\n    },\n    _renderFileActions: function _renderFileActions(cfg, showUpl, showDwn, showDel, showZoom, showDrag, disabled, url, key, isInit, dUrl, dFile) {\n      var self = this;\n\n      if (!cfg.type && isInit) {\n        cfg.type = 'image';\n      }\n\n      if (self.enableResumableUpload) {\n        showUpl = false;\n      } else {\n        if (typeof showUpl === 'function') {\n          showUpl = showUpl(cfg);\n        }\n      }\n\n      if (typeof showDwn === 'function') {\n        showDwn = showDwn(cfg);\n      }\n\n      if (typeof showDel === 'function') {\n        showDel = showDel(cfg);\n      }\n\n      if (typeof showZoom === 'function') {\n        showZoom = showZoom(cfg);\n      }\n\n      if (typeof showDrag === 'function') {\n        showDrag = showDrag(cfg);\n      }\n\n      if (!showUpl && !showDwn && !showDel && !showZoom && !showDrag) {\n        return '';\n      }\n\n      var vUrl = url === false ? '' : ' data-url=\"' + url + '\"',\n          btnZoom = '',\n          btnDrag = '',\n          css,\n          vKey = key === false ? '' : ' data-key=\"' + key + '\"',\n          btnDelete = '',\n          btnUpload = '',\n          btnDownload = '',\n          template = self._getLayoutTemplate('actions'),\n          config = self.fileActionSettings,\n          otherButtons = self.otherActionButtons.setTokens({\n        'dataKey': vKey,\n        'key': key\n      }),\n          removeClass = disabled ? config.removeClass + ' disabled' : config.removeClass;\n\n      if (showDel) {\n        btnDelete = self._getLayoutTemplate('actionDelete').setTokens({\n          'removeClass': removeClass,\n          'removeIcon': config.removeIcon,\n          'removeTitle': config.removeTitle,\n          'dataUrl': vUrl,\n          'dataKey': vKey,\n          'key': key\n        });\n      }\n\n      if (showUpl) {\n        btnUpload = self._getLayoutTemplate('actionUpload').setTokens({\n          'uploadClass': config.uploadClass,\n          'uploadIcon': config.uploadIcon,\n          'uploadTitle': config.uploadTitle\n        });\n      }\n\n      if (showDwn) {\n        btnDownload = self._getLayoutTemplate('actionDownload').setTokens({\n          'downloadClass': config.downloadClass,\n          'downloadIcon': config.downloadIcon,\n          'downloadTitle': config.downloadTitle,\n          'downloadUrl': dUrl || self.initialPreviewDownloadUrl\n        });\n        btnDownload = btnDownload.setTokens({\n          'filename': dFile,\n          'key': key\n        });\n      }\n\n      if (showZoom) {\n        btnZoom = self._getLayoutTemplate('actionZoom').setTokens({\n          'zoomClass': config.zoomClass,\n          'zoomIcon': config.zoomIcon,\n          'zoomTitle': config.zoomTitle\n        });\n      }\n\n      if (showDrag && isInit) {\n        css = 'drag-handle-init ' + config.dragClass;\n        btnDrag = self._getLayoutTemplate('actionDrag').setTokens({\n          'dragClass': css,\n          'dragTitle': config.dragTitle,\n          'dragIcon': config.dragIcon\n        });\n      }\n\n      return template.setTokens({\n        'delete': btnDelete,\n        'upload': btnUpload,\n        'download': btnDownload,\n        'zoom': btnZoom,\n        'drag': btnDrag,\n        'other': otherButtons\n      });\n    },\n    _browse: function _browse(e) {\n      var self = this;\n\n      if (e && e.isDefaultPrevented() || !self._raise('filebrowse')) {\n        return;\n      }\n\n      if (self.isError && !self.isAjaxUpload) {\n        self.clear();\n      }\n\n      if (self.focusCaptionOnBrowse) {\n        self.$captionContainer.focus();\n      }\n    },\n    _change: function _change(e) {\n      var self = this;\n      $(document.body).off('focusin.fileinput focusout.fileinput');\n\n      if (self.changeTriggered) {\n        return;\n      }\n\n      self._setLoading('show');\n\n      var $el = self.$element,\n          isDragDrop = arguments.length > 1,\n          isAjaxUpload = self.isAjaxUpload,\n          tfiles,\n          files = isDragDrop ? arguments[1] : $el[0].files,\n          ctr = self.fileManager.count(),\n          total,\n          initCount,\n          len,\n          isSingleUpl = $h.isEmpty($el.attr('multiple')),\n          maxCount = !isAjaxUpload && isSingleUpl ? 1 : self.maxFileCount,\n          maxTotCount = self.maxTotalFileCount,\n          inclAll = maxTotCount > 0 && maxTotCount > maxCount,\n          flagSingle = isSingleUpl && ctr > 0,\n          throwError = function throwError(mesg, file, previewId, index) {\n        var p1 = $.extend(true, {}, self._getOutData(null, {}, {}, files), {\n          id: previewId,\n          index: index\n        }),\n            p2 = {\n          id: previewId,\n          index: index,\n          file: file,\n          files: files\n        };\n        self.isPersistentError = true;\n\n        self._setLoading('hide');\n\n        return isAjaxUpload ? self._showFileError(mesg, p1) : self._showError(mesg, p2);\n      },\n          maxCountCheck = function maxCountCheck(n, m, all) {\n        var msg = all ? self.msgTotalFilesTooMany : self.msgFilesTooMany;\n        msg = msg.replace('{m}', m).replace('{n}', n);\n        self.isError = throwError(msg, null, null, null);\n        self.$captionContainer.removeClass('icon-visible');\n\n        self._setCaption('', true);\n\n        self.$container.removeClass('file-input-new file-input-ajax-new');\n      };\n\n      self.reader = null;\n\n      self._resetUpload();\n\n      self._hideFileIcon();\n\n      if (self.dropZoneEnabled) {\n        self.$container.find('.file-drop-zone .' + self.dropZoneTitleClass).remove();\n      }\n\n      if (!isAjaxUpload) {\n        if (e.target && e.target.files === undefined) {\n          files = e.target.value ? [{\n            name: e.target.value.replace(/^.+\\\\/, '')\n          }] : [];\n        } else {\n          files = e.target.files || {};\n        }\n      }\n\n      tfiles = files;\n\n      if ($h.isEmpty(tfiles) || tfiles.length === 0) {\n        if (!isAjaxUpload) {\n          self.clear();\n        }\n\n        self._raise('fileselectnone');\n\n        return;\n      }\n\n      self._resetErrors();\n\n      len = tfiles.length;\n      initCount = isAjaxUpload ? self.fileManager.count() + len : len;\n      total = self._getFileCount(initCount, inclAll ? false : undefined);\n\n      if (maxCount > 0 && total > maxCount) {\n        if (!self.autoReplace || len > maxCount) {\n          maxCountCheck(self.autoReplace && len > maxCount ? len : total, maxCount);\n          return;\n        }\n\n        if (total > maxCount) {\n          self._resetPreviewThumbs(isAjaxUpload);\n        }\n      } else {\n        if (inclAll) {\n          total = self._getFileCount(initCount, true);\n\n          if (maxTotCount > 0 && total > maxTotCount) {\n            if (!self.autoReplace || len > maxCount) {\n              maxCountCheck(self.autoReplace && len > maxTotCount ? len : total, maxTotCount, true);\n              return;\n            }\n\n            if (total > maxCount) {\n              self._resetPreviewThumbs(isAjaxUpload);\n            }\n          }\n        }\n\n        if (!isAjaxUpload || flagSingle) {\n          self._resetPreviewThumbs(false);\n\n          if (flagSingle) {\n            self.clearFileStack();\n          }\n        } else {\n          if (isAjaxUpload && ctr === 0 && (!self.previewCache.count(true) || self.overwriteInitial)) {\n            self._resetPreviewThumbs(true);\n          }\n        }\n      }\n\n      self.readFiles(tfiles);\n\n      self._setLoading('hide');\n    },\n    _abort: function _abort(params) {\n      var self = this,\n          data;\n\n      if (self.ajaxAborted && _typeof(self.ajaxAborted) === 'object' && self.ajaxAborted.message !== undefined) {\n        data = $.extend(true, {}, self._getOutData(null), params);\n        data.abortData = self.ajaxAborted.data || {};\n        data.abortMessage = self.ajaxAborted.message;\n\n        self._setProgress(101, self.$progress, self.msgCancelled);\n\n        self._showFileError(self.ajaxAborted.message, data, 'filecustomerror');\n\n        self.cancel();\n        return true;\n      }\n\n      return !!self.ajaxAborted;\n    },\n    _resetFileStack: function _resetFileStack() {\n      var self = this,\n          i = 0;\n\n      self._getThumbs().each(function () {\n        var $thumb = $(this),\n            ind = $thumb.attr('data-fileindex'),\n            pid = $thumb.attr('id');\n\n        if (ind === '-1' || ind === -1) {\n          return;\n        }\n\n        if (!self._getThumbFile($thumb)) {\n          $thumb.attr({\n            'data-fileindex': i\n          });\n          i++;\n        } else {\n          $thumb.attr({\n            'data-fileindex': '-1'\n          });\n        }\n\n        self._getZoom(pid).attr({\n          'data-fileindex': $thumb.attr('data-fileindex')\n        });\n      });\n    },\n    _isFileSelectionValid: function _isFileSelectionValid(cnt) {\n      var self = this;\n      cnt = cnt || 0;\n\n      if (self.required && !self.getFilesCount()) {\n        self.$errorContainer.html('');\n\n        self._showFileError(self.msgFileRequired);\n\n        return false;\n      }\n\n      if (self.minFileCount > 0 && self._getFileCount(cnt) < self.minFileCount) {\n        self._noFilesError({});\n\n        return false;\n      }\n\n      return true;\n    },\n    _canPreview: function _canPreview(file) {\n      var self = this;\n\n      if (!file || !self.showPreview || !self.$preview || !self.$preview.length) {\n        return false;\n      }\n\n      var name = file.name || '',\n          type = file.type || '',\n          size = (file.size || 0) / 1000,\n          cat = self._parseFileType(type, name),\n          allowedTypes,\n          allowedMimes,\n          allowedExts,\n          skipPreview,\n          types = self.allowedPreviewTypes,\n          mimes = self.allowedPreviewMimeTypes,\n          exts = self.allowedPreviewExtensions || [],\n          dTypes = self.disabledPreviewTypes,\n          dMimes = self.disabledPreviewMimeTypes,\n          dExts = self.disabledPreviewExtensions || [],\n          maxSize = self.maxFilePreviewSize && parseFloat(self.maxFilePreviewSize) || 0,\n          expAllExt = new RegExp('\\\\.(' + exts.join('|') + ')$', 'i'),\n          expDisExt = new RegExp('\\\\.(' + dExts.join('|') + ')$', 'i');\n\n      allowedTypes = !types || types.indexOf(cat) !== -1;\n      allowedMimes = !mimes || mimes.indexOf(type) !== -1;\n      allowedExts = !exts.length || $h.compare(name, expAllExt);\n      skipPreview = dTypes && dTypes.indexOf(cat) !== -1 || dMimes && dMimes.indexOf(type) !== -1 || dExts.length && $h.compare(name, expDisExt) || maxSize && !isNaN(maxSize) && size > maxSize;\n      return !skipPreview && (allowedTypes || allowedMimes || allowedExts);\n    },\n    addToStack: function addToStack(file, id) {\n      this.fileManager.add(file, id);\n    },\n    clearFileStack: function clearFileStack() {\n      var self = this;\n      self.fileManager.clear();\n\n      self._initResumableUpload();\n\n      if (self.enableResumableUpload) {\n        if (self.showPause === null) {\n          self.showPause = true;\n        }\n\n        if (self.showCancel === null) {\n          self.showCancel = false;\n        }\n      } else {\n        self.showPause = false;\n\n        if (self.showCancel === null) {\n          self.showCancel = true;\n        }\n      }\n\n      return self.$element;\n    },\n    getFileStack: function getFileStack() {\n      return this.fileManager.stack;\n    },\n    getFileList: function getFileList() {\n      return this.fileManager.list();\n    },\n    getFilesSize: function getFilesSize() {\n      return this.fileManager.getTotalSize();\n    },\n    getFilesCount: function getFilesCount(includeInitial) {\n      var self = this,\n          len = self.isAjaxUpload ? self.fileManager.count() : self._inputFileCount();\n\n      if (includeInitial) {\n        len += self.previewCache.count(true);\n      }\n\n      return self._getFileCount(len);\n    },\n    _initCapStatus: function _initCapStatus(status) {\n      var self = this,\n          $cap = self.$caption;\n      $cap.removeClass('is-valid file-processing');\n\n      if (!status) {\n        return;\n      }\n\n      if (status === 'processing') {\n        $cap.addClass('file-processing');\n      } else {\n        $cap.addClass('is-valid');\n      }\n    },\n    _setLoading: function _setLoading(type) {\n      var self = this;\n      self.$previewStatus.html(type === 'hide' ? '' : self.msgProcessing);\n      self.$container.removeClass('file-thumb-loading');\n\n      self._initCapStatus(type === 'hide' ? '' : 'processing');\n\n      if (type !== 'hide') {\n        if (self.dropZoneEnabled) {\n          self.$container.find('.file-drop-zone .' + self.dropZoneTitleClass).remove();\n        }\n\n        self.$container.addClass('file-thumb-loading');\n      }\n    },\n    _initFileSelected: function _initFileSelected() {\n      var self = this,\n          $el = self.$element,\n          $body = $(document.body),\n          ev = 'focusin.fileinput focusout.fileinput';\n\n      if ($body.length) {\n        $body.off(ev).on('focusout.fileinput', function () {\n          self._setLoading('show');\n        }).on('focusin.fileinput', function () {\n          setTimeout(function () {\n            if (!$el.val()) {\n              self._setLoading('hide');\n\n              self._setFileDropZoneTitle();\n            }\n\n            $body.off(ev);\n          }, 2500);\n        });\n      } else {\n        self._setLoading('hide');\n      }\n    },\n    readFiles: function readFiles(files) {\n      this.reader = new FileReader();\n\n      var self = this,\n          reader = self.reader,\n          $container = self.$previewContainer,\n          $status = self.$previewStatus,\n          msgLoading = self.msgLoading,\n          msgProgress = self.msgProgress,\n          previewInitId = self.previewInitId,\n          numFiles = files.length,\n          settings = self.fileTypeSettings,\n          _readFile,\n          fileTypes = self.allowedFileTypes,\n          typLen = fileTypes ? fileTypes.length : 0,\n          fileExt = self.allowedFileExtensions,\n          strExt = $h.isEmpty(fileExt) ? '' : fileExt.join(', '),\n          throwError = function throwError(msg, file, previewId, index, fileId) {\n        var $thumb,\n            p1 = $.extend(true, {}, self._getOutData(null, {}, {}, files), {\n          id: previewId,\n          index: index,\n          fileId: fileId\n        }),\n            p2 = {\n          id: previewId,\n          index: index,\n          fileId: fileId,\n          file: file,\n          files: files\n        };\n\n        self._previewDefault(file, true);\n\n        $thumb = self._getFrame(previewId, true);\n\n        self._setLoading('hide');\n\n        if (self.isAjaxUpload) {\n          setTimeout(function () {\n            _readFile(index + 1);\n          }, self.processDelay);\n        } else {\n          self.unlock();\n          numFiles = 0;\n        }\n\n        if (self.removeFromPreviewOnError && $thumb.length) {\n          $thumb.remove();\n        } else {\n          self._initFileActions();\n\n          $thumb.find('.kv-file-upload').remove();\n        }\n\n        self.isPersistentError = true;\n        self.isError = self.isAjaxUpload ? self._showFileError(msg, p1) : self._showError(msg, p2);\n\n        self._updateFileDetails(numFiles);\n      };\n\n      self.fileManager.clearImages();\n      $.each(files, function (key, file) {\n        var func = self.fileTypeSettings.image;\n\n        if (func && func(file.type)) {\n          self.fileManager.totalImages++;\n        }\n      });\n\n      _readFile = function readFile(i) {\n        var $error = self.$errorContainer,\n            errors,\n            fm = self.fileManager;\n\n        if (i >= numFiles) {\n          self.unlock();\n\n          if (self.duplicateErrors.length) {\n            errors = '<li>' + self.duplicateErrors.join('</li><li>') + '</li>';\n\n            if ($error.find('ul').length === 0) {\n              $h.setHtml($error, self.errorCloseButton + '<ul>' + errors + '</ul>');\n            } else {\n              $error.find('ul').append(errors);\n            }\n\n            $error.fadeIn(self.fadeDelay);\n\n            self._handler($error.find('.kv-error-close'), 'click', function () {\n              $error.fadeOut(self.fadeDelay);\n            });\n\n            self.duplicateErrors = [];\n          }\n\n          if (self.isAjaxUpload) {\n            self._raise('filebatchselected', [fm.stack]);\n\n            if (fm.count() === 0 && !self.isError) {\n              self.reset();\n            }\n          } else {\n            self._raise('filebatchselected', [files]);\n          }\n\n          $container.removeClass('file-thumb-loading');\n\n          self._initCapStatus('valid');\n\n          $status.html('');\n          return;\n        }\n\n        self.lock(true);\n\n        var file = files[i],\n            id = self._getFileId(file),\n            previewId = previewInitId + '-' + id,\n            fSizeKB,\n            j,\n            msg,\n            fnImage = settings.image,\n            typ,\n            chk,\n            typ1,\n            typ2,\n            caption = self._getFileName(file, ''),\n            fileSize = (file && file.size || 0) / 1000,\n            fileExtExpr = '',\n            previewData = $h.createObjectURL(file),\n            fileCount = 0,\n            strTypes = '',\n            fileId,\n            canLoad,\n            fileReaderAborted = false,\n            func,\n            knownTypes = 0,\n            isImage,\n            txtFlag,\n            processFileLoaded = function processFileLoaded() {\n          var isImageResized = !!fm.loadedImages[id],\n              msg = msgProgress.setTokens({\n            'index': i + 1,\n            'files': numFiles,\n            'percent': 50,\n            'name': caption\n          });\n          setTimeout(function () {\n            $status.html(msg);\n\n            self._updateFileDetails(numFiles);\n\n            _readFile(i + 1);\n          }, self.processDelay);\n\n          if (self._raise('fileloaded', [file, previewId, id, i, reader]) && self.isAjaxUpload) {\n            if (!isImageResized) {\n              fm.add(file);\n            }\n          } else {\n            if (isImageResized) {\n              fm.removeFile(id);\n            }\n          }\n        };\n\n        if (!file) {\n          return;\n        }\n\n        fileId = fm.getId(file);\n\n        if (typLen > 0) {\n          for (j = 0; j < typLen; j++) {\n            typ1 = fileTypes[j];\n            typ2 = self.msgFileTypes[typ1] || typ1;\n            strTypes += j === 0 ? typ2 : ', ' + typ2;\n          }\n        }\n\n        if (caption === false) {\n          _readFile(i + 1);\n\n          return;\n        }\n\n        if (caption.length === 0) {\n          msg = self.msgInvalidFileName.replace('{name}', $h.htmlEncode($h.getFileName(file), '[unknown]'));\n          throwError(msg, file, previewId, i, fileId);\n          return;\n        }\n\n        if (!$h.isEmpty(fileExt)) {\n          fileExtExpr = new RegExp('\\\\.(' + fileExt.join('|') + ')$', 'i');\n        }\n\n        fSizeKB = fileSize.toFixed(2);\n\n        if (self.isAjaxUpload && fm.exists(fileId) || self._getFrame(previewId, true).length) {\n          var p2 = {\n            id: previewId,\n            index: i,\n            fileId: fileId,\n            file: file,\n            files: files\n          };\n          msg = self.msgDuplicateFile.setTokens({\n            name: caption,\n            size: fSizeKB\n          });\n\n          if (self.isAjaxUpload) {\n            self.duplicateErrors.push(msg);\n            self.isDuplicateError = true;\n\n            self._raise('fileduplicateerror', [file, fileId, caption, fSizeKB, previewId, i]);\n\n            _readFile(i + 1);\n\n            self._updateFileDetails(numFiles);\n          } else {\n            self._showError(msg, p2);\n\n            self.unlock();\n            numFiles = 0;\n\n            self._clearFileInput();\n\n            self.reset();\n\n            self._updateFileDetails(numFiles);\n          }\n\n          return;\n        }\n\n        if (self.maxFileSize > 0 && fileSize > self.maxFileSize) {\n          msg = self.msgSizeTooLarge.setTokens({\n            'name': caption,\n            'size': fSizeKB,\n            'maxSize': self.maxFileSize\n          });\n          throwError(msg, file, previewId, i, fileId);\n          return;\n        }\n\n        if (self.minFileSize !== null && fileSize <= $h.getNum(self.minFileSize)) {\n          msg = self.msgSizeTooSmall.setTokens({\n            'name': caption,\n            'size': fSizeKB,\n            'minSize': self.minFileSize\n          });\n          throwError(msg, file, previewId, i, fileId);\n          return;\n        }\n\n        if (!$h.isEmpty(fileTypes) && $h.isArray(fileTypes)) {\n          for (j = 0; j < fileTypes.length; j += 1) {\n            typ = fileTypes[j];\n            func = settings[typ];\n            fileCount += !func || typeof func !== 'function' ? 0 : func(file.type, $h.getFileName(file)) ? 1 : 0;\n          }\n\n          if (fileCount === 0) {\n            msg = self.msgInvalidFileType.setTokens({\n              name: caption,\n              types: strTypes\n            });\n            throwError(msg, file, previewId, i, fileId);\n            return;\n          }\n        }\n\n        if (fileCount === 0 && !$h.isEmpty(fileExt) && $h.isArray(fileExt) && !$h.isEmpty(fileExtExpr)) {\n          chk = $h.compare(caption, fileExtExpr);\n          fileCount += $h.isEmpty(chk) ? 0 : chk.length;\n\n          if (fileCount === 0) {\n            msg = self.msgInvalidFileExtension.setTokens({\n              name: caption,\n              extensions: strExt\n            });\n            throwError(msg, file, previewId, i, fileId);\n            return;\n          }\n        }\n\n        if (!self._canPreview(file)) {\n          canLoad = self.isAjaxUpload && self._raise('filebeforeload', [file, i, reader]);\n\n          if (self.isAjaxUpload && canLoad) {\n            fm.add(file);\n          }\n\n          if (self.showPreview && canLoad) {\n            $container.addClass('file-thumb-loading');\n\n            self._initCapStatus('processing');\n\n            self._previewDefault(file);\n\n            self._initFileActions();\n          }\n\n          setTimeout(function () {\n            if (canLoad) {\n              self._updateFileDetails(numFiles);\n            }\n\n            _readFile(i + 1);\n\n            self._raise('fileloaded', [file, previewId, id, i]);\n          }, 10);\n          return;\n        }\n\n        isImage = fnImage(file.type, caption);\n        $status.html(msgLoading.replace('{index}', i + 1).replace('{files}', numFiles));\n        $container.addClass('file-thumb-loading');\n\n        self._initCapStatus('processing');\n\n        reader.onerror = function (evt) {\n          self._errorHandler(evt, caption);\n        };\n\n        reader.onload = function (theFile) {\n          var hex,\n              fileInfo,\n              uint,\n              _byte,\n              bytes = [],\n              contents,\n              mime,\n              readImage = function readImage() {\n            var newReader = new FileReader();\n\n            newReader.onerror = function (theFileNew) {\n              self._errorHandler(theFileNew, caption);\n            };\n\n            newReader.onload = function (theFileNew) {\n              if (self.isAjaxUpload && !self._raise('filebeforeload', [file, i, reader])) {\n                fileReaderAborted = true;\n\n                self._resetCaption();\n\n                reader.abort();\n                $status.html('');\n                $container.removeClass('file-thumb-loading');\n\n                self._initCapStatus('valid');\n\n                self.enable();\n                return;\n              }\n\n              self._previewFile(i, file, theFileNew, previewData, fileInfo);\n\n              self._initFileActions();\n\n              processFileLoaded();\n            };\n\n            newReader.readAsDataURL(file);\n          };\n\n          fileInfo = {\n            'name': caption,\n            'type': file.type\n          };\n          $.each(settings, function (k, f) {\n            if (k !== 'object' && k !== 'other' && typeof f === 'function' && f(file.type, caption)) {\n              knownTypes++;\n            }\n          });\n\n          if (knownTypes === 0) {\n            // auto detect mime types from content if no known file types detected\n            uint = new Uint8Array(theFile.target.result);\n\n            for (j = 0; j < uint.length; j++) {\n              _byte = uint[j].toString(16);\n              bytes.push(_byte);\n            }\n\n            hex = bytes.join('').toLowerCase().substring(0, 8);\n            mime = $h.getMimeType(hex, '', '');\n\n            if ($h.isEmpty(mime)) {\n              // look for ascii text content\n              contents = $h.arrayBuffer2String(reader.result);\n              mime = $h.isSvg(contents) ? 'image/svg+xml' : $h.getMimeType(hex, contents, file.type);\n            }\n\n            fileInfo = {\n              'name': caption,\n              'type': mime\n            };\n            isImage = fnImage(mime, '');\n\n            if (isImage) {\n              readImage(txtFlag);\n              return;\n            }\n          }\n\n          if (self.isAjaxUpload && !self._raise('filebeforeload', [file, i, reader])) {\n            fileReaderAborted = true;\n\n            self._resetCaption();\n\n            reader.abort();\n            $status.html('');\n            $container.removeClass('file-thumb-loading');\n\n            self._initCapStatus('valid');\n\n            self.enable();\n            return;\n          }\n\n          self._previewFile(i, file, theFile, previewData, fileInfo);\n\n          self._initFileActions();\n\n          processFileLoaded();\n        };\n\n        reader.onprogress = function (data) {\n          if (data.lengthComputable) {\n            var fact = data.loaded / data.total * 100,\n                progress = Math.ceil(fact);\n            msg = msgProgress.setTokens({\n              'index': i + 1,\n              'files': numFiles,\n              'percent': progress,\n              'name': caption\n            });\n            setTimeout(function () {\n              if (!fileReaderAborted) {\n                $status.html(msg);\n              }\n            }, self.processDelay);\n          }\n        };\n\n        if (isImage) {\n          reader.readAsDataURL(file);\n        } else {\n          reader.readAsArrayBuffer(file);\n        }\n      };\n\n      _readFile(0);\n\n      self._updateFileDetails(numFiles, true);\n    },\n    lock: function lock(selectMode) {\n      var self = this,\n          $container = self.$container;\n\n      self._resetErrors();\n\n      self.disable();\n\n      if (!selectMode && self.showCancel) {\n        $container.find('.fileinput-cancel').show();\n      }\n\n      if (!selectMode && self.showPause) {\n        $container.find('.fileinput-pause').show();\n      }\n\n      self._initCapStatus('processing');\n\n      self._raise('filelock', [self.fileManager.stack, self._getExtraData()]);\n\n      return self.$element;\n    },\n    unlock: function unlock(reset) {\n      var self = this,\n          $container = self.$container;\n\n      if (reset === undefined) {\n        reset = true;\n      }\n\n      self.enable();\n      $container.removeClass('is-locked');\n\n      if (self.showCancel) {\n        $container.find('.fileinput-cancel').hide();\n      }\n\n      if (self.showPause) {\n        $container.find('.fileinput-pause').hide();\n      }\n\n      if (reset) {\n        self._resetFileStack();\n      }\n\n      self._initCapStatus();\n\n      self._raise('fileunlock', [self.fileManager.stack, self._getExtraData()]);\n\n      return self.$element;\n    },\n    resume: function resume() {\n      var self = this,\n          fm = self.fileManager,\n          flag = false,\n          rm = self.resumableManager;\n      fm.bpsLog = [];\n      fm.bps = 0;\n\n      if (!self.enableResumableUpload) {\n        return self.$element;\n      }\n\n      if (self.paused) {\n        self._toggleResumableProgress(self.progressPauseTemplate, self.msgUploadResume);\n      } else {\n        flag = true;\n      }\n\n      self.paused = false;\n\n      if (flag) {\n        self._toggleResumableProgress(self.progressInfoTemplate, self.msgUploadBegin);\n      }\n\n      setTimeout(function () {\n        rm.upload();\n      }, self.processDelay);\n      return self.$element;\n    },\n    paste: function paste(e) {\n      var self = this,\n          ev = e.originalEvent,\n          files = ev.clipboardData && ev.clipboardData.files || null;\n\n      if (files) {\n        self._dropFiles(e, files);\n      }\n\n      return self.$element;\n    },\n    pause: function pause() {\n      var self = this,\n          rm = self.resumableManager,\n          xhr = self.ajaxRequests,\n          len = xhr.length,\n          i,\n          pct = rm.getProgress(),\n          actions = self.fileActionSettings,\n          tm = self.taskManager,\n          pool = tm.getPool(rm.id);\n\n      if (!self.enableResumableUpload) {\n        return self.$element;\n      } else {\n        if (pool) {\n          pool.cancel();\n        }\n      }\n\n      self._raise('fileuploadpaused', [self.fileManager, rm]);\n\n      if (len > 0) {\n        for (i = 0; i < len; i += 1) {\n          self.paused = true;\n          xhr[i].abort();\n        }\n      }\n\n      if (self.showPreview) {\n        self._getThumbs().each(function () {\n          var $thumb = $(this),\n              t = self._getLayoutTemplate('stats'),\n              stats,\n              $indicator = $thumb.find('.file-upload-indicator');\n\n          $thumb.removeClass('file-uploading');\n\n          if ($indicator.attr('title') === actions.indicatorLoadingTitle) {\n            self._setThumbStatus($thumb, 'Paused');\n\n            stats = t.setTokens({\n              pendingTime: self.msgPaused,\n              uploadSpeed: ''\n            });\n            self.paused = true;\n\n            self._setProgress(pct, $thumb.find('.file-thumb-progress'), pct + '%', stats);\n          }\n\n          if (!self._getThumbFile($thumb)) {\n            $thumb.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled');\n          }\n        });\n      }\n\n      self._setProgress(101, self.$progress, self.msgPaused);\n\n      return self.$element;\n    },\n    cancel: function cancel() {\n      var self = this,\n          xhr = self.ajaxRequests,\n          rm = self.resumableManager,\n          tm = self.taskManager,\n          pool = rm ? tm.getPool(rm.id) : undefined,\n          len = xhr.length,\n          i;\n\n      if (self.enableResumableUpload && pool) {\n        pool.cancel().done(function () {\n          self._setProgressCancelled();\n        });\n        rm.reset();\n\n        self._raise('fileuploadcancelled', [self.fileManager, rm]);\n      } else {\n        self._raise('fileuploadcancelled', [self.fileManager]);\n      }\n\n      self._initAjax();\n\n      if (len > 0) {\n        for (i = 0; i < len; i += 1) {\n          self.cancelling = true;\n          xhr[i].abort();\n        }\n      }\n\n      self._getThumbs().each(function () {\n        var $thumb = $(this),\n            $prog = $thumb.find('.file-thumb-progress');\n        $thumb.removeClass('file-uploading');\n\n        self._setProgress(0, $prog);\n\n        $prog.hide();\n\n        if (!self._getThumbFile($thumb)) {\n          $thumb.find('.kv-file-upload').removeClass('disabled').removeAttr('disabled');\n          $thumb.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled');\n        }\n\n        self.unlock();\n      });\n\n      setTimeout(function () {\n        self._setProgressCancelled();\n      }, self.processDelay);\n      return self.$element;\n    },\n    clear: function clear() {\n      var self = this,\n          cap;\n\n      if (!self._raise('fileclear')) {\n        return;\n      }\n\n      self.$btnUpload.removeAttr('disabled');\n\n      self._getThumbs().find('video,audio,img').each(function () {\n        $h.cleanMemory($(this));\n      });\n\n      self._clearFileInput();\n\n      self._resetUpload();\n\n      self.clearFileStack();\n      self.isDuplicateError = false;\n      self.isPersistentError = false;\n\n      self._resetErrors(true);\n\n      if (self._hasInitialPreview()) {\n        self._showFileIcon();\n\n        self._resetPreview();\n\n        self._initPreviewActions();\n\n        self.$container.removeClass('file-input-new');\n      } else {\n        self._getThumbs().each(function () {\n          self._clearObjects($(this));\n        });\n\n        if (self.isAjaxUpload) {\n          self.previewCache.data = {};\n        }\n\n        self.$preview.html('');\n        cap = !self.overwriteInitial && self.initialCaption.length > 0 ? self.initialCaption : '';\n        self.$caption.attr('title', '').val(cap);\n        $h.addCss(self.$container, 'file-input-new');\n\n        self._validateDefaultPreview();\n      }\n\n      if (self.$container.find($h.FRAMES).length === 0) {\n        if (!self._initCaption()) {\n          self.$captionContainer.removeClass('icon-visible');\n        }\n      }\n\n      self._hideFileIcon();\n\n      if (self.focusCaptionOnClear) {\n        self.$captionContainer.focus();\n      }\n\n      self._setFileDropZoneTitle();\n\n      self._raise('filecleared');\n\n      return self.$element;\n    },\n    reset: function reset() {\n      var self = this;\n\n      if (!self._raise('filereset')) {\n        return;\n      }\n\n      self.lastProgress = 0;\n\n      self._resetPreview();\n\n      self.$container.find('.fileinput-filename').text('');\n      $h.addCss(self.$container, 'file-input-new');\n\n      if (self.getFrames().length) {\n        self.$container.removeClass('file-input-new');\n      }\n\n      self.clearFileStack();\n\n      self._setFileDropZoneTitle();\n\n      return self.$element;\n    },\n    disable: function disable() {\n      var self = this,\n          $container = self.$container;\n      self.isDisabled = true;\n\n      self._raise('filedisabled');\n\n      self.$element.attr('disabled', 'disabled');\n      $container.addClass('is-locked');\n      $h.addCss($container.find('.btn-file'), 'disabled');\n      $container.find('.kv-fileinput-caption').addClass('file-caption-disabled');\n      $container.find('.fileinput-remove, .fileinput-upload, .file-preview-frame button').attr('disabled', true);\n\n      self._initDragDrop();\n\n      return self.$element;\n    },\n    enable: function enable() {\n      var self = this,\n          $container = self.$container;\n      self.isDisabled = false;\n\n      self._raise('fileenabled');\n\n      self.$element.removeAttr('disabled');\n      $container.removeClass('is-locked');\n      $container.find('.kv-fileinput-caption').removeClass('file-caption-disabled');\n      $container.find('.fileinput-remove, .fileinput-upload, .file-preview-frame button').removeAttr('disabled');\n      $container.find('.btn-file').removeClass('disabled');\n\n      self._initDragDrop();\n\n      return self.$element;\n    },\n    upload: function upload() {\n      var self = this,\n          fm = self.fileManager,\n          totLen = fm.count(),\n          i,\n          outData,\n          hasExtraData = !$.isEmptyObject(self._getExtraData());\n      fm.bpsLog = [];\n      fm.bps = 0;\n\n      if (!self.isAjaxUpload || self.isDisabled || !self._isFileSelectionValid(totLen)) {\n        return;\n      }\n\n      self.lastProgress = 0;\n\n      self._resetUpload();\n\n      if (totLen === 0 && !hasExtraData) {\n        self._showFileError(self.msgUploadEmpty);\n\n        return;\n      }\n\n      self.cancelling = false;\n\n      self._showProgress();\n\n      self.lock();\n\n      if (totLen === 0 && hasExtraData) {\n        self._setProgress(2);\n\n        self._uploadExtraOnly();\n\n        return;\n      }\n\n      if (self.enableResumableUpload) {\n        return self.resume();\n      }\n\n      if (self.uploadAsync || self.enableResumableUpload) {\n        outData = self._getOutData(null);\n\n        self._raise('filebatchpreupload', [outData]);\n\n        self.fileBatchCompleted = false;\n        self.uploadCache = [];\n        $.each(self.getFileStack(), function (id) {\n          var previewId = self._getThumbId(id);\n\n          self.uploadCache.push({\n            id: previewId,\n            content: null,\n            config: null,\n            tags: null,\n            append: true\n          });\n        });\n        self.$preview.find('.file-preview-initial').removeClass($h.SORT_CSS);\n\n        self._initSortable();\n      }\n\n      self._setProgress(2);\n\n      self.hasInitData = false;\n\n      if (self.uploadAsync) {\n        i = 0;\n        $.each(self.getFileStack(), function (id) {\n          self._uploadSingle(i, id, true);\n\n          i++;\n        });\n        return;\n      }\n\n      self._uploadBatch();\n\n      return self.$element;\n    },\n    destroy: function destroy() {\n      var self = this,\n          $form = self.$form,\n          $cont = self.$container,\n          $el = self.$element,\n          ns = self.namespace;\n      $(document).off(ns);\n      $(window).off(ns);\n\n      if ($form && $form.length) {\n        $form.off(ns);\n      }\n\n      if (self.isAjaxUpload) {\n        self._clearFileInput();\n      }\n\n      self._cleanup();\n\n      self._initPreviewCache();\n\n      $el.insertBefore($cont).off(ns).removeData();\n      $cont.off().remove();\n      return $el;\n    },\n    refresh: function refresh(options) {\n      var self = this,\n          $el = self.$element;\n\n      if (_typeof(options) !== 'object' || $h.isEmpty(options)) {\n        options = self.options;\n      } else {\n        options = $.extend(true, {}, self.options, options);\n      }\n\n      self._init(options, true);\n\n      self._listen();\n\n      return $el;\n    },\n    zoom: function zoom(frameId) {\n      var self = this,\n          $frame = self._getFrame(frameId);\n\n      self._showModal($frame);\n    },\n    getExif: function getExif(frameId) {\n      var self = this,\n          $frame = self._getFrame(frameId);\n\n      return $frame && $frame.data('exif') || null;\n    },\n    getFrames: function getFrames(cssFilter) {\n      var self = this,\n          $frames;\n      cssFilter = cssFilter || '';\n      $frames = self.$preview.find($h.FRAMES + cssFilter);\n\n      if (self.reversePreviewOrder) {\n        $frames = $($frames.get().reverse());\n      }\n\n      return $frames;\n    },\n    getPreview: function getPreview() {\n      var self = this;\n      return {\n        content: self.initialPreview,\n        config: self.initialPreviewConfig,\n        tags: self.initialPreviewThumbTags\n      };\n    }\n  };\n\n  $.fn.fileinput = function (option) {\n    if (!$h.hasFileAPISupport() && !$h.isIE(9)) {\n      return;\n    }\n\n    var args = Array.apply(null, arguments),\n        retvals = [];\n    args.shift();\n    this.each(function () {\n      var self = $(this),\n          data = self.data('fileinput'),\n          options = _typeof(option) === 'object' && option,\n          theme = options.theme || self.data('theme'),\n          l = {},\n          t = {},\n          lang = options.language || self.data('language') || $.fn.fileinput.defaults.language || 'en',\n          opt;\n\n      if (!data) {\n        if (theme) {\n          t = $.fn.fileinputThemes[theme] || {};\n        }\n\n        if (lang !== 'en' && !$h.isEmpty($.fn.fileinputLocales[lang])) {\n          l = $.fn.fileinputLocales[lang] || {};\n        }\n\n        opt = $.extend(true, {}, $.fn.fileinput.defaults, t, $.fn.fileinputLocales.en, l, options, self.data());\n        data = new FileInput(this, opt);\n        self.data('fileinput', data);\n      }\n\n      if (typeof option === 'string') {\n        retvals.push(data[option].apply(data, args));\n      }\n    });\n\n    switch (retvals.length) {\n      case 0:\n        return this;\n\n      case 1:\n        return retvals[0];\n\n      default:\n        return retvals;\n    }\n  };\n\n  var IFRAME_ATTRIBS = 'class=\"kv-preview-data file-preview-pdf\" src=\"{renderer}?file={data}\" {style}',\n      defBtnCss1 = 'btn btn-sm btn-kv ' + $h.defaultButtonCss(),\n      defBtnCss2 = 'btn ' + $h.defaultButtonCss(true);\n  $.fn.fileinput.defaults = {\n    language: 'en',\n    showCaption: true,\n    showBrowse: true,\n    showPreview: true,\n    showRemove: true,\n    showUpload: true,\n    showUploadStats: true,\n    showCancel: null,\n    showPause: null,\n    showClose: true,\n    showUploadedThumbs: true,\n    showConsoleLogs: false,\n    browseOnZoneClick: false,\n    autoReplace: false,\n    autoOrientImage: function autoOrientImage() {\n      // applicable for JPEG images only and non ios safari\n      var ua = window.navigator.userAgent,\n          webkit = !!ua.match(/WebKit/i),\n          iOS = !!ua.match(/iP(od|ad|hone)/i),\n          iOSSafari = iOS && webkit && !ua.match(/CriOS/i);\n      return !iOSSafari;\n    },\n    autoOrientImageInitial: true,\n    required: false,\n    rtl: false,\n    hideThumbnailContent: false,\n    encodeUrl: true,\n    focusCaptionOnBrowse: true,\n    focusCaptionOnClear: true,\n    generateFileId: null,\n    previewClass: '',\n    captionClass: '',\n    frameClass: 'krajee-default',\n    mainClass: '',\n    mainTemplate: null,\n    fileSizeGetter: null,\n    initialCaption: '',\n    initialPreview: [],\n    initialPreviewDelimiter: '*$$*',\n    initialPreviewAsData: false,\n    initialPreviewFileType: 'image',\n    initialPreviewConfig: [],\n    initialPreviewThumbTags: [],\n    previewThumbTags: {},\n    initialPreviewShowDelete: true,\n    initialPreviewDownloadUrl: '',\n    removeFromPreviewOnError: false,\n    deleteUrl: '',\n    deleteExtraData: {},\n    overwriteInitial: true,\n    sanitizeZoomCache: function sanitizeZoomCache(content) {\n      var $container = $h.createElement(content);\n      $container.find('input,textarea,select,datalist,form,.file-thumbnail-footer').remove();\n      return $container.html();\n    },\n    previewZoomButtonIcons: {\n      prev: '<i class=\"bi-caret-left-fill\"></i>',\n      next: '<i class=\"bi-caret-right-fill\"></i>',\n      toggleheader: '<i class=\"bi-arrows-expand\"></i>',\n      fullscreen: '<i class=\"bi-arrows-fullscreen\"></i>',\n      borderless: '<i class=\"bi-arrows-angle-expand\"></i>',\n      close: '<i class=\"bi-x-lg\"></i>'\n    },\n    previewZoomButtonClasses: {\n      prev: 'btn btn-navigate',\n      next: 'btn btn-navigate',\n      toggleheader: defBtnCss1,\n      fullscreen: defBtnCss1,\n      borderless: defBtnCss1,\n      close: defBtnCss1\n    },\n    previewTemplates: {},\n    previewContentTemplates: {},\n    preferIconicPreview: false,\n    preferIconicZoomPreview: false,\n    allowedFileTypes: null,\n    allowedFileExtensions: null,\n    allowedPreviewTypes: undefined,\n    allowedPreviewMimeTypes: null,\n    allowedPreviewExtensions: null,\n    disabledPreviewTypes: undefined,\n    disabledPreviewExtensions: ['msi', 'exe', 'com', 'zip', 'rar', 'app', 'vb', 'scr'],\n    disabledPreviewMimeTypes: null,\n    defaultPreviewContent: null,\n    customLayoutTags: {},\n    customPreviewTags: {},\n    previewFileIcon: '<i class=\"bi-file-earmark-fill\"></i>',\n    previewFileIconClass: 'file-other-icon',\n    previewFileIconSettings: {},\n    previewFileExtSettings: {},\n    buttonLabelClass: 'hidden-xs',\n    browseIcon: '<i class=\"bi-folder2-open\"></i> ',\n    browseClass: 'btn btn-primary',\n    removeIcon: '<i class=\"bi-trash\"></i>',\n    removeClass: defBtnCss2,\n    cancelIcon: '<i class=\"bi-slash-circle\"></i>',\n    cancelClass: defBtnCss2,\n    pauseIcon: '<i class=\"bi-pause-fill\"></i>',\n    pauseClass: defBtnCss2,\n    uploadIcon: '<i class=\"bi-upload\"></i>',\n    uploadClass: defBtnCss2,\n    uploadUrl: null,\n    uploadUrlThumb: null,\n    uploadAsync: true,\n    uploadParamNames: {\n      chunkCount: 'chunkCount',\n      chunkIndex: 'chunkIndex',\n      chunkSize: 'chunkSize',\n      chunkSizeStart: 'chunkSizeStart',\n      chunksUploaded: 'chunksUploaded',\n      fileBlob: 'fileBlob',\n      fileId: 'fileId',\n      fileName: 'fileName',\n      fileRelativePath: 'fileRelativePath',\n      fileSize: 'fileSize',\n      retryCount: 'retryCount'\n    },\n    maxAjaxThreads: 5,\n    fadeDelay: 800,\n    processDelay: 100,\n    bitrateUpdateDelay: 500,\n    queueDelay: 10,\n    // must be lesser than process delay\n    progressDelay: 0,\n    // must be lesser than process delay\n    enableResumableUpload: false,\n    resumableUploadOptions: {\n      fallback: null,\n      testUrl: null,\n      // used for checking status of chunks/ files previously / partially uploaded\n      chunkSize: 2 * 1024,\n      // in KB\n      maxThreads: 4,\n      maxRetries: 3,\n      showErrorLog: true,\n      retainErrorHistory: true,\n      // display complete error history always unless user explicitly resets upload\n      skipErrorsAndProceed: false // when set to true, files with errors will be skipped and upload will continue with other files\n\n    },\n    uploadExtraData: {},\n    zoomModalHeight: 480,\n    minImageWidth: null,\n    minImageHeight: null,\n    maxImageWidth: null,\n    maxImageHeight: null,\n    resizeImage: false,\n    resizePreference: 'width',\n    resizeQuality: 0.92,\n    resizeDefaultImageType: 'image/jpeg',\n    resizeIfSizeMoreThan: 0,\n    // in KB\n    minFileSize: -1,\n    maxFileSize: 0,\n    maxFilePreviewSize: 25600,\n    // 25 MB\n    minFileCount: 0,\n    maxFileCount: 0,\n    maxTotalFileCount: 0,\n    validateInitialCount: false,\n    msgValidationErrorClass: 'text-danger',\n    msgValidationErrorIcon: '<i class=\"bi-exclamation-circle-fill\"></i> ',\n    msgErrorClass: 'file-error-message',\n    progressThumbClass: 'progress-bar progress-bar-striped active progress-bar-animated',\n    progressClass: 'progress-bar bg-success progress-bar-success progress-bar-striped active progress-bar-animated',\n    progressInfoClass: 'progress-bar bg-info progress-bar-info progress-bar-striped active progress-bar-animated',\n    progressCompleteClass: 'progress-bar bg-success progress-bar-success',\n    progressPauseClass: 'progress-bar bg-primary progress-bar-primary progress-bar-striped active progress-bar-animated',\n    progressErrorClass: 'progress-bar bg-danger progress-bar-danger',\n    progressUploadThreshold: 99,\n    previewFileType: 'image',\n    elCaptionContainer: null,\n    elCaptionText: null,\n    elPreviewContainer: null,\n    elPreviewImage: null,\n    elPreviewStatus: null,\n    elErrorContainer: null,\n    errorCloseButton: undefined,\n    slugCallback: null,\n    dropZoneEnabled: true,\n    dropZoneTitleClass: 'file-drop-zone-title',\n    fileActionSettings: {},\n    otherActionButtons: '',\n    textEncoding: 'UTF-8',\n    preProcessUpload: null,\n    ajaxSettings: {},\n    ajaxDeleteSettings: {},\n    showAjaxErrorDetails: true,\n    mergeAjaxCallbacks: false,\n    mergeAjaxDeleteCallbacks: false,\n    retryErrorUploads: true,\n    reversePreviewOrder: false,\n    usePdfRenderer: function usePdfRenderer() {\n      var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\n      return !!navigator.userAgent.match(/(iPod|iPhone|iPad|Android)/i) || isIE11;\n    },\n    pdfRendererUrl: '',\n    pdfRendererTemplate: '<iframe ' + IFRAME_ATTRIBS + '></iframe>',\n    tabIndexConfig: {\n      browse: 500,\n      remove: 500,\n      upload: 500,\n      cancel: null,\n      pause: null,\n      modal: -1\n    }\n  }; // noinspection HtmlUnknownAttribute\n\n  $.fn.fileinputLocales.en = {\n    fileSingle: 'file',\n    filePlural: 'files',\n    browseLabel: 'Browse &hellip;',\n    removeLabel: 'Remove',\n    removeTitle: 'Clear all unprocessed files',\n    cancelLabel: 'Cancel',\n    cancelTitle: 'Abort ongoing upload',\n    pauseLabel: 'Pause',\n    pauseTitle: 'Pause ongoing upload',\n    uploadLabel: 'Upload',\n    uploadTitle: 'Upload selected files',\n    msgNo: 'No',\n    msgNoFilesSelected: 'No files selected',\n    msgCancelled: 'Cancelled',\n    msgPaused: 'Paused',\n    msgPlaceholder: 'Select {files} ...',\n    msgZoomModalHeading: 'Detailed Preview',\n    msgFileRequired: 'You must select a file to upload.',\n    msgSizeTooSmall: 'File \"{name}\" (<b>{size} KB</b>) is too small and must be larger than <b>{minSize} KB</b>.',\n    msgSizeTooLarge: 'File \"{name}\" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.',\n    msgFilesTooLess: 'You must select at least <b>{n}</b> {files} to upload.',\n    msgFilesTooMany: 'Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.',\n    msgTotalFilesTooMany: 'You can upload a maximum of <b>{m}</b> files (<b>{n}</b> files detected).',\n    msgFileNotFound: 'File \"{name}\" not found!',\n    msgFileSecured: 'Security restrictions prevent reading the file \"{name}\".',\n    msgFileNotReadable: 'File \"{name}\" is not readable.',\n    msgFilePreviewAborted: 'File preview aborted for \"{name}\".',\n    msgFilePreviewError: 'An error occurred while reading the file \"{name}\".',\n    msgInvalidFileName: 'Invalid or unsupported characters in file name \"{name}\".',\n    msgInvalidFileType: 'Invalid type for file \"{name}\". Only \"{types}\" files are supported.',\n    msgInvalidFileExtension: 'Invalid extension for file \"{name}\". Only \"{extensions}\" files are supported.',\n    msgFileTypes: {\n      'image': 'image',\n      'html': 'HTML',\n      'text': 'text',\n      'video': 'video',\n      'audio': 'audio',\n      'flash': 'flash',\n      'pdf': 'PDF',\n      'object': 'object'\n    },\n    msgUploadAborted: 'The file upload was aborted',\n    msgUploadThreshold: 'Processing &hellip;',\n    msgUploadBegin: 'Initializing &hellip;',\n    msgUploadEnd: 'Done',\n    msgUploadResume: 'Resuming upload &hellip;',\n    msgUploadEmpty: 'No valid data available for upload.',\n    msgUploadError: 'Upload Error',\n    msgDeleteError: 'Delete Error',\n    msgProgressError: 'Error',\n    msgValidationError: 'Validation Error',\n    msgLoading: 'Loading file {index} of {files} &hellip;',\n    msgProgress: 'Loading file {index} of {files} - {name} - {percent}% completed.',\n    msgSelected: '{n} {files} selected',\n    msgProcessing: 'Processing ...',\n    msgFoldersNotAllowed: 'Drag & drop files only! {n} folder(s) dropped were skipped.',\n    msgImageWidthSmall: 'Width of image file \"{name}\" must be at least {size} px.',\n    msgImageHeightSmall: 'Height of image file \"{name}\" must be at least {size} px.',\n    msgImageWidthLarge: 'Width of image file \"{name}\" cannot exceed {size} px.',\n    msgImageHeightLarge: 'Height of image file \"{name}\" cannot exceed {size} px.',\n    msgImageResizeError: 'Could not get the image dimensions to resize.',\n    msgImageResizeException: 'Error while resizing the image.<pre>{errors}</pre>',\n    msgAjaxError: 'Something went wrong with the {operation} operation. Please try again later!',\n    msgAjaxProgressError: '{operation} failed',\n    msgDuplicateFile: 'File \"{name}\" of same size \"{size} KB\" has already been selected earlier. Skipping duplicate selection.',\n    msgResumableUploadRetriesExceeded: 'Upload aborted beyond <b>{max}</b> retries for file <b>{file}</b>! Error Details: <pre>{error}</pre>',\n    msgPendingTime: '{time} remaining',\n    msgCalculatingTime: 'calculating time remaining',\n    ajaxOperations: {\n      deleteThumb: 'file delete',\n      uploadThumb: 'file upload',\n      uploadBatch: 'batch file upload',\n      uploadExtra: 'form data upload'\n    },\n    dropZoneTitle: 'Drag & drop files here &hellip;',\n    dropZoneClickTitle: '<br>(or click to select {files})',\n    previewZoomButtonTitles: {\n      prev: 'View previous file',\n      next: 'View next file',\n      toggleheader: 'Toggle header',\n      fullscreen: 'Toggle full screen',\n      borderless: 'Toggle borderless mode',\n      close: 'Close detailed preview'\n    }\n  };\n  $.fn.fileinput.Constructor = FileInput;\n  /**\r\n   * Convert automatically file inputs with class 'file' into a bootstrap fileinput control.\r\n   */\n  // $(document).ready(function () {\n  //     var $input = $('input.file[type=file]');\n  //     if ($input.length) {\n  //         $input.fileinput({\n  //             dropZoneEnabled: false,\n  //         });\n  //     }\n  // });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/ultima/fileinput.js\n");

/***/ }),

/***/ 159:
/*!***************************************************************!*\
  !*** multi ./resources/metronic/js/pages/ultima/fileinput.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\laragon\www\simpel-taiwan\resources\metronic\js\pages\ultima\fileinput.js */"./resources/metronic/js/pages/ultima/fileinput.js");


/***/ })

/******/ });